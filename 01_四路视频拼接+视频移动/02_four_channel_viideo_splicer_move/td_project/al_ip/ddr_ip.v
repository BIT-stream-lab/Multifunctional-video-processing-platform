/************************************************************\
 **  Copyright (c) 2012-2024 Anlogic Inc.
 **  All Right Reserved.\
\************************************************************/
/************************************************************\
 ** Log	:	This file is generated by Anlogic IP Generator.
 ** File	:	C:/HIT/personal_learn/open_source/01_four_channel_viideo_splicer/td_project/al_ip/ddr_ip.v
 ** Date	:	2024 12 07
 ** TD version	:	6.0.117864
\************************************************************/

`define MC_ENABLE
`define MC_AXI
`define DRAM_DDR3
`define USE_DM
`define USE_RESET
`define USE_CS
`define CTRL_INDEX_0 
`define PPC_LOC_Y40 

`timescale 1ps/1ps

//`define USE_USER_DRAM
//`define DFI_FIFO
//`define USE_APC101_BOARD

module ddr_ip (

    sys_clk            ,
    sys_rst_n          ,
    pll_locked         ,
    dfi_clk            ,
    ddr_init_cal_done  ,
`ifdef USE_CLK1
    user_clk0          ,
`endif
`ifdef USE_CLK2
    user_clk1          ,
`endif
`ifdef USE_CLK3
    user_clk2          ,
`endif
`ifdef USE_CLK4
    user_clk3          ,
`endif

`ifdef MC_ENABLE
`ifdef MC_AXI
    // AXI Slave Interface
    // Slave Interface Write Address Ports
    axi_awaddr         ,
    axi_awvalid        ,
    axi_awready        ,
    axi_awid           ,
    axi_awlen          ,
    axi_awsize         ,
    axi_awburst        ,
    axi_awlock         ,
    axi_awcache        ,
    axi_awprot         ,
    axi_awqos          ,
    // Slave Interface Write Data Ports
    axi_wdata          ,
    axi_wstrb          ,
    axi_wvalid         ,
    axi_wlast          ,
    axi_wready         ,
    // Slave Interface Write Response Ports
    axi_bid            ,
    axi_bresp          ,
    axi_bvalid         ,
    axi_bready         ,
    // Slave Interface Read Address Ports
    axi_araddr         ,
    axi_arvalid        ,
    axi_arready        ,
    axi_arid           ,
    axi_arlen          ,
    axi_arsize         ,
    axi_arburst        ,
    axi_arlock         ,
    axi_arcache        ,
    axi_arprot         ,
    axi_arqos          ,
    // Slave Interface Read Data Ports
    axi_rdata          ,
    axi_rlast          ,
    axi_rvalid         ,
    axi_rready         ,
    axi_rid            ,
    axi_rresp          ,

`else //end mc_axi,start paxi_port define

    //paxi ports
    paxi_awaddr        ,
    paxi_awvalid       ,
    paxi_awready       ,

    paxi_wdata         ,
    paxi_wstrb         ,
    paxi_wvalid        ,
    paxi_wlast         ,
    paxi_wready        ,

    // Write Response Port
    paxi_bid           ,
    paxi_bresp         ,
    paxi_bvalid        ,
    paxi_bready        ,
    // Read Address Ports
    paxi_araddr        ,
    paxi_arvalid       ,
    paxi_arready       ,

    // Read Data Ports
    paxi_rdata         ,
    paxi_rlast         ,
    paxi_rvalid        ,
    paxi_rready        ,
`endif //end mc_ddrphy, start phy_only and ping_pong_phy
`else

// DFI bus signals, between hard controller and users or top-level systems
    dfi_reset_n        ,
    dfi_cke            ,
    dfi_odt            ,
    dfi_cs_n           ,
    dfi_ras_n          ,
    dfi_cas_n          ,
    dfi_we_n           ,
    dfi_bank           ,
    dfi_address        ,
    dfi_wrdata_en      ,
    dfi_wrdata         ,
    dfi_wrdata_mask    ,
    dfi_rddata_en      ,
    `ifdef DFI_FIFO
    dfi_rddata_valid   ,
    dfi_rddata         ,
    dfi_rddata_dbi_n   ,
    `else
    dfi_rddata_valid   ,
    dfi_rddata         ,
    dfi_rddata_dbi_n   ,
    `endif

    `ifdef DRAM_DDR4
    dfi_act_n          ,
    dfi_bg             ,
    `endif

    `ifdef USE_PAR_ALERT
    dfi_parity_in      ,
    `ifdef DFI_FIFO
    dfi_alert_n        ,
    `else
    dfi_alert_n        ,
    `endif
    `endif

    dfi_ctrlupd_req    ,
    dfi_ctrlupd_ack    ,
    dfi_phyupd_req     ,
    dfi_phyupd_ack     ,
    dfi_phyupd_type    ,

    `ifdef USE_USER_DRAM
    // user dram signals
    apb_clk            ,
    user_update        ,
    user_ram_addr      ,
    user_ram_wr_en     ,
    user_ram_rd_en     ,
    user_ram_wr_data   ,
    user_ram_rd_data   ,
    `endif

    mcu_busy           ,
    pzq_cal_done_o     ,
    pzq_cal_done_i     ,
`endif
    // uart debug
    `ifdef USE_DEBUG
    uart_rxd           ,
    uart_txd           ,
    `endif
    ddr_addr           ,
    ddr_ba             ,
    ddr_cke            ,
    ddr_odt            ,
`ifdef USE_CS
    ddr_cs_n           ,
`endif
`ifdef USE_RESET
    ddr_reset_n        ,
`endif
`ifdef DRAM_DDR4
    ddr_ck_t           ,
    ddr_ck_c           ,
    ddr_bg             ,
    ddr_act_n          ,
`ifdef USE_DM
    ddr_dm_dbi         ,
`endif
`ifdef USE_PAR_ALERT
    ddr_parity         ,
    ddr_alert_n        ,
`endif
    ddr_dqs_c          ,
    ddr_dqs_t          ,
`elsif DRAM_DDR3
    ddr_ck_p           ,
    ddr_ck_n           ,
    ddr_ras_n          ,
    ddr_cas_n          ,
    ddr_we_n           ,
    ddr_dqs_n          ,
    ddr_dqs_p          ,
`ifdef USE_DM
    ddr_dm             ,
`endif
`endif
    ddr_dq
   );

parameter DRAM_TYPE           = "DDR3";
parameter ODT_WIDTH           = 1;
parameter CKE_WIDTH           = 1; // # of cke outputs
parameter CS_WIDTH            = 1; // # of unique CS outputs
parameter DQ_WIDTH            = 16;
parameter DQS_WIDTH           = 2; // # of DQS (strobe)
parameter DM_WIDTH            = 2;
parameter ROW_WIDTH           = 14;
parameter ADDR_WIDTH          = 14;
parameter BANK_WIDTH          = 3;
parameter COL_WIDTH           = 10;
parameter CWL                 = 6;
parameter CL                  = 7;
parameter tREFI               = 4160;
parameter tRFC                = 86;
parameter tRP                 = 7;
parameter tWR                 = 8;
parameter tRAS                = 20;
parameter tRTP                = 4;
parameter tWTR_L              = 4;
parameter tWTR_S              = 4;
parameter tRTW                = 7;
parameter tFAW                = 27;
parameter tRRD_L              = 6;
parameter tRRD_S              = 6;
parameter tRCD                = 7;
parameter ADDR_ORDER          = "ROW_COLUMN_BANK";
parameter REORDER             = "NORMAL";
parameter ECC                 = "OFF";
parameter MC_ADDR_WIDTH       = ROW_WIDTH + COL_WIDTH + BANK_WIDTH;
parameter AXI_ID_WIDTH        = 4;
parameter AXI_ADDR_WIDTH      = MC_ADDR_WIDTH + 3;
parameter MC_DATA_WIDTH       = (ECC == "ON")?( DQS_WIDTH-1)*8*8 : DQS_WIDTH*8*8;
parameter MC_MASK_WIDTH       = (ECC == "ON")?( DQS_WIDTH-1)*8   : DQS_WIDTH*8;
parameter AXI_DATA_WIDTH      = MC_DATA_WIDTH;


    input                                     sys_clk            ;
    input                                     sys_rst_n          ;
    output                                    pll_locked         ;
    output                                    dfi_clk            ;
    output                                    ddr_init_cal_done  ;
`ifdef USE_CLK1
    output                                    user_clk0          ;
`endif
`ifdef USE_CLK2
    output                                    user_clk1          ;
`endif
`ifdef USE_CLK3
    output                                    user_clk2          ;
`endif
`ifdef USE_CLK4
    output                                    user_clk3          ;
`endif

`ifdef MC_ENABLE
`ifdef MC_AXI
    // AXI Slave Interface
    // Slave Interface Write Address Ports
    input  wire [AXI_ADDR_WIDTH-1:0]          axi_awaddr         ;
    input  wire                               axi_awvalid        ;
    output wire                               axi_awready        ;
    input  wire [AXI_ID_WIDTH-1:0]            axi_awid           ;
    input  wire [7:0]                         axi_awlen          ;
    input  wire [2:0]                         axi_awsize         ;
    input  wire [1:0]                         axi_awburst        ;
    input  wire [0:0]                         axi_awlock         ;
    input  wire [3:0]                         axi_awcache        ;
    input  wire [2:0]                         axi_awprot         ;
    input  wire [3:0]                         axi_awqos          ;
    // Slave Interface Write Data Ports
    input  wire [AXI_DATA_WIDTH-1:0]          axi_wdata          ;
    input  wire [AXI_DATA_WIDTH/8-1:0]        axi_wstrb          ;
    input  wire                               axi_wvalid         ;
    input  wire                               axi_wlast          ;
    output wire                               axi_wready         ;
    // Slave Interface Write Response Ports
    output wire [AXI_ID_WIDTH-1:0]            axi_bid            ;
    output wire [1:0]                         axi_bresp          ;
    output wire                               axi_bvalid         ;
    input  wire                               axi_bready         ;
    // Slave Interface Read Address Ports
    input  wire [AXI_ADDR_WIDTH-1:0]          axi_araddr         ;
    input  wire                               axi_arvalid        ;
    output wire                               axi_arready        ;
    input  wire [AXI_ID_WIDTH-1:0]            axi_arid           ;
    input  wire [7:0]                         axi_arlen          ;
    input  wire [2:0]                         axi_arsize         ;
    input  wire [1:0]                         axi_arburst        ;
    input  wire [0:0]                         axi_arlock         ;
    input  wire [3:0]                         axi_arcache        ;
    input  wire [2:0]                         axi_arprot         ;
    input  wire [3:0]                         axi_arqos          ;
    // Slave Interface Read Data Ports
    output wire [AXI_DATA_WIDTH-1:0]          axi_rdata          ;
    output wire                               axi_rlast          ;
    output wire                               axi_rvalid         ;
    input  wire                               axi_rready         ;
    output wire [AXI_ID_WIDTH-1:0]            axi_rid            ;
    output wire [1:0]                         axi_rresp          ;

`else //end mc_axi;start paxi_port define

    //paxi ports
    input        [MC_ADDR_WIDTH- 1 : 0]       paxi_awaddr        ;
    input                                     paxi_awvalid       ;
    output                                    paxi_awready       ;

    input        [MC_DATA_WIDTH- 1 : 0]       paxi_wdata         ;
    input        [MC_MASK_WIDTH- 1 : 0]       paxi_wstrb         ;
    input                                     paxi_wvalid        ;
    input                                     paxi_wlast         ;
    output                                    paxi_wready        ;

    // Write Response Port
    output       [AXI_ID_WIDTH  - 1 : 0]      paxi_bid           ;
    output       [                1 : 0]      paxi_bresp         ;
    output                                    paxi_bvalid        ;
    input                                     paxi_bready        ;
    // Read Address Ports
    input        [MC_ADDR_WIDTH- 1 : 0]       paxi_araddr        ;
    input                                     paxi_arvalid       ;
    output                                    paxi_arready       ;

    // Read Data Ports
    output       [MC_DATA_WIDTH- 1 : 0]       paxi_rdata         ;
    output                                    paxi_rlast         ;
    output                                    paxi_rvalid        ;
    input                                     paxi_rready        ;
`endif //end mc_ddrphy; start phy_only and ping_pong_phy
`else

// DFI bus signals; between hard controller and users or top-level systems

    input  [             3:0]                 dfi_reset_n        ;
    input  [ CKE_WIDTH*4-1:0]                 dfi_cke            ;
    input  [ ODT_WIDTH*4-1:0]                 dfi_odt            ;
    input  [ CS_WIDTH *4-1:0]                 dfi_cs_n           ;
    input  [             3:0]                 dfi_ras_n          ;
    input  [             3:0]                 dfi_cas_n          ;
    input  [             3:0]                 dfi_we_n           ;
    input  [BANK_WIDTH*4-1:0]                 dfi_bank           ;
    input  [ADDR_WIDTH*4-1:0]                 dfi_address        ;
    input  [ DQS_WIDTH*4-1:0]                 dfi_wrdata_en      ;
    input  [  DQ_WIDTH*8-1:0]                 dfi_wrdata         ;
    input  [  DM_WIDTH*8-1:0]                 dfi_wrdata_mask    ;
    input  [ DQS_WIDTH*4-1:0]                 dfi_rddata_en      ;
    `ifdef DFI_FIFO
    output [ DQS_WIDTH*4-1:0]                 dfi_rddata_valid   ;
    output [  DQ_WIDTH*8-1:0]                 dfi_rddata         ;
    output [  DM_WIDTH*8-1:0]                 dfi_rddata_dbi_n   ;
    `else
    output reg [ DQS_WIDTH*4-1:0]             dfi_rddata_valid   ;
    output reg [  DQ_WIDTH*8-1:0]             dfi_rddata         ;
    output reg [  DM_WIDTH*8-1:0]             dfi_rddata_dbi_n   ;
    `endif

    `ifdef DRAM_DDR4
    input  [             3:0]                 dfi_act_n          ;
    input  [  BG_WIDTH*4-1:0]                 dfi_bg             ;
    `endif

    `ifdef USE_PAR_ALERT
    input  [             3:0]                 dfi_parity_in      ;
    `ifdef DFI_FIFO
    output [             3:0]                 dfi_alert_n        ;
    `else
    output reg [         3:0]                 dfi_alert_n        ;
    `endif
    `endif

    input  [             1:0]                 dfi_ctrlupd_req    ;
    output [             1:0]                 dfi_ctrlupd_ack    ;
    output [             1:0]                 dfi_phyupd_req     ;
    input  [             1:0]                 dfi_phyupd_ack     ;
    output [             3:0]                 dfi_phyupd_type    ;

    `ifdef USE_USER_DRAM
    // user dram signals
    output  wire                              apb_clk            ;
    input                                     user_update        ;
    input  [  7:0]                            user_ram_addr      ;
    input                                     user_ram_wr_en     ;
    input                                     user_ram_rd_en     ;
    input  [ 31:0]                            user_ram_wr_data   ;
    output [ 31:0]                            user_ram_rd_data   ;
    `endif

    output                                    mcu_busy           ;
    output                                    pzq_cal_done_o     ;
    input                                     pzq_cal_done_i     ;
`endif //stats ddr_* signals and global signals.
    // uart debug
    `ifdef USE_DEBUG
    input                                     uart_rxd           ;
    output                                    uart_txd           ;
    `endif
    output    [ADDR_WIDTH-1:0]                ddr_addr           ;
    output    [BANK_WIDTH-1:0]                ddr_ba             ;
    output    [ CKE_WIDTH-1:0]                ddr_cke            ;
    output    [ ODT_WIDTH-1:0]                ddr_odt            ;
`ifdef USE_CS
    output    [  CS_WIDTH-1:0]                ddr_cs_n           ;
`endif
`ifdef USE_RESET
    output                                    ddr_reset_n        ;
`endif
`ifdef DRAM_DDR4
    output                                    ddr_ck_t           ;
    output                                    ddr_ck_c           ;
    output    [  BG_WIDTH-1:0]                ddr_bg             ;
    output                                    ddr_act_n          ;
`ifdef USE_DM
    inout     [  DM_WIDTH-1:0]                ddr_dm_dbi         ;
`endif
`ifdef USE_PAR_ALERT
    output                                    ddr_parity         ;
    input                                     ddr_alert_n        ;
`endif
    inout     [ DQS_WIDTH-1:0]                ddr_dqs_c          ;
    inout     [ DQS_WIDTH-1:0]                ddr_dqs_t          ;
`elsif DRAM_DDR3
    output                                    ddr_ck_p           ;
    output                                    ddr_ck_n           ;
    output                                    ddr_ras_n          ;
    output                                    ddr_cas_n          ;
    output                                    ddr_we_n           ;
    inout     [ DQS_WIDTH-1:0]                ddr_dqs_n          ;
    inout     [ DQS_WIDTH-1:0]                ddr_dqs_p          ;
`ifdef USE_DM
    inout     [  DM_WIDTH-1:0]                ddr_dm             ;
`endif
`endif
    inout     [  DQ_WIDTH-1:0]                ddr_dq             ;




//===== MC parameters =====//

localparam PER_RD_INTVL = 32'b0;

`ifdef MC_ENABLE
`ifdef MC_AXI
// MC Master Interface
//CMD PORT
    wire                          mc_en            ;
    wire [2:0]                    mc_cmd           ;
    wire [MC_ADDR_WIDTH-1:0]      mc_addr          ;
    wire                          mc_rdy           ;

//DATA PORT
    wire                          mc_wdf_wren      ;
    wire [MC_DATA_WIDTH/8-1:0]    mc_wdf_mask      ;
    wire [MC_DATA_WIDTH-1:0]      mc_wdf_data      ;
    wire                          mc_wdf_end       ;
    wire                          mc_wdf_rdy       ;

    wire                          mc_rd_data_valid ;
    wire [MC_DATA_WIDTH-1:0]      mc_rd_data       ;
    wire                          mc_rd_data_end   ;
`endif
    wire [             3:0]       dfi_reset_n      ;
    wire [ CKE_WIDTH*4-1:0]       dfi_cke          ;
    wire [ ODT_WIDTH*4-1:0]       dfi_odt          ;
    wire [ CS_WIDTH *4-1:0]       dfi_cs_n         ;
    wire [             3:0]       dfi_ras_n        ;
    wire [             3:0]       dfi_cas_n        ;
    wire [             3:0]       dfi_we_n         ;
    wire [BANK_WIDTH*4-1:0]       dfi_bank         ;
    wire [ADDR_WIDTH*4-1:0]       dfi_address      ;
    wire [ DQS_WIDTH*4-1:0]       dfi_wrdata_en    ;
    wire [  DQ_WIDTH*8-1:0]       dfi_wrdata       ;
    wire [  DM_WIDTH*8-1:0]       dfi_wrdata_mask  ;
    wire [ DQS_WIDTH*4-1:0]       dfi_rddata_en    ;
    wire [ DQS_WIDTH*4-1:0]       dfi_rddata_valid ;
    wire [  DQ_WIDTH*8-1:0]       dfi_rddata       ;
    wire [  DM_WIDTH*8-1:0]       dfi_rddata_dbi_n ;

    `ifdef DRAM_DDR4
    wire [             3:0]       dfi_act_n        ;
    wire [  BG_WIDTH*4-1:0]       dfi_bg           ;
    `endif

    `ifdef USE_PAR_ALERT
    wire [             3:0]       dfi_parity_in    ;
    wire [             3:0]       dfi_alert_n      ;
    `else
    wire [             3:0]       dfi_parity_in    = 'd0;
    `endif

    wire [             1:0]       dfi_ctrlupd_req  = 2'd0;
    wire [             1:0]       dfi_ctrlupd_ack;
    wire [             1:0]       dfi_phyupd_req;
    wire [             1:0]       dfi_phyupd_ack;
    wire [             3:0]       dfi_phyupd_type;

    wire                          apb_clk          ;
    wire                          user_update      ='d0 ;
    wire [  7:0]                  user_ram_addr    ='d0 ;
    wire                          user_ram_wr_en   ='d0 ;
    wire                          user_ram_rd_en   ='d0 ;
    wire [ 31:0]                  user_ram_wr_data ='d0 ;


    wire                          mcu_busy         ;
    wire                          pzq_cal_done_o   ;
    wire                          pzq_cal_done_i   ;
`ifdef USE_CLK1
    wire                          user_clk0 ;
`endif
`else//phy only

    `ifndef USE_PAR_ALERT
    wire   [             3:0]     dfi_parity_in    = 'd0;
    `endif

    `ifndef USE_USER_DRAM
    // user dram signals
    wire                          apb_clk          ;
    wire                          user_update      ='d0 ;
    wire   [  7:0]                user_ram_addr    ='d0 ;
    wire                          user_ram_wr_en   ='d0 ;
    wire                          user_ram_rd_en   ='d0 ;
    wire   [ 31:0]                user_ram_wr_data ='d0 ;
    `endif

`endif

// uart debug
`ifndef USE_DEBUG
    wire                          uart_rxd = 'd0;
    wire                          uart_txd ;
`endif


ph1_ddrphy_ip_top #(
   .ADDR_WIDTH       ( ADDR_WIDTH        ),
   .ROW_WIDTH        ( ROW_WIDTH         ),
   .BANK_WIDTH       ( BANK_WIDTH        ),
`ifdef DRAM_DDR4
   .BG_WIDTH         ( BG_WIDTH          ),
`endif
   .ODT_WIDTH        ( ODT_WIDTH         ),
   .CKE_WIDTH        ( CKE_WIDTH         ),
   .CS_WIDTH         ( CS_WIDTH          ),
   .DRAM_TYPE        ( DRAM_TYPE         ),
   .DQS_WIDTH        ( DQS_WIDTH         ),
   .DM_WIDTH         ( DM_WIDTH          ),
   .DQ_WIDTH         ( DQ_WIDTH          )
) u_ph1_logic_standard_phy (
   .sys_clk_p        ( sys_clk           ),
   .sys_rstn         ( sys_rst_n         ),
   .pll_locked       ( pll_locked        ),
`ifdef USE_CLK1
   .user_clk0        ( user_clk0         ),
`endif
    //DDR bus signals
   .ddr_addr         ( ddr_addr          ),
   .ddr_ba           ( ddr_ba            ),
   .ddr_cke          ( ddr_cke           ),
`ifdef DRAM_DDR4
   .ddr_bg           ( ddr_bg            ),
   .ddr_act_n        ( ddr_act_n         ),
   .ddr_ck_c         ( ddr_ck_c          ),
   .ddr_ck_t         ( ddr_ck_t          ),
`ifdef USE_PAR_ALERT
   .ddr_parity       ( ddr_parity        ),
   .ddr_alert_n      ( ddr_alert_n       ),
`endif
`ifdef USE_DM
   .ddr_dm_dbi       (ddr_dm_dbi         ),
`endif
   .ddr_dqs_c        ( ddr_dqs_c         ),
   .ddr_dqs_t        ( ddr_dqs_t         ),
`elsif DRAM_DDR3
   .ddr_ck_n         ( ddr_ck_n          ),
   .ddr_ck_p         ( ddr_ck_p          ),
   .ddr_ras_n        ( ddr_ras_n         ),
   .ddr_cas_n        ( ddr_cas_n         ),
   .ddr_we_n         ( ddr_we_n          ),
   .ddr_dqs_n        ( ddr_dqs_n         ),
   .ddr_dqs_p        ( ddr_dqs_p         ),
`ifdef USE_DM
   .ddr_dm           ( ddr_dm            ),
`endif
`endif

`ifdef USE_CS
   .ddr_cs_n         ( ddr_cs_n          ),
`endif
`ifdef USE_RESET
   .ddr_reset_n      ( ddr_reset_n       ),
`endif
   .ddr_odt          ( ddr_odt           ),
   .ddr_dq           ( ddr_dq            ),
    // DFI bus signals, between hard
    // controller and users or top-level systems
   .dfi_clk          ( dfi_clk           ),
   .dfi_reset_n      ( dfi_reset_n       ),
   .dfi_cke          ( dfi_cke           ),
   .dfi_odt          ( dfi_odt           ),
   .dfi_cs_n         ( dfi_cs_n          ),
   .dfi_ras_n        ( dfi_ras_n         ),
   .dfi_cas_n        ( dfi_cas_n         ),
   .dfi_we_n         ( dfi_we_n          ),
   .dfi_bank         ( dfi_bank          ),
`ifdef DRAM_DDR4
    .dfi_act_n       ( dfi_act_n         ),
    .dfi_bg          ( dfi_bg            ),
`ifdef USE_PAR_ALERT
    .dfi_parity_in   ( dfi_parity_in     ),
    .dfi_alert_n     ( dfi_alert_n       ),
`endif
`endif

   .dfi_address      ( dfi_address       ),
   .dfi_wrdata_en    ( dfi_wrdata_en     ),
   .dfi_wrdata       ( dfi_wrdata        ),
   .dfi_wrdata_mask  ( dfi_wrdata_mask   ),
   .dfi_rddata_en    ( dfi_rddata_en     ),
   .dfi_rddata_valid ( dfi_rddata_valid  ),
   .dfi_rddata       ( dfi_rddata        ),
   .dfi_rddata_dbi_n (                   ),
   .dfi_ctrlupd_req  ( dfi_ctrlupd_req   ),
   .dfi_ctrlupd_ack  ( dfi_ctrlupd_ack   ),
   .dfi_phyupd_req   ( dfi_phyupd_req    ),
   .dfi_phyupd_ack   ( dfi_phyupd_ack    ),
   .dfi_phyupd_type  ( dfi_phyupd_type   ),
`ifdef USE_DEBUG
   .uart_txd         ( uart_txd          ),
   .uart_rxd         ( uart_rxd          ),
`endif
   .ddr_init_cal_done( ddr_init_cal_done )

);

`ifdef DRAM_DDR3
assign dfi_odt = {(ODT_WIDTH*4){1'b1}};
`else
assign dfi_odt = {(ODT_WIDTH*4){1'b0}};
`endif

//===== sync ddr_init_cal_done =====//

`ifdef MC_AXI

alc_axi_bridge_top #(
    .AXI_ID_WIDTH        ( AXI_ID_WIDTH     ),
    .AXI_ADDR_WIDTH      ( AXI_ADDR_WIDTH   ),
    .AXI_DATA_WIDTH      ( AXI_DATA_WIDTH   ),
    .MC_ADDR_WIDTH       ( MC_ADDR_WIDTH    ),
    .MC_DATA_WIDTH       ( MC_DATA_WIDTH    ),
    .AXI_REG_EN0         ( 20'h00000        ),
    .AXI_REG_EN1         ( 20'h00000        ),
    .ECC                 ( ECC              )
) u_axi_bridge           (
    // System Signal
    .aclk                ( dfi_clk          ),
    .aresetn             ( pll_locked       ),
    .init_cal_done       ( ddr_init_cal_done),
    // AW Channel
    .axi_awid            ( axi_awid         ),
    .axi_awaddr          ( axi_awaddr       ),
    .axi_awlen           ( axi_awlen        ),
    .axi_awsize          ( axi_awsize       ),
    .axi_awburst         ( axi_awburst      ),
    .axi_awlock          ( axi_awlock       ),
    .axi_awcache         ( axi_awcache      ),
    .axi_awprot          ( axi_awprot       ),
    .axi_awqos           ( axi_awqos        ),
    .axi_awvalid         ( axi_awvalid      ),
    .axi_awready         ( axi_awready      ),
    // W Channel
    .axi_wdata           ( axi_wdata        ),
    .axi_wstrb           ( axi_wstrb        ),
    .axi_wlast           ( axi_wlast        ),
    .axi_wvalid          ( axi_wvalid       ),
    .axi_wready          ( axi_wready       ),
    // B Channel
    .axi_bid             ( axi_bid          ),
    .axi_bresp           ( axi_bresp        ),
    .axi_bvalid          ( axi_bvalid       ),
    .axi_bready          ( axi_bready       ),
    // AR Channel
    .axi_arid            ( axi_arid         ),
    .axi_araddr          ( axi_araddr       ),
    .axi_arlen           ( axi_arlen        ),
    .axi_arsize          ( axi_arsize       ),
    .axi_arburst         ( axi_arburst      ),
    .axi_arlock          ( axi_arlock       ),
    .axi_arcache         ( axi_arcache      ),
    .axi_arprot          ( axi_arprot       ),
    .axi_arqos           ( axi_arqos        ),
    .axi_arvalid         ( axi_arvalid      ),
    .axi_arready         ( axi_arready      ),
    //R Channel
    .axi_rid             ( axi_rid          ),
    .axi_rdata           ( axi_rdata        ),
    .axi_rresp           ( axi_rresp        ),
    .axi_rlast           ( axi_rlast        ),
    .axi_rvalid          ( axi_rvalid       ),
    .axi_rready          ( axi_rready       ),
    // Connect to MC
    .mc_en               ( mc_en            ),
    .mc_cmd              ( mc_cmd           ),
    .mc_sz               (                  ),
    .mc_addr             ( mc_addr          ),
    .mc_hi_pri           (                  ),
    .mc_autoprecharge    (                  ),
    .mc_rdy              ( mc_rdy           ),
    .mc_wdf_wren         ( mc_wdf_wren      ),
    .mc_wdf_mask         ( mc_wdf_mask      ),
    .mc_wdf_data         ( mc_wdf_data      ),
    .mc_wdf_end          ( mc_wdf_end       ),
    .mc_wdf_rdy          ( mc_wdf_rdy       ),
    .mc_rd_valid         ( mc_rd_data_valid ),
    .mc_rd_data          ( mc_rd_data       ),
    .mc_rd_end           ( mc_rd_data_end   ),
    .mc_ecc_multiple_err ( 8'b0             )
);
`endif


`ifdef MC_ENABLE

localparam  DATA_BUF_ADDR_WIDTH       = 5                  ;
`ifdef Deeper_Read_Buf
parameter  DBAW                       = DATA_BUF_ADDR_WIDTH + 1;
`else
parameter  DBAW                       = DATA_BUF_ADDR_WIDTH;
`endif

localparam  PAYLOAD_WIDTH             = (ECC == "OFF") ? DQ_WIDTH : MC_DATA_WIDTH/8;

    wire                                 phy2mc_rd_data_end_dfi  ;
    wire [                DBAW-1 : 0]    phy2mc_rd_data_addr_dfi ;
    wire [          DQ_WIDTH*8-1 : 0]    phy2mc_rd_data_dfi      ;
    wire                                 phy2mc_rd_data_en_dfi   ;
    wire                                 phy2mc_wr_data_en       ;
    wire [                DBAW-1 : 0]    phy2mc_wr_data_addr     ;
    wire [                     7 : 0]    mc2phy_ck_t             ;
    wire [                     7 : 0]    mc2phy_ck_c             ;
    wire [        ADDR_WIDTH*8-1 : 0]    mc2phy_adr              ;
    wire [        BANK_WIDTH*8-1 : 0]    mc2phy_ba               ;
`ifdef DRAM_DDR4
    wire [                     7 : 0]    mc2phy_act_n            ;
    wire [          BG_WIDTH*8-1 : 0]    mc2phy_bg               ;
`endif
    wire [         CKE_WIDTH*8-1 : 0]    mc2phy_cke              ;
    wire [          CS_WIDTH*8-1 : 0]    mc2phy_cs_n             ;
    wire [         ODT_WIDTH*8-1 : 0]    mc2phy_odt              ;
    wire [                     7 : 0]    mc2phy_ras_n            ;
    wire [                     7 : 0]    mc2phy_cas_n            ;
    wire [                     7 : 0]    mc2phy_we_n             ;
    wire                                 rdCAS                   ;
    wire                                 wrCAS                   ;
    wire [          DQ_WIDTH*8-1 : 0]    mc2phy_wr_data          ;
    wire [          DM_WIDTH*8-1 : 0]    mc2phy_wr_data_mask     ;
    wire                                 periodic_read_win       ;
    wire [                DBAW-1 : 0]    mc2phy_winBuf           ;
    wire                                 periodic_read_done      ;

//===== DDR3/4 Memory Controller =====//
 alc_mc_top #(
       .DQS_WIDTH       (DQS_WIDTH    ),
       .DQ_WIDTH        (DQ_WIDTH     ),
       .DM_WIDTH        (DM_WIDTH     ),
       .DRAM_TYPE       (DRAM_TYPE    ),
       .ECC             (ECC          ),
       .ECC_WIDTH       (8            ),
       .MC_ADDR_WIDTH   (MC_ADDR_WIDTH),
       .MC_DATA_WIDTH   (MC_DATA_WIDTH),
       .MC_MASK_WIDTH   (MC_MASK_WIDTH),
       .PAYLOAD_WIDTH   (PAYLOAD_WIDTH),
       .ADDR_WIDTH      (ADDR_WIDTH   ),
       .AXI_ID_WIDTH    (AXI_ID_WIDTH ),
       .ADDR_ORDER      (ADDR_ORDER   ),
       .REORDER         (REORDER      ),
       .ROW_WIDTH       (ROW_WIDTH    ),
       .BANK_WIDTH      (BANK_WIDTH   ),
`ifdef DRAM_DDR4
       .BG_WIDTH        (BG_WIDTH     ),
`endif
       .COL_WIDTH       (COL_WIDTH    ),
       .CKE_WIDTH       (CKE_WIDTH    ),
       .CS_WIDTH        (CS_WIDTH     ),
       .ODT_WIDTH       (ODT_WIDTH    ),
       .CWL             (CWL          ),
       .PER_RD_INTVL    (PER_RD_INTVL ),
       .ADDR_FIFO_WIDTH (52           ),
       .tREFI           (tREFI        ),
       .tRFC            (tRFC         ),
       .tRP             (tRP          ),
       .tWR             (tWR          ),
       .tRAS            (tRAS         ),
       .tRTP            (tRTP         ),
       .tWTR_L          (tWTR_L       ),
       .tWTR_S          (tWTR_S       ),
       .tRTW            (tRTW         ),
       .tFAW            (tFAW         ),
       .tRRD_L          (tRRD_L       ),
       .tRRD_S          (tRRD_S       ),
       .tRCD            (tRCD         ),
       .DBAW            (DBAW         )
       )
 u_alc_mc_top(
     .rst                    ( ~pll_locked             ),
     .dfi_clk                ( dfi_clk                 ),
     .init_cal_done_PHY      ( ddr_init_cal_done       ),
`ifdef MC_AXI
     .mc_en                  ( mc_en                   ),
     .mc_cmd                 ( mc_cmd                  ),
     .mc_addr                ( mc_addr                 ),
     .mc_rdy                 ( mc_rdy                  ),
    //DATA PORT
     .mc_wdf_wren            ( mc_wdf_wren             ),
     .mc_wdf_mask            ( mc_wdf_mask             ),
     .mc_wdf_data            ( mc_wdf_data             ),
     .mc_wdf_end             ( mc_wdf_end              ),
     .mc_wdf_rdy             ( mc_wdf_rdy              ),
     .mc_rd_data_valid       ( mc_rd_data_valid        ),
     .mc_rd_data             ( mc_rd_data              ),
     .mc_rd_data_end         ( mc_rd_data_end          ),

     //paxi
`else
     .paxi_awaddr            ( paxi_awaddr             ),
     .paxi_awvalid           ( paxi_awvalid            ),
     .paxi_awready           ( paxi_awready            ),

     // Write Data Port
     .paxi_wdata             ( paxi_wdata              ),
     .paxi_wstrb             ( paxi_wstrb              ),
     .paxi_wvalid            ( paxi_wvalid             ),
     .paxi_wlast             ( paxi_wlast              ),
     .paxi_wready            ( paxi_wready             ),
     // Write Response Port
     .paxi_bid               ( paxi_bid                ),
     .paxi_bresp             ( paxi_bresp              ),
     .paxi_bvalid            ( paxi_bvalid             ),
     .paxi_bready            ( paxi_bready             ),
     // Read Address Ports
     .paxi_araddr            ( paxi_araddr             ),
     .paxi_arvalid           ( paxi_arvalid            ),
     .paxi_arready           ( paxi_arready            ),
     // Read Data Ports
     .paxi_rdata             ( paxi_rdata              ),
     .paxi_rlast             ( paxi_rlast              ),
     .paxi_rvalid            ( paxi_rvalid             ),
     .paxi_rready            ( paxi_rready             ),
`endif
// PHY &retiming module
    .dfi_phyupd_req          ( dfi_phyupd_req          ),
    .dfi_phyupd_ack          ( dfi_phyupd_ack          ),
    .phy2mc_rd_data_end_dfi  ( phy2mc_rd_data_end_dfi  ),
    .phy2mc_rd_data_addr_dfi ( phy2mc_rd_data_addr_dfi ),
    .phy2mc_rd_data_dfi      ( phy2mc_rd_data_dfi      ),
    .phy2mc_rd_data_en_dfi   ( phy2mc_rd_data_en_dfi   ),
    .phy2mc_wr_data_en       ( phy2mc_wr_data_en       ),
    .phy2mc_wr_data_addr     ( phy2mc_wr_data_addr     ),
   // to retiming
    .mc2phy_ck_t             ( mc2phy_ck_t             ),
    .mc2phy_ck_c             ( mc2phy_ck_c             ),
    .mc2phy_adr              ( mc2phy_adr              ),
    .mc2phy_ba               ( mc2phy_ba               ),
`ifdef DRAM_DDR4
    .mc2phy_act_n            ( mc2phy_act_n            ),
    .mc2phy_bg               ( mc2phy_bg               ),
`endif
    .mc2phy_cke              ( mc2phy_cke              ),
    .mc2phy_cs_n             ( mc2phy_cs_n             ),
    .mc2phy_odt              ( mc2phy_odt              ),
    .mc2phy_ras_n            ( mc2phy_ras_n            ),
    .mc2phy_cas_n            ( mc2phy_cas_n            ),
    .mc2phy_we_n             ( mc2phy_we_n             ),
    .rdCAS                   ( rdCAS                   ),
    .wrCAS                   ( wrCAS                   ),
    .mc2phy_wr_data          ( mc2phy_wr_data          ),
    .mc2phy_wr_data_mask     ( mc2phy_wr_data_mask     ),
    .periodic_read_win       ( periodic_read_win       ),
    .mc2phy_winBuf           ( mc2phy_winBuf           ),
    .periodic_read_done      ( periodic_read_done      )

);

//==== ALC_retiming====//
alc_dfi_retiming #(
    .DRAM_TYPE           ( DRAM_TYPE  ),
    .DQS_WIDTH           ( DQS_WIDTH  ),
    .ECC                 ( ECC        ),
    .ADDR_WIDTH          ( ADDR_WIDTH ),
    .ROW_WIDTH           ( ROW_WIDTH  ),
    .BANK_WIDTH          ( BANK_WIDTH ),
`ifdef DRAM_DDR4
    .BG_WIDTH            ( BG_WIDTH   ),
`endif
    .CKE_WIDTH           ( CKE_WIDTH  ),
    .CS_WIDTH            ( CS_WIDTH   ),
    .ODT_WIDTH           ( ODT_WIDTH  ),
    .CWL                 ( CWL        ),
    .CL                  ( CL         ),
    .tWPRE               ( 1          ),
    .DBAW                ( DBAW       )
) u_dfi_retiming (
    //system input
    .clk                           ( dfi_clk                ),
    .rst                           ( ~pll_locked            ),
    //From PHY & retiming module
    .phy2mc_cal_done               ( ddr_init_cal_done      ),
    .phy2mc_rd_data_end            ( phy2mc_rd_data_end_dfi ),
    .phy2mc_rd_data_addr           ( phy2mc_rd_data_addr_dfi),
    .phy2mc_rd_data                ( phy2mc_rd_data_dfi     ),
    .phy2mc_rd_data_en             ( phy2mc_rd_data_en_dfi  ),
    .phy2mc_wr_data_en             ( phy2mc_wr_data_en      ),
    .phy2mc_wr_data_addr           ( phy2mc_wr_data_addr    ),
    //From MC
    .mc2phy_ck_t                   ( mc2phy_ck_t            ),
    .mc2phy_ck_c                   ( mc2phy_ck_c            ),
    .mc2phy_adr                    ( mc2phy_adr             ),
    .mc2phy_ba                     ( mc2phy_ba              ),
`ifdef DRAM_DDR4
    .mc2phy_act_n                  ( mc2phy_act_n           ),
    .mc2phy_bg                     ( mc2phy_bg              ),
`endif
    .mc2phy_cke                    ( mc2phy_cke             ),
    .mc2phy_cs_n                   ( mc2phy_cs_n            ),
    .mc2phy_odt                    ( mc2phy_odt             ),
    .mc2phy_ras_n                  ( mc2phy_ras_n           ),
    .mc2phy_cas_n                  ( mc2phy_cas_n           ),
    .mc2phy_we_n                   ( mc2phy_we_n            ),
    .mc2phy_rd_cas                 ( rdCAS                  ),
    .mc2phy_wr_cas                 ( wrCAS                  ),
    .mc2phy_wr_data                ( mc2phy_wr_data         ),
    .mc2phy_wr_data_mask           ( mc2phy_wr_data_mask    ),
    .mc2phy_periodic_read_win      ( periodic_read_win      ),
    .mc2phy_winBuf                 ( mc2phy_winBuf          ),
    // dfi signal To PHY
    .dfi_reset_n                   ( dfi_reset_n            ),
    .dfi_cke_p                     ( dfi_cke                ),
    .dfi_cs_n_p                    ( dfi_cs_n               ),
//  .dfi_odt_p                     ( dfi_odt                ),
    .dfi_act_n_p                   ( dfi_act_n              ),
    .dfi_ras_n_p                   ( dfi_ras_n              ),
    .dfi_cas_n_p                   ( dfi_cas_n              ),
    .dfi_we_n_p                    ( dfi_we_n               ),
    .dfi_bg_p                      ( dfi_bg                 ),
    .dfi_bank_p                    ( dfi_bank               ),
    .dfi_address_p                 ( dfi_address            ),
    .dfi_wrdata_en_p               ( dfi_wrdata_en          ),
    .dfi_wrdata_p                  ( dfi_wrdata             ),
    .dfi_wrdata_mask_p             ( dfi_wrdata_mask        ),
    .dfi_rddata_en_p               ( dfi_rddata_en          ),
    .dfi_rddata_valid_w            ( dfi_rddata_valid       ),
    .dfi_rddata_w                  ( dfi_rddata             ),
    .dfi_rddata_dbi_w              ( dfi_rddata_dbi_n       ),
    .periodic_read_done            ( periodic_read_done     )
);
//===== AXI Master Test Bench =====//
`endif //end of MC_ENABLE


endmodule




//***********************************************************/
//               _______________
//            //\ _____________
//           // \\ ___________
//          //   \\ _________
//         //     \\ _______
//        //       \\ _____
//       //         \\ ___
//      //_ _ _ _    \\ _
//      -----------
//
//Copyright(c)2011-2022 Anlogic Inc,All Right Reserved.
//Vender           : Anlogic
//Auther           : unkown
//Filename         : alc_axi_beidge_top.v
//Description      : alc full protocol rx module
//Revision History : 2022-07-30
//Revison          : 1.0
//Emaile           : u@anlogic.com.cn
//***********************************************************/

`timescale 1ps/1ps
module alc_axi_bridge_top #(
    parameter integer AXI_ID_WIDTH   = 4     ,
    parameter integer AXI_ADDR_WIDTH = 28    ,
    parameter integer AXI_DATA_WIDTH = 512   ,
    parameter integer MC_ADDR_WIDTH  = 28    ,
    parameter integer MC_DATA_WIDTH  = 512   ,
    parameter         AXI_REG_EN0    = 20'h00000, 
    parameter         AXI_REG_EN1    = 20'h00000,                       
    parameter         ECC            = "OFF"                    
) (
    // AXI Slave Interface
    // Slave Interface System Signals           
    input  wire                               aclk            , 
    input  wire                               aresetn         ,
    input  wire                               init_cal_done   , 
    // Slave Interface Write Address Ports
    input  wire [AXI_ID_WIDTH-1:0]            axi_awid        , 
    input  wire [AXI_ADDR_WIDTH-1:0]          axi_awaddr      , 
    input  wire [7:0]                         axi_awlen       , 
    input  wire [2:0]                         axi_awsize      , 
    input  wire [1:0]                         axi_awburst     , 
    input  wire [0:0]                         axi_awlock      , 
    input  wire [3:0]                         axi_awcache     , 
    input  wire [2:0]                         axi_awprot      , 
    input  wire [3:0]                         axi_awqos       , 
    input  wire                               axi_awvalid     , 
    output wire                               axi_awready     , 
    // Slave Interface Write Data Ports
    input  wire [AXI_DATA_WIDTH-1:0]          axi_wdata       , 
    input  wire [AXI_DATA_WIDTH/8-1:0]        axi_wstrb       , 
    input  wire                               axi_wlast       , 
    input  wire                               axi_wvalid      , 
    output wire                               axi_wready      , 
    // Slave Interface Write Response Ports
    output wire [AXI_ID_WIDTH-1:0]            axi_bid         , 
    output wire [1:0]                         axi_bresp       , 
    output wire                               axi_bvalid      , 
    input  wire                               axi_bready      , 
    // Slave Interface Read Address Ports
    input  wire [AXI_ID_WIDTH-1:0]            axi_arid        , 
    input  wire [AXI_ADDR_WIDTH-1:0]          axi_araddr      , 
    input  wire [7:0]                         axi_arlen       , 
    input  wire [2:0]                         axi_arsize      , 
    input  wire [1:0]                         axi_arburst     , 
    input  wire [0:0]                         axi_arlock      , 
    input  wire [3:0]                         axi_arcache     , 
    input  wire [2:0]                         axi_arprot      , 
    input  wire [3:0]                         axi_arqos       , 
    input  wire                               axi_arvalid     , 
    output wire                               axi_arready     , 
    // Slave Interface Read Data Ports
    output wire [AXI_ID_WIDTH-1:0]            axi_rid         , 
    output wire [AXI_DATA_WIDTH-1:0]          axi_rdata       , 
    output wire [1:0]                         axi_rresp       , 
    output wire                               axi_rlast       , 
    output wire                               axi_rvalid      , 
    input  wire                               axi_rready      , 
  
    // MC Master Interface
    //CMD PORT
    output wire                               mc_en         , 
    output wire [2:0]                         mc_cmd        , 
    output wire                               mc_sz         , 
    output wire [MC_ADDR_WIDTH-1:0]           mc_addr       ,    
    output wire                               mc_hi_pri     , 
    output wire                               mc_autoprecharge, 
    input  wire                               mc_rdy        ,
                                                   
    //DATA PORT
    output wire                               mc_wdf_wren   , 
    output wire [MC_DATA_WIDTH/8-1:0]         mc_wdf_mask   , 
    output wire [MC_DATA_WIDTH-1:0]           mc_wdf_data   ,
    output wire                               mc_wdf_end    ,                      
    input  wire                               mc_wdf_rdy    , 
                                              
    input  wire                               mc_rd_valid   , 
    input  wire [MC_DATA_WIDTH-1:0]           mc_rd_data    ,
    input  wire                               mc_rd_end     ,
    input  wire [2*4-1:0]                     mc_ecc_multiple_err
);
`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "Anlogic"
`pragma protect encrypt_agent_info = "Anlogic Encryption Tool anlogic_2019"
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-009"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
uR8jqMkR0Y8UEltcouYCXibc3RCZSX8L+lNNK7PwjJREaedo5GQ8UJo/qzG/xtf8
jDaftQQS3+g/WTdQCjg0Kk68/U21fytempBC2pP260ySsPtJn/9xK8H1oKEyHEHN
pVoeiQU1ZBEb+VqucK/n/STWKii4lt4xww/NDW0XkkY=
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
E4lCgPens4kYHwVO3nFzNu5dD0/MFasXBIrsMKp/OeStFXp9PJyPIuQLnCIS28Jd
N+4FIgYNVG32Simg8cwqXCz99eulpKCQwAlSblgjfoD321yJehigBEjQcDUD7yib
j0MkrUOLbumzSVHdSN65knnz+f9YGuw7IbVBK7NGw6k=
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
Jx4LAcUh41DLwgPWeScQWmcPG7YGbEWa/8fNEj7CvMukOqTjeVoBdPx7sF7VPHSS
KlHt1gnzO64ZfOeCS0uGTXcCxOKfjcWjW8tNmLCKCDWIhdXsatg4o/5z1Yzn4d/y
ZpIMO0vvZmk6BCwBTBF2SqEEWEQqAzNNE2JnfrEwNFyWfFen6Q/p8Jsmz2zla09U
Ve/qyo/HPd0EUscWbsRzoUv9PUSsGI+zGV+Rd+pSx2NM9wGqbbfrnpDpLEUFfj17
Ol8brSvELV1wdflywyn00aUKnwc8+S2dd0+HbEFQ7eM/T1/xGKBN1+DyLg4ErZkR
ghkSPuA1CzOPDZ5ca2/iMw==
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
TkphWO/BJhMUH/x5LuCDMAZ7bsT6Hx/aKXQidkpQdLJh0iIy1Gre1u9LB2NaBPJE
JMBLtlekrt6K0YbIA64GYsqlY1xm/sYBYBldBJROZN75Lr8AH2PruO8kTutx3iIj
SuzLAevQfpbSeW0Wo1uhQILidY/INb7OvZPi/NEkU7M=
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
T9uiXGTfMNy2Cl72IQfG5IxxvAQuDQWHYRej7ZTBGU6jYFw4Hb505AeTqlQxNy0p
TMBw2ptpjyIHffC/JdA9/hv7VjFP4YT8wgR3gDBeukRqfsEXH3Fey8NWexiCvTA3
tL1txkrR6KJxPIchsi7+VkNOgz60hiaWIyhBbTNLqCM=
`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 107008)
`pragma protect data_block
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
iuI+PaJluB/g7bU1m83PvZZkvgsblYwCnMtPIomIyde2PV/XWAdNhodhXqRF22+t
GvQEKsJcE0ESRmn5jFMd2RGcLVh92HKdn/u0iN5MNYc8u3/00jjiu824VJlH2QSy
iGwW/oBqfw3MU4DQV0wYqnL1VMQgXLX+dmt+OUzF31Tr1//3PUh453VVXCL40o0o
jg8jTfFI9aKQclVjRC+VWiQuvVjfqLaPbDWt23dZPqwGNKxvhcL0uviogTXveTkm
3CPvlxHUClp+3nCOv1cIp4wP1GjQfF3uUTIoon7LuZdK6T9WfaokjM2QsWOQ9GPX
eUIvXxgIm+9WMa0urf2TXtVHTA0e2rS65bpVkVov7TfhKdbv0z5BpQM9YRx4BVpg
PLOe9MJIy6dZdJ8JD0yyIgdxRysxRvYp2ie+pRy2YN17P7/VPgI8gIF7+t4xyL9v
Qh0i4mGm7ipCSsK6kCGidD1tAwKZQxRKYWn6deZlPLQOYfnBuAiv7Zb/otiOtYXj
viaCS6gl5HjRrW1IFTRU32onx7IG1c8zj/cejIuRZNCDiafMZKwcK/D8PrnSP4Q9
Gqk7LJx+hzhk9lgwP7wRprNSkpxAR2wX6QE4Kr6o36aQJo1lwzS8I3sVCm35EeSZ
e9E206BdFI/7BQSidPkXn793Xz2nIsnxmsuuCMDTmvRr+0HYoo2OsecV7KWSITiE
KeeKuOI9ESYw+asxeLw0vTvP0m6fYaKJwZFFhoNqK1C3WkLN4YkxeLaY+QDMzGwH
N5irEg/WS0KlA4yrBPZJ5iPAhHl9YeMvEmN99lhDpmwU94n99KDPboSFXupkV0tW
fcjYtcYHMAfI9vVVENhhC1IYXb8ROFpwLM0s8CFNUnDP05GNeuTldmeCcr53BHWb
zkUNvdQRi2IHazPrP5uGpNzKHjAt8Nr6dTuCRm8mIu02HxRNsjeEd4N+bpUo9SZC
yERSNr2vdU3wF1bTGA3QDHATBjY7WABzEDPN+eVMvzdEPhN4q0vlzP177bhMA8X8
cU4m9u3I30aexwv6rmNjTauA4FKc8MQJanJV1uqpApJq7tv1Bw/T6SXPWD89mNIX
HhKFHfkNP5loddcnq/Dxw34BDluGUntOs8EdTWUQdZoL+HrmYBPqBqrnNbhN7u3I
guBR1T5JCDUr36rOhXFKkJIAD74ZU0gftJ5MEyNmcM4uPlPMctbewgyzXuOSI1XB
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
3QwlP8BbyVrxfNIfDgoR0g==
`pragma protect end_protected










//***********************************************************/
//               _______________
//            //\ _____________
//           // \\ ___________
//          //   \\ _________
//         //     \\ _______
//        //       \\ _____
//       //         \\ ___
//      //_ _ _ _    \\ _
//      -----------
//
//Copyright(c)2011-2022 Anlogic Inc,All Right Reserved.
//Vender           : Anlogic
//Auther           : unkown
//Filename         : alc_dfi_retiming.v
//Description      : alc mc dfi signal generater
//Revision History : 2022-07-30
//Revison          : 1.0
//Emaile           : u@anlogic.com.cn
//***********************************************************/
`timescale 1ps/1ps
//`define Deeper_Read_buf
`ifndef DFI_5_0
module alc_dfi_retiming #(
    parameter DRAM_TYPE            = "DDR3"      ,
    parameter DQS_WIDTH            = 2           ,
    parameter ECC                  = "OFF"       ,
    parameter DQ_WIDTH             = DQS_WIDTH*8 ,
    parameter DM_WIDTH             = DQS_WIDTH   ,
    parameter DBAW                 = 5           ,
    parameter ADDR_WIDTH           = 14          ,
    parameter ROW_WIDTH            = 14          ,
    parameter BANK_WIDTH           = 3           ,
    parameter BG_WIDTH             = 0           ,
    parameter CKE_WIDTH            = 1           ,
    parameter CS_WIDTH             = 1           ,
    parameter ODT_WIDTH            = 1           ,
    parameter CWL                  = 11          ,
    parameter CL                   = 11          ,
    parameter tWPRE                = 1            

)(
    input                                       clk                 ,
    input                                       rst                 ,
// from MC
    input                                       phy2mc_cal_done     ,
    input                                       phy2mc_per_rd_done  ,
    input                                       phy2mc_rmw_rd_done  ,

    input                                       mc2phy_gt_data_ready,
    input       [                     7 : 0]    mc2phy_ck_t         ,
    input       [                     7 : 0]    mc2phy_ck_c         ,
//  input       [                     7 : 0]    mc2phy_c            ,
    input       [                     7 : 0]    mc2phy_act_n        ,
    input       [        ADDR_WIDTH*8-1 : 0]    mc2phy_adr          ,
    input       [        BANK_WIDTH*8-1 : 0]    mc2phy_ba           ,
    input       [          BG_WIDTH*8-1 : 0]    mc2phy_bg           ,
    input       [         CKE_WIDTH*8-1 : 0]    mc2phy_cke          ,
    input       [          CS_WIDTH*8-1 : 0]    mc2phy_cs_n         ,
    input       [         ODT_WIDTH*8-1 : 0]    mc2phy_odt          ,
    input       [                     7 : 0]    mc2phy_ras_n        ,
    input       [                     7 : 0]    mc2phy_cas_n        ,
    input       [                     7 : 0]    mc2phy_we_n         ,
    input                                       mc2phy_rd_cas       ,
    input                                       mc2phy_wr_cas       ,
    input       [                     1 : 0]    mc2phy_cas_slot     ,
    input                                       mc2phy_cas_slot2    ,
    input       [          DQ_WIDTH*8-1 : 0]    mc2phy_wr_data      ,
    input       [          DM_WIDTH*8-1 : 0]    mc2phy_wr_data_mask ,
    input                                       mc2phy_periodic_read_win,
    input                                       mc2phy_winRmw       ,
    input       [                DBAW-1 : 0]    mc2phy_winBuf       ,
    input       [                     1 : 0]    mc2phy_winRank      ,
// to MC
`ifdef DFI2MC_RD_REG
    output  reg                                 phy2mc_rd_data_end  ,
    output  reg [                DBAW-1 : 0]    phy2mc_rd_data_addr ,
    output  reg [          DQ_WIDTH*8-1 : 0]    phy2mc_rd_data      ,
    output  reg                                 phy2mc_rd_data_en   ,
`else
    output                                      phy2mc_rd_data_end  ,
    output      [                DBAW-1 : 0]    phy2mc_rd_data_addr ,
    output      [          DQ_WIDTH*8-1 : 0]    phy2mc_rd_data      ,
    output                                      phy2mc_rd_data_en   ,
`endif

    output                                      phy2mc_wr_data_en   ,
    output      [                DBAW-1 : 0]    phy2mc_wr_data_addr ,
// to PHY
    output      [                     3 : 0]    dfi_reset_n         ,
    output  reg [      CKE_WIDTH *4 - 1 : 0]    dfi_cke_p           ,
    output  reg [      CS_WIDTH  *4 - 1 : 0]    dfi_cs_n_p          ,
    output  reg [      ODT_WIDTH *4 - 1 : 0]    dfi_odt_p           ,
    output  reg [                     3 : 0]    dfi_act_n_p         ,
    output  reg [                     3 : 0]    dfi_ras_n_p         ,
    output  reg [                     3 : 0]    dfi_cas_n_p         ,
    output  reg [                     3 : 0]    dfi_we_n_p          ,
    output  reg [        BANK_WIDTH*4 - 1 : 0]  dfi_bank_p          ,
    output  reg [        BG_WIDTH*4 - 1 : 0]    dfi_bg_p            ,
    output  reg [      ADDR_WIDTH*4 - 1 : 0]    dfi_address_p       ,
    output  reg [       DQS_WIDTH*4 - 1 : 0]    dfi_wrdata_en_p     ,
    output  reg [        DQ_WIDTH*8 - 1 : 0]    dfi_wrdata_p        ,
    output  reg [        DM_WIDTH*8 - 1 : 0]    dfi_wrdata_mask_p   ,
    output  reg [       DQS_WIDTH*4 - 1 : 0]    dfi_rddata_en_p     ,
    input       [       DQS_WIDTH*4 - 1 : 0]    dfi_rddata_valid_w  ,
    input       [        DQ_WIDTH*8 - 1 : 0]    dfi_rddata_w        ,
    input       [        DM_WIDTH*8 - 1 : 0]    dfi_rddata_dbi_w    ,
    output  reg                                 periodic_read_done   
);


//***************************************************************************
// Internal Singal Definition
//***************************************************************************
reg   [      CKE_WIDTH *4 - 1 : 0]    dfi_cke_r           ;
reg   [      CS_WIDTH  *4 - 1 : 0]    dfi_cs_n_r          ;
reg   [      ODT_WIDTH *4 - 1 : 0]    dfi_odt_r           ;
reg   [                     3 : 0]    dfi_act_n_r         ;
reg   [                     3 : 0]    dfi_ras_n_r         ;
reg   [                     3 : 0]    dfi_cas_n_r         ;
reg   [                     3 : 0]    dfi_we_n_r          ;
reg   [        BANK_WIDTH*4 - 1 : 0]    dfi_bank_r          ;
reg   [        BG_WIDTH*4 - 1 : 0]    dfi_bg_r            ;
reg   [      ADDR_WIDTH*4 - 1 : 0]    dfi_address_r       ;

reg   [      CKE_WIDTH *4 - 1 : 0]    dfi_cke_r2          ;
reg   [      CS_WIDTH  *4 - 1 : 0]    dfi_cs_n_r2         ;
reg   [      ODT_WIDTH *4 - 1 : 0]    dfi_odt_r2          ;
reg   [                     3 : 0]    dfi_act_n_r2        ;
reg   [                     3 : 0]    dfi_ras_n_r2        ;
reg   [                     3 : 0]    dfi_cas_n_r2        ;
reg   [                     3 : 0]    dfi_we_n_r2         ;
reg   [        BANK_WIDTH*4 - 1 : 0]    dfi_bank_r2         ;
reg   [        BG_WIDTH*4 - 1 : 0]    dfi_bg_r2           ;
reg   [      ADDR_WIDTH*4 - 1 : 0]    dfi_address_r2      ;
reg   [       DQS_WIDTH*4 - 1 : 0]    dfi_rddata_en_p_r2  ;
reg   [       DQS_WIDTH*4 - 1 : 0]    dfi_wrdata_en_p_r2  ;



reg   [      CKE_WIDTH *4 - 1 : 0]    dfi_cke_r1          ;
reg   [      CS_WIDTH  *4 - 1 : 0]    dfi_cs_n_r1         ;
reg   [      ODT_WIDTH *4 - 1 : 0]    dfi_odt_r1          ;
reg   [                     3 : 0]    dfi_act_n_r1        ;
reg   [                     3 : 0]    dfi_ras_n_r1        ;
reg   [                     3 : 0]    dfi_cas_n_r1        ;
reg   [                     3 : 0]    dfi_we_n_r1         ;
reg   [        BANK_WIDTH*4 - 1 : 0]    dfi_bank_r1         ;
reg   [        BG_WIDTH*4 - 1 : 0]    dfi_bg_r1           ;
reg   [      ADDR_WIDTH*4 - 1 : 0]    dfi_address_r1      ;

reg   [       DQS_WIDTH*4 - 1 : 0]    dfi_wrdata_en_r     ;
reg   [        DQ_WIDTH*8 - 1 : 0]    dfi_wrdata_r        ;
reg   [        DM_WIDTH*8 - 1 : 0]    dfi_wrdata_mask_r   ;
reg   [       DQS_WIDTH*4 - 1 : 0]    dfi_rddata_en_r     ;
reg   [       DQS_WIDTH*4 - 1 : 0]    dfi_rddata_valid_r  ;
reg   [        DQ_WIDTH*8 - 1 : 0]    dfi_rddata_r        ;
reg   [        DM_WIDTH*8 - 1 : 0]    dfi_rddata_dbi_r    ;

reg   [                    31 : 0]    wr_en_buffer        ;
reg   [                    31 : 0]    rd_en_buffer        ;


reg   [       DQ_WIDTH*8+64-1 : 0]    wr_data_reorder    ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b0  ; // 8 dq * 8 phase * 2 buffer
reg   [               8*8*2-1 : 0]    wr_data_buffer_b1  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b2  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b3  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b4  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b5  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b6  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b7  ;
reg   [               8*8*2-1 : 0]    wr_data_buffer_b8  ;

reg   [        DM_WIDTH*8+8-1 : 0]    wr_mask_reorder    ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b0  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b1  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b2  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b3  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b4  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b5  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b6  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b7  ;
reg   [               1*8*2-1 : 0]    wr_mask_buffer_b8  ;


//***************************************************************************
// write enable phases generation
//***************************************************************************
localparam wrDataEnLatency = (CWL - 2);

reg               wr_cas_r        ;
reg   [    3 : 0] wr_cs_n_r       ;
wire  [  3-1 : 0] mc2phy_cmd_p0   ;
wire  [  3-1 : 0] mc2phy_cmd_p1   ;
wire  [  3-1 : 0] mc2phy_cmd_p2   ;
wire  [  3-1 : 0] mc2phy_cmd_p3   ;
reg   [8*3-1 : 0] mc2phy_cmd_p0_r ; // buffer depth = 8
reg   [8*3-1 : 0] mc2phy_cmd_p1_r ; // buffer depth = 8
reg   [8*3-1 : 0] mc2phy_cmd_p2_r ; // buffer depth = 8
reg   [8*3-1 : 0] mc2phy_cmd_p3_r ; // buffer depth = 8

wire  [  3-1 : 0] mc2phy_cmd_p0_wrEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p1_wrEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p2_wrEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p3_wrEn   ;

//localparam  DATA_BUF_ADDR_WIDTH            = 5                  ;
//`ifdef Deeper_Read_Buf
//parameter  DBAW                           = DATA_BUF_ADDR_WIDTH + 1; 
//`else  
//parameter DBAW                           = DATA_BUF_ADDR_WIDTH;
//`endif
reg rst_r1;

always @ (posedge clk)
begin
    rst_r1 <= rst;
end 

reg init_cal_done;
reg init_cal_done_d;

always @ (posedge clk)
begin
    init_cal_done_d <= phy2mc_cal_done;
    init_cal_done   <= init_cal_done_d;
end

always @ (posedge clk)
begin
    wr_cs_n_r <=    {mc2phy_cs_n[6], mc2phy_cs_n[4], mc2phy_cs_n[2],  mc2phy_cs_n[0]};
    wr_cas_r  <=    mc2phy_wr_cas  ;
end

assign mc2phy_cmd_p0 = {mc2phy_ras_n[0], mc2phy_cas_n[0], mc2phy_we_n[0]};
assign mc2phy_cmd_p1 = {mc2phy_ras_n[2], mc2phy_cas_n[2], mc2phy_we_n[2]};
assign mc2phy_cmd_p2 = {mc2phy_ras_n[4], mc2phy_cas_n[4], mc2phy_we_n[4]};
assign mc2phy_cmd_p3 = {mc2phy_ras_n[6], mc2phy_cas_n[6], mc2phy_we_n[6]};

always @ (posedge clk)
begin
    mc2phy_cmd_p0_r <=    {mc2phy_cmd_p0_r[7*3-1:0], mc2phy_cmd_p0};
    mc2phy_cmd_p1_r <=    {mc2phy_cmd_p1_r[7*3-1:0], mc2phy_cmd_p1};
    mc2phy_cmd_p2_r <=    {mc2phy_cmd_p2_r[7*3-1:0], mc2phy_cmd_p2};
    mc2phy_cmd_p3_r <=    {mc2phy_cmd_p3_r[7*3-1:0], mc2phy_cmd_p3};
end

assign mc2phy_cmd_p0_wrEn = mc2phy_cmd_p0_r[0*3 +: 3];
assign mc2phy_cmd_p1_wrEn = mc2phy_cmd_p1_r[0*3 +: 3];
assign mc2phy_cmd_p2_wrEn = mc2phy_cmd_p2_r[0*3 +: 3];
assign mc2phy_cmd_p3_wrEn = mc2phy_cmd_p3_r[0*3 +: 3];

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        wr_en_buffer <=    32'h0 ;
    end else if (wr_cas_r) begin
        if (mc2phy_cmd_p0_wrEn == 3'b100)
            wr_en_buffer <=    (wr_en_buffer >> 4) | (8'b0000_1111 << wrDataEnLatency);
        else if (mc2phy_cmd_p1_wrEn == 3'b100)
            wr_en_buffer <=    (wr_en_buffer >> 4) | (8'b0001_1110 << wrDataEnLatency);
        else if (mc2phy_cmd_p2_wrEn == 3'b100)
            wr_en_buffer <=    (wr_en_buffer >> 4) | (8'b0011_1100 << wrDataEnLatency);
        else if (mc2phy_cmd_p3_wrEn == 3'b100)
            wr_en_buffer <=    (wr_en_buffer >> 4) | (8'b0111_1000 << wrDataEnLatency);
        else
            wr_en_buffer <=    (wr_en_buffer >> 4);
            
    end else begin
        wr_en_buffer <=    (wr_en_buffer >> 4);
    end
end

//***************************************************************************
// write data phases generation
//***************************************************************************
integer byteNum  ;
integer phaseNum ;
localparam wrDataLatencyN = CWL/4 ;
localparam wrDataLatencyM = CWL%4 ; // 0, 1, 2, 3

wire  [ DBAW  -1 : 0] wr_data_addr   ;
reg   [    1*8-1 : 0] wr_data_en_r   ; // buffer depth = 8
reg   [ DBAW*8-1 : 0] wr_data_addr_r ; // buffer depth = 8
wire  [   72*8-1 : 0] wr_data_r ; 
wire  [    9*8-1 : 0] wr_mask_r ; 

reg                                 wr_data_en_r1  ;
reg   [                    3-1 : 0] mc2phy_cmd_p0_wrData ;
reg   [                    3-1 : 0] mc2phy_cmd_p1_wrData ;
reg   [                    3-1 : 0] mc2phy_cmd_p2_wrData ;
reg   [                    3-1 : 0] mc2phy_cmd_p3_wrData ;

assign wr_data_addr = mc2phy_wr_cas ? mc2phy_winBuf : 'h0 ;

always @ (posedge clk)
begin
    wr_data_en_r[7:0] <=    {wr_data_en_r[6:0], mc2phy_wr_cas};
    wr_data_addr_r    <=    {wr_data_addr_r[7* DBAW-1:0], wr_data_addr};
end

assign  phy2mc_wr_data_en   = wr_data_en_r  [wrDataLatencyN];
assign  phy2mc_wr_data_addr = wr_data_addr_r[wrDataLatencyN* DBAW +:  DBAW];

generate 
if(ECC == "OFF")

always @ (posedge clk)
begin
    wr_data_en_r1        <=    wr_data_en_r   [wrDataLatencyN];
    mc2phy_cmd_p0_wrData <=    mc2phy_cmd_p0_r[wrDataLatencyN*3 +: 3];
    mc2phy_cmd_p1_wrData <=    mc2phy_cmd_p1_r[wrDataLatencyN*3 +: 3];
    mc2phy_cmd_p2_wrData <=    mc2phy_cmd_p2_r[wrDataLatencyN*3 +: 3];
    mc2phy_cmd_p3_wrData <=    mc2phy_cmd_p3_r[wrDataLatencyN*3 +: 3];
end
else if(ECC == "ON")

always @ (posedge clk)
begin
    wr_data_en_r1        <=    wr_data_en_r   [wrDataLatencyN+1];
    mc2phy_cmd_p0_wrData <=    mc2phy_cmd_p0_r[(wrDataLatencyN+1)*3 +: 3];
    mc2phy_cmd_p1_wrData <=    mc2phy_cmd_p1_r[(wrDataLatencyN+1)*3 +: 3];
    mc2phy_cmd_p2_wrData <=    mc2phy_cmd_p2_r[(wrDataLatencyN+1)*3 +: 3];
    mc2phy_cmd_p3_wrData <=    mc2phy_cmd_p3_r[(wrDataLatencyN+1)*3 +: 3];
end
endgenerate

assign  wr_data_r = mc2phy_wr_data      ;
assign  wr_mask_r = mc2phy_wr_data_mask ;

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        wr_data_buffer_b0 <=   'h0 ;
        wr_data_buffer_b1 <=   'h0 ;
        wr_data_buffer_b2 <=   'h0 ;
        wr_data_buffer_b3 <=   'h0 ;
        wr_data_buffer_b4 <=   'h0 ;
        wr_data_buffer_b5 <=   'h0 ;
        wr_data_buffer_b6 <=   'h0 ;
        wr_data_buffer_b7 <=   'h0 ;
        wr_data_buffer_b8 <=   'h0 ;
        wr_mask_buffer_b0 <=   'h0 ;
        wr_mask_buffer_b1 <=   'h0 ;
        wr_mask_buffer_b2 <=   'h0 ;
        wr_mask_buffer_b3 <=   'h0 ;
        wr_mask_buffer_b4 <=   'h0 ;
        wr_mask_buffer_b5 <=   'h0 ;
        wr_mask_buffer_b6 <=   'h0 ;
        wr_mask_buffer_b7 <=   'h0 ;
        wr_mask_buffer_b8 <=   'h0 ;
    end else if (wr_data_en_r1) begin
        if (mc2phy_cmd_p0_wrData == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
        end else if (mc2phy_cmd_p1_wrData == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << (wrDataLatencyM * 2 * 8 + 16) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << (wrDataLatencyM * 2     + 2 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
        end else if (mc2phy_cmd_p2_wrData == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << (wrDataLatencyM * 2 * 8 + 32) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << (wrDataLatencyM * 2     + 4 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
        end else if (mc2phy_cmd_p3_wrData == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << (wrDataLatencyM * 2 * 8 + 48) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << (wrDataLatencyM * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << (wrDataLatencyM * 2     + 6 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << (wrDataLatencyM * 2     + 0 ) );
        end else begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
        end
    end else begin
        wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
        wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
        wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
        wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
        wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
        wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
        wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
        wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
        wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
        wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
        wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
        wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
        wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
        wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
        wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
        wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
        wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
        wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
    end
end


always @ (*) begin
    for (phaseNum = 0; phaseNum <= 7; phaseNum = phaseNum + 1) begin
        wr_data_reorder[(phaseNum*DQ_WIDTH + 0*8) +: 8] =  wr_data_buffer_b0[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 1*8) +: 8] =  wr_data_buffer_b1[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 2*8) +: 8] =  wr_data_buffer_b2[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 3*8) +: 8] =  wr_data_buffer_b3[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 4*8) +: 8] =  wr_data_buffer_b4[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 5*8) +: 8] =  wr_data_buffer_b5[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 6*8) +: 8] =  wr_data_buffer_b6[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 7*8) +: 8] =  wr_data_buffer_b7[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 8*8) +: 8] =  wr_data_buffer_b8[phaseNum*8 +: 8];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 0)]        =  wr_mask_buffer_b0[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 1)]        =  wr_mask_buffer_b1[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 2)]        =  wr_mask_buffer_b2[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 3)]        =  wr_mask_buffer_b3[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 4)]        =  wr_mask_buffer_b4[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 5)]        =  wr_mask_buffer_b5[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 6)]        =  wr_mask_buffer_b6[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 7)]        =  wr_mask_buffer_b7[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 8)]        =  wr_mask_buffer_b8[phaseNum];
    end
end

//***************************************************************************
// read enable phases generation
//***************************************************************************
integer rdDataEnLatency = (CL - 4);

reg               rd_cas_r             ;

wire  [  3-1 : 0] mc2phy_cmd_p0_rdEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p1_rdEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p2_rdEn   ;
wire  [  3-1 : 0] mc2phy_cmd_p3_rdEn   ;

assign mc2phy_cmd_p0_rdEn = mc2phy_cmd_p0_r[0*3 +: 3];
assign mc2phy_cmd_p1_rdEn = mc2phy_cmd_p1_r[0*3 +: 3];
assign mc2phy_cmd_p2_rdEn = mc2phy_cmd_p2_r[0*3 +: 3];
assign mc2phy_cmd_p3_rdEn = mc2phy_cmd_p3_r[0*3 +: 3];

always @ (posedge clk)
begin
    rd_cas_r <= mc2phy_rd_cas ;
end

always @ ( posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_en_buffer <=    32'h0 ;
    end else if (rd_cas_r) begin
        if (mc2phy_cmd_p0_rdEn == 3'b101)
            rd_en_buffer <=    (rd_en_buffer >> 4) | (8'b0000_1111 << rdDataEnLatency);
        else if (mc2phy_cmd_p1_rdEn == 3'b101)
            rd_en_buffer <=    (rd_en_buffer >> 4) | (8'b0001_1110 << rdDataEnLatency);
        else if (mc2phy_cmd_p2_rdEn == 3'b101)
            rd_en_buffer <=    (rd_en_buffer >> 4) | (8'b0011_1100 << rdDataEnLatency);
        else if (mc2phy_cmd_p3_rdEn == 3'b101)
            rd_en_buffer <=    (rd_en_buffer >> 4) | (8'b0111_1000 << rdDataEnLatency);
        else
            rd_en_buffer <=    (rd_en_buffer >> 4);

    end else begin
        rd_en_buffer <=    (rd_en_buffer >> 4);
    end
end

//***************************************************************************
// read data to mc
//***************************************************************************
integer               bufIndex ;

reg  [ DBAW-1:0] mc2phy_rd_data_addr_r ;
reg                            mc2phy_rd_dummy       ;

reg                   rd_data_vld_r ;
reg  [DQ_WIDTH*8-1:0] rd_data_r     ;
reg  [DQ_WIDTH*8-1:0] rd_data_r1    ;

//reg  [ DBAW-1:0] rd_addr_buf[31:0] ;
reg  [   DBAW:0] rd_addr_buf[63:0] ; //synthesis ram_style = dram // add periodic_read_win to buffer
reg  [                    5:0] rd_addr_buf_raddr ;
reg  [                    5:0] rd_addr_buf_waddr ;

reg                            rd_data_en   ;
reg  [ DBAW-1:0] rd_data_addr ;


always @ (posedge clk)
begin
    mc2phy_rd_data_addr_r <=    mc2phy_rd_cas ? mc2phy_winBuf : 'b0;
    mc2phy_rd_dummy       <=    mc2phy_periodic_read_win;
end

always @ (posedge clk)
begin
   for (byteNum = 0; byteNum <= DQS_WIDTH-1; byteNum = byteNum + 1) begin
       for (phaseNum = 0; phaseNum <= 7; phaseNum = phaseNum + 1) begin
           rd_data_r[(byteNum*64 + phaseNum*8) +: 8] <=    dfi_rddata_w[(phaseNum*DQ_WIDTH + byteNum*8) +: 8] ;
       end
   end
   rd_data_r1    <=     rd_data_r    ;
   rd_data_vld_r <=    |dfi_rddata_valid_w ;
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_addr_buf_raddr <=    'h0;
        rd_addr_buf_waddr <=    'h0;
    end else begin
        if (rd_cas_r)
            rd_addr_buf_waddr <=    rd_addr_buf_waddr + 1'b1;
        if (rd_data_vld_r)
            rd_addr_buf_raddr <=    rd_addr_buf_raddr + 1'b1;
    end 
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        for (bufIndex = 0; bufIndex <= 31; bufIndex = bufIndex + 1) begin
            rd_addr_buf[bufIndex] <=    {( DBAW+1){1'b0}};
        end
    end else if (rd_cas_r) begin
        rd_addr_buf[rd_addr_buf_waddr] <=    {mc2phy_rd_dummy, mc2phy_rd_data_addr_r};
    end
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_data_en   <=    1'b0;
        rd_data_addr <=    { DBAW{1'b0}};
        periodic_read_done   <=    1'b0 ;
    end else if (rd_data_vld_r) begin
        rd_data_en   <=    1'b1 ;
        rd_data_addr <=    rd_addr_buf[rd_addr_buf_raddr][ DBAW-1:0];
        periodic_read_done   <=    rd_addr_buf[rd_addr_buf_raddr][ DBAW];
    end else begin
        rd_data_en   <=    1'b0 ;
        rd_data_addr <=    { DBAW{1'b0}};
        periodic_read_done   <=    1'b0 ;
    end
end

`ifdef DFI2MC_RD_REG
always @ (posedge clk) begin
    phy2mc_rd_data_end  <=    1'b1 ; 
    phy2mc_rd_data_en   <=    periodic_read_done ? 1'b0 : rd_data_en ; 
    phy2mc_rd_data_addr <=    rd_data_addr   ; 
    phy2mc_rd_data      <=    rd_data_r1     ; 
end
`else
assign    phy2mc_rd_data_end  = 1'b1 ; 
assign    phy2mc_rd_data_en   = periodic_read_done ? 1'b0 : rd_data_en ; 
assign    phy2mc_rd_data_addr = rd_data_addr   ; 
assign    phy2mc_rd_data      = rd_data_r1     ; 
`endif

//***************************************************************************
// DFI Signals generation
//***************************************************************************
assign  dfi_reset_n  = 4'b1111;

integer n, p;
always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        dfi_cke_r     <=    'b0;
        dfi_cs_n_r    <=    'b0;
        dfi_act_n_r   <=    'b0;
        dfi_ras_n_r   <=    'b0;
        dfi_cas_n_r   <=    'b0;
        dfi_we_n_r    <=    'b0;
        dfi_bank_r    <=    'b0;
        dfi_bg_r      <=    'b0;
        dfi_address_r <=    'b0;
    end else begin
        dfi_cke_r     <=    { {(CKE_WIDTH){mc2phy_cke[6]}}, {(CKE_WIDTH){mc2phy_cke[4]}}, {(CKE_WIDTH){mc2phy_cke[2]}}, {(CKE_WIDTH){mc2phy_cke[0]}} };
        dfi_odt_r     <=    { {(ODT_WIDTH){mc2phy_odt[6]}}, {(ODT_WIDTH){mc2phy_odt[4]}}, {(ODT_WIDTH){mc2phy_odt[2]}}, {(ODT_WIDTH){mc2phy_odt[0]}} };
        dfi_cs_n_r    <=    {mc2phy_cs_n [6], mc2phy_cs_n [4], mc2phy_cs_n [2], mc2phy_cs_n [0]};
        dfi_act_n_r   <=    {mc2phy_act_n[6], mc2phy_act_n[4], mc2phy_act_n[2], mc2phy_act_n[0]};
        dfi_ras_n_r   <=    {mc2phy_ras_n[6], mc2phy_ras_n[4], mc2phy_ras_n[2], mc2phy_ras_n[0]};
        dfi_cas_n_r   <=    {mc2phy_cas_n[6], mc2phy_cas_n[4], mc2phy_cas_n[2], mc2phy_cas_n[0]};
        dfi_we_n_r    <=    {mc2phy_we_n [6], mc2phy_we_n [4], mc2phy_we_n [2], mc2phy_we_n [0]};

        for (n = 0; n <= BANK_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_bank_r[BANK_WIDTH*p + n] <=    mc2phy_ba[8*n + 2*p];
            end
        end

        for (n = 0; n <= BG_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_bg_r[BG_WIDTH*p + n] <=   mc2phy_bg[8*n + 2*p];
            end
        end

        for (n = 0; n <= ADDR_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_address_r[ADDR_WIDTH*p + n] <=    mc2phy_adr[8*n + 2*p];
            end
        end

    end
end

always @ (posedge clk)
begin
    dfi_cke_r1      <=    dfi_cke_r     ;
    dfi_odt_r1      <=    dfi_odt_r     ;
    dfi_act_n_r1    <=    dfi_act_n_r   ;
    dfi_cs_n_r1     <=    dfi_cs_n_r    ;
    dfi_ras_n_r1    <=    dfi_ras_n_r   ;
    dfi_cas_n_r1    <=    dfi_cas_n_r   ;
    dfi_we_n_r1     <=    dfi_we_n_r    ;
    dfi_bank_r1     <=    dfi_bank_r    ;
    dfi_bg_r1       <=    dfi_bg_r      ;
    dfi_address_r1  <=    dfi_address_r ;
end

generate 
if(ECC == "ON")
always @ (posedge clk)
begin
    dfi_cke_r2      <=    dfi_cke_r1     ;
    dfi_odt_r2      <=    dfi_odt_r1     ;
    dfi_act_n_r2    <=    dfi_act_n_r1   ;
    dfi_cs_n_r2     <=    dfi_cs_n_r1    ;
    dfi_ras_n_r2    <=    dfi_ras_n_r1   ;
    dfi_cas_n_r2    <=    dfi_cas_n_r1   ;
    dfi_we_n_r2     <=    dfi_we_n_r1    ;
    dfi_bank_r2     <=    dfi_bank_r1    ;
    dfi_bg_r2       <=    dfi_bg_r1      ;
    dfi_address_r2  <=    dfi_address_r1 ;

    dfi_rddata_en_p_r2 <=    {{(DQS_WIDTH){rd_en_buffer[3]}}, {(DQS_WIDTH){rd_en_buffer[2]}}, {(DQS_WIDTH){rd_en_buffer[1]}}, {(DQS_WIDTH){rd_en_buffer[0]}}};
    dfi_wrdata_en_p_r2 <=    {{(DQS_WIDTH){wr_en_buffer[3]}}, {(DQS_WIDTH){wr_en_buffer[2]}}, {(DQS_WIDTH){wr_en_buffer[1]}}, {(DQS_WIDTH){wr_en_buffer[0]}}};
end

endgenerate



generate 
 if(ECC == "ON")

always @ (posedge clk)
begin
    dfi_cke_p       <=    dfi_cke_r2    ;
    dfi_odt_p       <=    dfi_odt_r2    ;
    dfi_act_n_p     <=    dfi_act_n_r2  ;
    dfi_cs_n_p      <=    dfi_cs_n_r2   ;
    dfi_ras_n_p     <=    dfi_ras_n_r2  ;
    dfi_cas_n_p     <=    dfi_cas_n_r2  ;
    dfi_we_n_p      <=    dfi_we_n_r2   ;
    dfi_bank_p      <=    dfi_bank_r2   ;
    dfi_address_p   <=    dfi_address_r2;
    dfi_bg_p        <=    dfi_bg_r2     ;
    dfi_rddata_en_p <=    dfi_rddata_en_p_r2;
    dfi_wrdata_en_p <=    dfi_wrdata_en_p_r2;
end


else if(ECC == "OFF")
always @ (posedge clk)
begin
    dfi_cke_p       <=    dfi_cke_r1    ;
    dfi_odt_p       <=    dfi_odt_r1    ;
    dfi_act_n_p     <=    dfi_act_n_r1  ;
    dfi_cs_n_p      <=    dfi_cs_n_r1   ;
    dfi_ras_n_p     <=    dfi_ras_n_r1  ;
    dfi_cas_n_p     <=    dfi_cas_n_r1  ;
    dfi_we_n_p      <=    dfi_we_n_r1   ;
    dfi_bank_p      <=    dfi_bank_r1   ;
    dfi_address_p   <=    dfi_address_r1;
    dfi_bg_p        <=    dfi_bg_r1     ;
    dfi_rddata_en_p <=    {{(DQS_WIDTH){rd_en_buffer[3]}}, {(DQS_WIDTH){rd_en_buffer[2]}}, {(DQS_WIDTH){rd_en_buffer[1]}}, {(DQS_WIDTH){rd_en_buffer[0]}}};
    dfi_wrdata_en_p <=    {{(DQS_WIDTH){wr_en_buffer[3]}}, {(DQS_WIDTH){wr_en_buffer[2]}}, {(DQS_WIDTH){wr_en_buffer[1]}}, {(DQS_WIDTH){wr_en_buffer[0]}}};
end
endgenerate



generate 
 if(DRAM_TYPE == "DDR3")
  always @ (*) begin
    dfi_wrdata_p       <=  wr_data_reorder ;
    dfi_wrdata_mask_p  <=  wr_mask_reorder ;
  end
 else 
  always @ (*) begin
    dfi_wrdata_p       <=  wr_data_reorder ;
    dfi_wrdata_mask_p  <= ~wr_mask_reorder ;
  end
endgenerate

endmodule

`else
module alc_dfi_retiming #(
    parameter DRAM_TYPE            = "DDR4"      ,
    parameter DQS_WIDTH            = 5  ,
    parameter DQ_WIDTH             = DQS_WIDTH*8 ,
    parameter DM_WIDTH             = DQS_WIDTH   ,
    parameter ECC                  = "OFF",
    parameter DBAW                 = 5  ,
    parameter ADDR_WIDTH           = 18 ,
    parameter ROW_WIDTH            = 18 , 
    parameter BANK_WIDTH             = 2  ,
    parameter BG_WIDTH             = 1  ,
    parameter CKE_WIDTH            = 2  ,
    parameter CS_WIDTH             = 2  ,
    parameter ODT_WIDTH            = 2  ,
    parameter CWL                  = 12 ,
    parameter CL                   = 18 ,
    parameter tWPRE                = 1   

)(
    input                                      clk                   ,
    input                                      rst                   ,
    input                                      phy2mc_cal_done       ,
   
    input                                      phy2mc_per_rd_done    ,
    input                                      phy2mc_rmw_rd_done    ,
    input                                      mc2phy_gt_data_ready  ,
    input       [                    7 : 0]    mc2phy_ck_t           ,
    input       [                    7 : 0]    mc2phy_ck_c           ,
    input       [                    7 : 0]    mc2phy_act_n          ,
    input       [       ADDR_WIDTH*8-1 : 0]    mc2phy_adr            ,
    input       [         BANK_WIDTH*8-1 : 0]    mc2phy_ba             ,
    input       [         BG_WIDTH*8-1 : 0]    mc2phy_bg             ,
    input       [        CKE_WIDTH*8-1 : 0]    mc2phy_cke            ,
    input       [         CS_WIDTH*8-1 : 0]    mc2phy_cs_n           ,
    input       [        ODT_WIDTH*8-1 : 0]    mc2phy_odt            ,
    input       [                    7 : 0]    mc2phy_ras_n          ,
    input       [                    7 : 0]    mc2phy_cas_n          ,
    input       [                    7 : 0]    mc2phy_we_n           ,
    input                                      mc2phy_rd_cas         ,
    input                                      mc2phy_wr_cas         ,
    input       [                    1 : 0]    mc2phy_cas_slot       ,
    input                                      mc2phy_cas_slot2      ,
    input       [         DQ_WIDTH*8-1 : 0]    mc2phy_wr_data        ,
    input       [         DM_WIDTH*8-1 : 0]    mc2phy_wr_data_mask   ,
    input                                      mc2phy_periodic_read_win ,
    input                                      mc2phy_winRmw         ,
    input       [               DBAW-1 : 0]    mc2phy_winBuf         , 
    //to MC
    output                                     phy2mc_rd_data_end    ,
    output      [               DBAW-1 : 0]    phy2mc_rd_data_addr   ,
    output      [         DQ_WIDTH*8-1 : 0]    phy2mc_rd_data        ,
    output                                     phy2mc_rd_data_en     ,
    output                                     phy2mc_wr_data_en     ,
    output      [               DBAW-1 : 0]    phy2mc_wr_data_addr   ,
    //to PHY
    output           [                 3:0]    dfi_reset_n           ,
    output    reg    [   CKE_WIDTH*4-1 : 0]    dfi_cke_p             ,
    output    reg    [    CS_WIDTH*4-1 : 0]    dfi_cs_n_p            ,
    output    reg    [   ODT_WIDTH*4-1 : 0]    dfi_odt_p             ,
    output    reg    [               3 : 0]    dfi_act_n_p           ,
    output    reg    [               3 : 0]    dfi_ras_n_p           ,
    output    reg    [               3 : 0]    dfi_cas_n_p           ,
    output    reg    [               3 : 0]    dfi_we_n_p            ,
    output    reg    [    BG_WIDTH*4-1 : 0]    dfi_bg_p              ,
    output    reg    [    BANK_WIDTH*4-1 : 0]    dfi_bank_p            ,
    output    reg    [  ADDR_WIDTH*4-1 : 0]    dfi_address_p         ,
    output    reg    [   DQS_WIDTH*8-1 : 0]    dfi_wrdata_en_p       ,
    output    reg    [    DQ_WIDTH*8-1 : 0]    dfi_wrdata_p          ,
    output    reg    [    DM_WIDTH*8-1 : 0]    dfi_wrdata_mask_p     ,
    output    reg    [   DQS_WIDTH*8-1 : 0]    dfi_rddata_en_p       ,
    input            [   DQS_WIDTH*8-1 : 0]    dfi_rddata_valid_w    ,
    input            [    DQ_WIDTH*8-1 : 0]    dfi_rddata_w          ,
    input            [    DM_WIDTH*8-1 : 0]    dfi_rddata_dbi_w      ,
    output    reg                              periodic_read_done

);


localparam SHIFT_DEPTH = 8;

//***************************************************************************
// Internal Singal Definition
//***************************************************************************
reg    [   CKE_WIDTH*4-1 : 0]    dfi_cke_r             ;
reg    [    CS_WIDTH*4-1 : 0]    dfi_cs_n_r            ;
reg    [   ODT_WIDTH*4-1 : 0]    dfi_odt_r             ;
reg    [               3 : 0]    dfi_act_n_r           ;
reg    [               3 : 0]    dfi_ras_n_r           ;
reg    [               3 : 0]    dfi_cas_n_r           ;
reg    [               3 : 0]    dfi_we_n_r            ;
reg    [    BG_WIDTH*4-1 : 0]    dfi_bg_r              ;
reg    [    BANK_WIDTH*4-1 : 0]    dfi_bank_r            ;
reg    [  ADDR_WIDTH*4-1 : 0]    dfi_address_r         ;
reg    [   DQS_WIDTH*8-1 : 0]    dfi_wrdata_en_r       ;
reg    [    DQ_WIDTH*8-1 : 0]    dfi_wrdata_r          ;
reg    [    DM_WIDTH*8-1 : 0]    dfi_wrdata_mask_r     ;
reg    [   DQS_WIDTH*8-1 : 0]    dfi_rddata_en_r       ;

reg    [   CKE_WIDTH*4-1 : 0]    dfi_cke_r2            ;
reg    [    CS_WIDTH*4-1 : 0]    dfi_cs_n_r2           ;
reg    [   ODT_WIDTH*4-1 : 0]    dfi_odt_r2            ;
reg    [               3 : 0]    dfi_act_n_r2          ;
reg    [               3 : 0]    dfi_ras_n_r2          ;
reg    [               3 : 0]    dfi_cas_n_r2          ;
reg    [               3 : 0]    dfi_we_n_r2           ;
reg    [    BG_WIDTH*4-1 : 0]    dfi_bg_r2             ;
reg    [    BANK_WIDTH*4-1 : 0]    dfi_bank_r2           ;
reg    [  ADDR_WIDTH*4-1 : 0]    dfi_address_r2        ;
reg    [   DQS_WIDTH*8-1 : 0]    dfi_wrdata_en_r2      ;
reg    [   DQS_WIDTH*8-1 : 0]    dfi_rddata_en_r2      ;

reg   [ 63:0]     wr_en_buffer ;
reg   [ 63:0]     rd_en_buffer ;

reg   [       DQ_WIDTH*8+64-1 : 0]    wr_data_reorder    ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b0  ; // 8 dq * 8 phase * 2 buffer
reg   [               8*16*2-1 : 0]    wr_data_buffer_b1  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b2  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b3  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b4  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b5  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b6  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b7  ;
reg   [               8*16*2-1 : 0]    wr_data_buffer_b8  ;

reg   [        DM_WIDTH*8+8-1 : 0]    wr_mask_reorder    ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b0  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b1  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b2  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b3  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b4  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b5  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b6  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b7  ;
reg   [               1*16*2-1 : 0]    wr_mask_buffer_b8  ;

//***************************************************************************
// write enable phases generation
//***************************************************************************

localparam wrDataEnLatency_temp = CWL - ((CWL-tWPRE)%4 + 4 + 4*(CWL>11)+ tWPRE);
localparam wrDataEnLatency      = wrDataEnLatency_temp*2;


wire  [2:0] mc2phy_cmd_p0 ;
wire  [2:0] mc2phy_cmd_p1 ;
wire  [2:0] mc2phy_cmd_p2 ;
wire  [2:0] mc2phy_cmd_p3 ;
reg   [2:0] mc2phy_cmd_p0_r ;
reg   [2:0] mc2phy_cmd_p1_r ;
reg   [2:0] mc2phy_cmd_p2_r ;
reg   [2:0] mc2phy_cmd_p3_r ;

reg   [2:0] mc2phy_cmd_p0_r_ecc ;
reg   [2:0] mc2phy_cmd_p1_r_ecc ;
reg   [2:0] mc2phy_cmd_p2_r_ecc ;
reg   [2:0] mc2phy_cmd_p3_r_ecc ;

reg rst_r1;

always @ (posedge clk)
begin
    rst_r1 <= rst;
end 
reg init_cal_done;
reg init_cal_done_d;

always @ (posedge clk)
begin
    init_cal_done_d <= phy2mc_cal_done;
    init_cal_done   <= init_cal_done_d;
end

assign mc2phy_cmd_p0 = {mc2phy_ras_n[0], mc2phy_cas_n[0], mc2phy_we_n[0]};
assign mc2phy_cmd_p1 = {mc2phy_ras_n[2], mc2phy_cas_n[2], mc2phy_we_n[2]};
assign mc2phy_cmd_p2 = {mc2phy_ras_n[4], mc2phy_cas_n[4], mc2phy_we_n[4]};
assign mc2phy_cmd_p3 = {mc2phy_ras_n[6], mc2phy_cas_n[6], mc2phy_we_n[6]};

always @ (posedge clk)
begin
    mc2phy_cmd_p0_r <= mc2phy_cmd_p0;
    mc2phy_cmd_p1_r <= mc2phy_cmd_p1;
    mc2phy_cmd_p2_r <= mc2phy_cmd_p2;
    mc2phy_cmd_p3_r <= mc2phy_cmd_p3;
end

always @ (posedge clk)
begin
    mc2phy_cmd_p0_r_ecc <= mc2phy_cmd_p0_r;
    mc2phy_cmd_p1_r_ecc <= mc2phy_cmd_p1_r;
    mc2phy_cmd_p2_r_ecc <= mc2phy_cmd_p2_r;
    mc2phy_cmd_p3_r_ecc <= mc2phy_cmd_p3_r;
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        wr_en_buffer <= 64'h0 ;
    end else if (mc2phy_wr_cas) begin
        if (mc2phy_cmd_p0 == 3'b100)
            wr_en_buffer <= (wr_en_buffer >> 8) | (16'b0000_0000_1111_1111 << wrDataEnLatency);
        else if (mc2phy_cmd_p1 == 3'b100)
            wr_en_buffer <= (wr_en_buffer >> 8) | (16'b0000_0011_1111_1100 << wrDataEnLatency);
        else if (mc2phy_cmd_p2 == 3'b100)
            wr_en_buffer <= (wr_en_buffer >> 8) | (16'b0000_1111_1111_0000 << wrDataEnLatency);
        else if (mc2phy_cmd_p3 == 3'b100)
            wr_en_buffer <= (wr_en_buffer >> 8) | (16'b0011_1111_1100_0000 << wrDataEnLatency);
        else
            wr_en_buffer <= (wr_en_buffer >> 8);
    end else begin
        wr_en_buffer <= (wr_en_buffer >> 8);
    end
end


//***************************************************************************
// write data phases generation
//***************************************************************************
integer byteNum  ;
integer phaseNum ;
localparam wrDataLatency  = wrDataEnLatency_temp + 4; 


reg                wr_cas_r  ;
reg                wr_cas_r_ecc;
reg   [     3 : 0] wr_cs_n_r ;
wire  [72*8-1 : 0] wr_data_r ; 
wire  [ 9*8-1 : 0] wr_mask_r ; 

assign phy2mc_wr_data_en   = mc2phy_wr_cas  ;
assign phy2mc_wr_data_addr = mc2phy_wr_cas ? mc2phy_winBuf : 'h0 ;

always @ (posedge clk)
begin
    wr_cs_n_r <=   {mc2phy_cs_n[6], mc2phy_cs_n[4], mc2phy_cs_n[2],  mc2phy_cs_n[0]};
    wr_cas_r  <=   mc2phy_wr_cas  ;
end

always @ (posedge clk)
    wr_cas_r_ecc <= wr_cas_r;


assign  wr_data_r =  mc2phy_wr_data ;
assign  wr_mask_r =  mc2phy_wr_data_mask ;

generate if(ECC == "OFF")
always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        wr_data_buffer_b0 <=   'h0 ;
        wr_data_buffer_b1 <=   'h0 ;
        wr_data_buffer_b2 <=   'h0 ;
        wr_data_buffer_b3 <=   'h0 ;
        wr_data_buffer_b4 <=   'h0 ;
        wr_data_buffer_b5 <=   'h0 ;
        wr_data_buffer_b6 <=   'h0 ;
        wr_data_buffer_b7 <=   'h0 ;
        wr_data_buffer_b8 <=   'h0 ;
        wr_mask_buffer_b0 <=   'h0 ;
        wr_mask_buffer_b1 <=   'h0 ;
        wr_mask_buffer_b2 <=   'h0 ;
        wr_mask_buffer_b3 <=   'h0 ;
        wr_mask_buffer_b4 <=   'h0 ;
        wr_mask_buffer_b5 <=   'h0 ;
        wr_mask_buffer_b6 <=   'h0 ;
        wr_mask_buffer_b7 <=   'h0 ;
        wr_mask_buffer_b8 <=   'h0 ;
    end else if (wr_cas_r) begin
        if (mc2phy_cmd_p0_r == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p1_r == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p2_r == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p3_r == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
        end
    end else begin
        wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
        wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
        wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
        wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
        wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
        wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
        wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
        wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
        wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
        wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
        wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
        wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
        wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
        wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
        wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
        wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
        wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
        wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
    end
end
endgenerate

generate if(ECC == "ON")
always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        wr_data_buffer_b0 <=   'h0 ;
        wr_data_buffer_b1 <=   'h0 ;
        wr_data_buffer_b2 <=   'h0 ;
        wr_data_buffer_b3 <=   'h0 ;
        wr_data_buffer_b4 <=   'h0 ;
        wr_data_buffer_b5 <=   'h0 ;
        wr_data_buffer_b6 <=   'h0 ;
        wr_data_buffer_b7 <=   'h0 ;
        wr_data_buffer_b8 <=   'h0 ;
        wr_mask_buffer_b0 <=   'h0 ;
        wr_mask_buffer_b1 <=   'h0 ;
        wr_mask_buffer_b2 <=   'h0 ;
        wr_mask_buffer_b3 <=   'h0 ;
        wr_mask_buffer_b4 <=   'h0 ;
        wr_mask_buffer_b5 <=   'h0 ;
        wr_mask_buffer_b6 <=   'h0 ;
        wr_mask_buffer_b7 <=   'h0 ;
        wr_mask_buffer_b8 <=   'h0 ;
    end else if (wr_cas_r_ecc) begin
        if (mc2phy_cmd_p0_r_ecc == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p1_r_ecc == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 16) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 2 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p2_r_ecc == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 32) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 4 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else if (mc2phy_cmd_p3_r_ecc == 3'b100) begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8) | (wr_data_r[0*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8) | (wr_data_r[1*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8) | (wr_data_r[2*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8) | (wr_data_r[3*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8) | (wr_data_r[4*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8) | (wr_data_r[5*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8) | (wr_data_r[6*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8) | (wr_data_r[7*64 +: 64] << ( wrDataLatency * 2 * 8 + 48) );
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8) | (wr_data_r[8*64 +: 64] << ( wrDataLatency * 2 * 8 + 0 ) );
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8) | (wr_mask_r[0* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8) | (wr_mask_r[1* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8) | (wr_mask_r[2* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8) | (wr_mask_r[3* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8) | (wr_mask_r[4* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8) | (wr_mask_r[5* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8) | (wr_mask_r[6* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8) | (wr_mask_r[7* 8 +:  8] << ( wrDataLatency * 2     + 6 ) );
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8) | (wr_mask_r[8* 8 +:  8] << ( wrDataLatency * 2     + 0 ) );
        end else begin
            wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
            wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
            wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
            wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
            wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
            wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
            wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
            wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
            wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
            wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
            wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
            wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
            wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
            wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
            wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
            wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
            wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
            wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
        end
    end else begin
        wr_data_buffer_b0 <=   (wr_data_buffer_b0 >> 8*8);
        wr_data_buffer_b1 <=   (wr_data_buffer_b1 >> 8*8);
        wr_data_buffer_b2 <=   (wr_data_buffer_b2 >> 8*8);
        wr_data_buffer_b3 <=   (wr_data_buffer_b3 >> 8*8);
        wr_data_buffer_b4 <=   (wr_data_buffer_b4 >> 8*8);
        wr_data_buffer_b5 <=   (wr_data_buffer_b5 >> 8*8);
        wr_data_buffer_b6 <=   (wr_data_buffer_b6 >> 8*8);
        wr_data_buffer_b7 <=   (wr_data_buffer_b7 >> 8*8);
        wr_data_buffer_b8 <=   (wr_data_buffer_b8 >> 8*8);
        wr_mask_buffer_b0 <=   (wr_mask_buffer_b0 >>   8);
        wr_mask_buffer_b1 <=   (wr_mask_buffer_b1 >>   8);
        wr_mask_buffer_b2 <=   (wr_mask_buffer_b2 >>   8);
        wr_mask_buffer_b3 <=   (wr_mask_buffer_b3 >>   8);
        wr_mask_buffer_b4 <=   (wr_mask_buffer_b4 >>   8);
        wr_mask_buffer_b5 <=   (wr_mask_buffer_b5 >>   8);
        wr_mask_buffer_b6 <=   (wr_mask_buffer_b6 >>   8);
        wr_mask_buffer_b7 <=   (wr_mask_buffer_b7 >>   8);
        wr_mask_buffer_b8 <=   (wr_mask_buffer_b8 >>   8);
    end
end
endgenerate


always @ (*) begin
    for (phaseNum = 0; phaseNum <= 7; phaseNum = phaseNum + 1) begin
        wr_data_reorder[(phaseNum*DQ_WIDTH + 0*8) +: 8] =  wr_data_buffer_b0[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 1*8) +: 8] =  wr_data_buffer_b1[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 2*8) +: 8] =  wr_data_buffer_b2[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 3*8) +: 8] =  wr_data_buffer_b3[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 4*8) +: 8] =  wr_data_buffer_b4[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 5*8) +: 8] =  wr_data_buffer_b5[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 6*8) +: 8] =  wr_data_buffer_b6[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 7*8) +: 8] =  wr_data_buffer_b7[phaseNum*8 +: 8];
        wr_data_reorder[(phaseNum*DQ_WIDTH + 8*8) +: 8] =  wr_data_buffer_b8[phaseNum*8 +: 8];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 0)]        =  wr_mask_buffer_b0[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 1)]        =  wr_mask_buffer_b1[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 2)]        =  wr_mask_buffer_b2[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 3)]        =  wr_mask_buffer_b3[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 4)]        =  wr_mask_buffer_b4[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 5)]        =  wr_mask_buffer_b5[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 6)]        =  wr_mask_buffer_b6[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 7)]        =  wr_mask_buffer_b7[phaseNum];
        wr_mask_reorder[(phaseNum*DM_WIDTH + 8)]        =  wr_mask_buffer_b8[phaseNum];
    end
end
//***************************************************************************
// read enable phases generation
//***************************************************************************

localparam rdDataEnLatency_temp = CL - (CL%4 + 8) +  4*((CWL<=11) && (CL<=11));
localparam rdDataEnLatency      = rdDataEnLatency_temp*2;


always @ ( posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_en_buffer <= 64'h0 ;
    end else if (mc2phy_rd_cas) begin
        if (mc2phy_cmd_p0 == 3'b101)
            rd_en_buffer <= (rd_en_buffer >> 8) | (16'b0000_0000_1111_1111 << rdDataEnLatency);
        else if (mc2phy_cmd_p1 == 3'b101)
            rd_en_buffer <= (rd_en_buffer >> 8) | (16'b0000_0011_1111_1100 << rdDataEnLatency);
        else if (mc2phy_cmd_p2 == 3'b101)
            rd_en_buffer <= (rd_en_buffer >> 8) | (16'b0000_1111_1111_0000 << rdDataEnLatency);
        else if (mc2phy_cmd_p3 == 3'b101)
            rd_en_buffer <= (rd_en_buffer >> 8) | (16'b0011_1111_1100_0000 << rdDataEnLatency);
        else
            rd_en_buffer <= (rd_en_buffer >> 8);
    end else begin
        rd_en_buffer <= (rd_en_buffer >> 8);
    end
end

//***************************************************************************
// read data to mc
//***************************************************************************
integer               bufIndex ;
reg                   rd_data_vld_r ;
reg  [DQ_WIDTH*8-1:0] rd_data_r     ;
reg  [DQ_WIDTH*8-1:0] rd_data_r1    ;

//reg  [DBAW-1:0] rd_addr_buf[31:0] ;
reg  [  DBAW:0] rd_addr_buf[63:0] ; // add periodic_read_win to buffer
reg  [     5:0] rd_addr_buf_raddr ;
reg  [     5:0] rd_addr_buf_waddr ;

reg             rd_data_en   ;
reg  [DBAW-1:0] rd_data_addr ;


always @ (posedge clk)
begin
   for (byteNum = 0; byteNum <= DQS_WIDTH-1; byteNum = byteNum + 1) begin
       for (phaseNum = 0; phaseNum <= 7; phaseNum = phaseNum + 1) begin
           rd_data_r[(byteNum*64 + phaseNum*8) +: 8] <=  dfi_rddata_w[(phaseNum*DQ_WIDTH + byteNum*8) +: 8] ;
       end
   end
   rd_data_r1    <=  rd_data_r    ;
   rd_data_vld_r <= |dfi_rddata_valid_w ;
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_addr_buf_raddr <= 'h0;
        rd_addr_buf_waddr <= 'h0;
    end else begin
        if (mc2phy_rd_cas)
            rd_addr_buf_waddr <= rd_addr_buf_waddr + 1'b1;
        if (rd_data_vld_r)
            rd_addr_buf_raddr <= rd_addr_buf_raddr + 1'b1;
    end 
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        for (bufIndex = 0; bufIndex <= 31; bufIndex = bufIndex + 1) rd_addr_buf[bufIndex] <= {(DBAW+1){1'b0}};
    end else if (mc2phy_rd_cas) begin
        rd_addr_buf[rd_addr_buf_waddr] <= {mc2phy_periodic_read_win, mc2phy_winBuf};
    end
end

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        rd_data_en   <=  1'b0;
        rd_data_addr <= {DBAW{1'b0}};
        periodic_read_done   <= 1'b0 ;
    end else if (rd_data_vld_r) begin
        rd_data_en   <= 1'b1 ;
        rd_data_addr <= rd_addr_buf[rd_addr_buf_raddr][DBAW-1:0];
        periodic_read_done   <= rd_addr_buf[rd_addr_buf_raddr][DBAW];
    end else begin
        rd_data_en   <= 1'b0 ;
        rd_data_addr <= {DBAW{1'b0}};
        periodic_read_done   <= 1'b0 ;
    end
end


assign phy2mc_rd_data_end  = 1'b1 ; 
assign phy2mc_rd_data_en   = periodic_read_done ? 1'b0 : rd_data_en ; 
assign phy2mc_rd_data_addr = rd_data_addr   ; 
assign phy2mc_rd_data      = rd_data_r1     ; 

//***************************************************************************
// DFI Signals generation
//***************************************************************************

assign  dfi_reset_n  = 4'b1111;

integer n, p;

always @ (posedge clk or posedge rst_r1)
begin
    if (rst_r1) begin
        dfi_act_n_r   <= 'b0;
        dfi_ras_n_r   <= 'b0;
        dfi_cas_n_r   <= 'b0;
        dfi_we_n_r    <= 'b0;
        dfi_cke_r     <= {( CKE_WIDTH*4){1'b1}};
        dfi_cs_n_r    <= {(  CS_WIDTH*4){1'b1}};
        dfi_bg_r      <= {(  BG_WIDTH*4){1'b0}};
        dfi_bank_r    <= {(  BANK_WIDTH*4){1'b0}};
        dfi_address_r <= {(ADDR_WIDTH*4){1'b0}};
    end else begin
        dfi_act_n_r   <= {mc2phy_act_n[6], mc2phy_act_n[4], mc2phy_act_n[2], mc2phy_act_n[0]};
        dfi_ras_n_r   <= {mc2phy_ras_n[6], mc2phy_ras_n[4], mc2phy_ras_n[2], mc2phy_ras_n[0]};
        dfi_cas_n_r   <= {mc2phy_cas_n[6], mc2phy_cas_n[4], mc2phy_cas_n[2], mc2phy_cas_n[0]};
        dfi_we_n_r    <= {mc2phy_we_n [6], mc2phy_we_n [4], mc2phy_we_n [2], mc2phy_we_n [0]};

        for (n = 0; n <= CKE_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_cke_r[CKE_WIDTH*p + n]  <= mc2phy_cke[8*n + 2*p];
            end
        end

        for (n = 0; n <= ODT_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_odt_r[ODT_WIDTH*p + n]  <= mc2phy_odt[8*n + 2*p];
            end
        end

        for (n = 0; n <=  CS_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_cs_n_r[CS_WIDTH*p + n] <=  mc2phy_cs_n[8*n + 2*p];
            end
        end

        for (n = 0; n <=  BG_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_bg_r[BG_WIDTH*p + n]   <=  mc2phy_bg[8*n + 2*p];
            end
        end

        for (n = 0; n <=  BANK_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_bank_r[BANK_WIDTH*p + n] <= mc2phy_ba[8*n + 2*p];
            end
        end

        for (n = 0; n <=  ADDR_WIDTH-1; n = n+1) begin
            for (p = 0; p <= 3; p = p+1) begin
                dfi_address_r[ADDR_WIDTH*p + n] <= mc2phy_adr[8*n + 2*p];
            end
        end
    end
end

generate if(ECC == "ON")
always @ (posedge clk)
begin
    dfi_cke_r2       <= dfi_cke_r     ;
    dfi_odt_r2       <= dfi_odt_r     ;
    dfi_cs_n_r2      <= dfi_cs_n_r    ;
    dfi_act_n_r2     <= dfi_act_n_r   ;
    dfi_ras_n_r2     <= dfi_ras_n_r   ;
    dfi_cas_n_r2     <= dfi_cas_n_r   ;
    dfi_we_n_r2      <= dfi_we_n_r    ;
    dfi_bg_r2        <= dfi_bg_r      ;
    dfi_bank_r2      <= dfi_bank_r    ;
    dfi_address_r2   <= dfi_address_r ;
 

    for (p = 0; p <= 7; p = p+1) begin
        dfi_wrdata_en_r2[DQS_WIDTH*p +: DQS_WIDTH] <= {DQS_WIDTH{wr_en_buffer[p]}};
        dfi_rddata_en_r2[DQS_WIDTH*p +: DQS_WIDTH] <= {DQS_WIDTH{rd_en_buffer[p]}};
    end
end

always @ (posedge clk)
begin
    dfi_cke_p       <= dfi_cke_r2     ;
    dfi_odt_p       <= dfi_odt_r2     ;
    dfi_cs_n_p      <= dfi_cs_n_r2    ;
    dfi_act_n_p     <= dfi_act_n_r2   ;
    dfi_ras_n_p     <= dfi_ras_n_r2   ;
    dfi_cas_n_p     <= dfi_cas_n_r2   ;
    dfi_we_n_p      <= dfi_we_n_r2    ;
    dfi_bg_p        <= dfi_bg_r2      ;
    dfi_bank_p      <= dfi_bank_r2    ;
    dfi_address_p   <= dfi_address_r2 ;
 

    
    dfi_wrdata_en_p <= dfi_wrdata_en_r2;
    dfi_rddata_en_p <= dfi_rddata_en_r2;
    

end
endgenerate

generate if(ECC == "OFF")
always @ (posedge clk)
begin
    dfi_cke_p       <= dfi_cke_r     ;
    dfi_odt_p       <= dfi_odt_r     ;
    dfi_cs_n_p      <= dfi_cs_n_r    ;
    dfi_act_n_p     <= dfi_act_n_r   ;
    dfi_ras_n_p     <= dfi_ras_n_r   ;
    dfi_cas_n_p     <= dfi_cas_n_r   ;
    dfi_we_n_p      <= dfi_we_n_r    ;
    dfi_bg_p        <= dfi_bg_r      ;
    dfi_bank_p      <= dfi_bank_r    ;
    dfi_address_p   <= dfi_address_r ;
 

    for (p = 0; p <= 7; p = p+1) begin
        dfi_wrdata_en_p[DQS_WIDTH*p +: DQS_WIDTH] <= {DQS_WIDTH{wr_en_buffer[p]}};
        dfi_rddata_en_p[DQS_WIDTH*p +: DQS_WIDTH] <= {DQS_WIDTH{rd_en_buffer[p]}};
    end

end
endgenerate


generate 
 if(DRAM_TYPE == "DDR3")
  always @ (*) begin
    dfi_wrdata_p       <=  wr_data_reorder ;
    dfi_wrdata_mask_p  <=  wr_mask_reorder ;
  end
 else if(DRAM_TYPE == "DDR4")
  always @ (*) begin
    dfi_wrdata_p       <=  wr_data_reorder ;
    dfi_wrdata_mask_p  <= ~wr_mask_reorder ;
  end
endgenerate


endmodule
`endif

///////////////////////////////////////////////////////////////////////////////////
//***********************************************************/
//               _______________
//            //\ _____________
//           // \\ ___________
//          //   \\ _________
//         //     \\ _______
//        //       \\ _____
//       //         \\ ___
//      //_ _ _ _    \\ _
//      -----------
//
//Copyright(c)2011-2022 Anlogic Inc,All Right Reserved.
//Vender           : Anlogic
//Auther           : unkown
//Filename         : alc_mc_top.v
//Description      : alc mc top module
//Revision History : 2022-07-30
//Revison          : 1.0
//Emaile           : u@anlogic.com.cn
//*********************************************************/
`timescale 1ps/1ps
module alc_mc_top #(
    parameter DQS_WIDTH            = 8           ,
    parameter DQ_WIDTH             = DQS_WIDTH*8 ,
    parameter DM_WIDTH             = DQS_WIDTH   ,
    parameter DRAM_TYPE            = "DDR3"      ,
    parameter ECC                  = "OFF"       ,
    parameter ECC_WIDTH            = 8           ,
    parameter MC_ADDR_WIDTH        = 28          ,
    parameter MC_DATA_WIDTH        = (ECC == "ON")? (DQS_WIDTH-1)*8*8 :  DQS_WIDTH *8*8,
    parameter MC_MASK_WIDTH        = (ECC == "ON")? (DQS_WIDTH-1)*8   :  DQS_WIDTH *8  ,
    parameter PAYLOAD_WIDTH        = (ECC == "OFF") ? DQ_WIDTH : MC_DATA_WIDTH/8,
    parameter ADDR_WIDTH           = 15          ,
    parameter AXI_ID_WIDTH         = 4           ,
    parameter ADDR_ORDER           = "ROW_COLUMN_BANK",
    parameter REORDER              = "STRICT"    ,
    parameter ROW_WIDTH            = 15          ,
    parameter BANK_WIDTH           = 3           ,
    parameter BG_WIDTH             = 1           ,
    parameter COL_WIDTH            = 10          ,
    parameter CKE_WIDTH            = 1           ,
    parameter CS_WIDTH             = 1           ,
    parameter ODT_WIDTH            = 1           ,
    parameter CWL                  = 8           ,
    parameter PER_RD_INTVL         = 32'd0       ,
    parameter ADDR_FIFO_WIDTH      = 52          ,
    parameter tREFI                = 6240        ,
    parameter tRFC                 = 452         ,
    parameter tRP                  = 11          ,
    parameter tWR                  = 14          ,
    parameter tRAS                 = 36          ,
    parameter tRTP                 = 13          ,
    parameter tWTR_L               = 6           ,
    parameter tWTR_S               = 6           ,
    parameter tRTW                 = 0           ,
    parameter tFAW                 = 32          ,
    parameter tRRD_L               = 6           ,
    parameter tRRD_S               = 6           ,
    parameter tRCD                 = 11         ,
    parameter DBAW                 = 5 

) (
    //System input
    input                                   dfi_clk           ,
    input                                   rst               ,
    input                                   init_cal_done_PHY ,
   `ifdef MC_AXI
    input                                   mc_en         , 
    input        [2:0]                      mc_cmd        , 
    input        [MC_ADDR_WIDTH-1:0]        mc_addr       ,    
    output                                  mc_rdy        ,
                                                     
    //DATA PORT
    input                                   mc_wdf_wren   , 
    input        [MC_DATA_WIDTH/8-1:0]      mc_wdf_mask   , 
    input        [MC_DATA_WIDTH-1:0]        mc_wdf_data   ,
    input                                   mc_wdf_end    ,                      
    output                                  mc_wdf_rdy    , 
                                                 
    output                                  mc_rd_data_valid   , 
    output       [MC_DATA_WIDTH-1:0]        mc_rd_data         ,
    output                                  mc_rd_data_end     ,
   `else
    input        [MC_ADDR_WIDTH- 1 : 0]     paxi_awaddr        , 
    input                                   paxi_awvalid       , 
    output                                  paxi_awready       , 
    
    input        [MC_DATA_WIDTH- 1 : 0]     paxi_wdata         , 
    input        [MC_MASK_WIDTH- 1 : 0]     paxi_wstrb         , 
    input                                   paxi_wvalid        , 
    input                                   paxi_wlast         , 
    output                                  paxi_wready        , 
     
    // Write Response Port 
    output       [AXI_ID_WIDTH  - 1 : 0]    paxi_bid           ,
    output       [                1 : 0]    paxi_bresp         , 
    output                                  paxi_bvalid        ,  
    input                                   paxi_bready        ,
    // Read Address Ports
    input        [MC_ADDR_WIDTH- 1 : 0]     paxi_araddr        , 
    input                                   paxi_arvalid       ,  
    output                                  paxi_arready       ,    
             
    // Read Data Ports
    output       [MC_DATA_WIDTH- 1 : 0]     paxi_rdata         , 
    output                                  paxi_rlast         , 
    output                                  paxi_rvalid        , 
    input                                   paxi_rready        , 
    `endif
       // update phy signal for PVT tracking
    input                                   dfi_phyupd_req    ,
    output       [                1 : 0]    dfi_phyupd_ack    ,
    // ecc port
    output       [                7 : 0]    eccSingle         ,
    output       [                7 : 0]    eccMultiple       ,
    output       [               51 : 0]    ecc_err_addr      ,
    //retiming
    input                                   phy2mc_rd_data_end_dfi  ,
    input        [           DBAW-1 : 0]    phy2mc_rd_data_addr_dfi ,
    input        [     DQ_WIDTH*8-1 : 0]    phy2mc_rd_data_dfi      ,
    input                                   phy2mc_rd_data_en_dfi   ,
    input                                   phy2mc_wr_data_en   ,
    input        [           DBAW-1 : 0] 	phy2mc_wr_data_addr ,
    //to retiming
    output       [                     7 : 0]    mc2phy_ck_t         ,
    output       [                     7 : 0]    mc2phy_ck_c         ,
    output       [                     7 : 0]    mc2phy_act_n        ,
    output       [        ADDR_WIDTH*8-1 : 0]    mc2phy_adr          ,
    output       [        BANK_WIDTH*8-1 : 0]    mc2phy_ba           ,
    output       [          BG_WIDTH*8-1 : 0]    mc2phy_bg           ,
    output       [         CKE_WIDTH*8-1 : 0]    mc2phy_cke          ,
    output       [          CS_WIDTH*8-1 : 0]    mc2phy_cs_n         ,
    output       [         ODT_WIDTH*8-1 : 0]    mc2phy_odt          ,
    output       [                     7 : 0]    mc2phy_ras_n        ,
    output       [                     7 : 0]    mc2phy_cas_n        ,
    output       [                     7 : 0]    mc2phy_we_n         ,
    
    output                                       rdCAS      ,
    output                                       wrCAS      ,
    output       [          DQ_WIDTH*8-1 : 0]    mc2phy_wr_data      ,
    output       [          DM_WIDTH*8-1 : 0]    mc2phy_wr_data_mask ,
    output                                       periodic_read_win   ,
    output       [                DBAW-1 : 0]    mc2phy_winBuf       ,
    input                                        periodic_read_done
                  
);

`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "Anlogic"
`pragma protect encrypt_agent_info = "Anlogic Encryption Tool anlogic_2019"
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
RuqeibkHuoQpIX/sbJxSxaqvMQ/zp7Uc6dTNWOwJB5EC2sKdOZURjqYZw2BC708L
d4+WmCbFTXB1YLaLJlJob+/l3sexAGgOC2G+zj9OKreJum2SNctBUNEkiwjlUff9
/Pd6LlClIAIjMsSxskjp93CK7cZAWqGEPZNbHPToKxU=
`pragma protect key_keyowner = "Mentor Graphics Corporation", key_keyname = "MGC-VERIF-SIM-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 256)
`pragma protect key_block
qHAb0WqFJ5Uikug4ICcpRJ3oy/viXTJfV4guPakp++dfDwQbrvVaqeKVXASBZZa3
B+ou9l3WAhsq/rKtw8thro5k5ab3/jP56PBYeW0Advsl9c9L7Uc7n3Ym4alTvmaK
2H1RBqaAaGAMYDD5TYjIjaCxW0kM7CfUekaTg/NRd3TsTT5y9+O7BcYwWyuhCXJ5
voONVdhjSt5QLMxGejdfRIJN8DhCpjlCeC15RrqeuP62PUdR0qSLIHItexYIA93R
OZtAAW0EHTER8dcvKlvW0Y6tMLcYdS+W7GeYOqwQO0oKQ2zxNXZfqB5laXU5ZLFM
8glrqwxuRPMX+EOYtEjADg==
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-1"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
k4Wyulte2ebNwR4l52JinGxice7A/Fkz/RQJxqqWDgjxZ1ulzIU4YnY5z/Flw6UU
y7oukLu2tBFe9Khslce9+30Xe7erXml+eX9BA2rOQJ+9h5AnYuTa+TBOPE9MylTJ
cO3o9BIOAgSnTBgt/WMvr45RTwMVWoEmPGYKAwt/87w=
`pragma protect key_keyowner = "Synopsys", key_keyname = "SNPS-VCS-RSA-2"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
SJ60enKKCCSVivn1gb3UjekElq68SGiToR7YKVm9APFDnFnlTohLdr0NXHKAKV8n
wTE3SVDz/0u0huuhn000xac3fQW473n1NGyuZDe22xIYBQumSXJnOV3rVsfUMecn
+oTsey5QaDUIel9arhwEk0ShlpBq//+mGUubGBZpA/I=
`pragma protect key_keyowner = "Anlogic", key_keyname = "anlogic-rsa-009"
`pragma protect key_method = "rsa"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 128)
`pragma protect key_block
t4mTa61Y9kZEvTX+EmZmkU5KksZP9cXVrE0sAD6NEcqZ/5gB0z5PWAZ6w7oWihoF
tKCP3Sz/0PU5ti7SRS5GXMqvBggPZiKMHmAJRalMPvdIYBTCNpibl3O9GGUuu1Lg
8So8PhYClpj+zBUTSRqdkc9gsUyd9j8JWkmI4C+Szxk=
`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 64, bytes = 234624)
`pragma protect data_block
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
`pragma protect end_protected


//`define USE_USER_DRAM
//`define DFI_FIFO
//`define USE_APC101_BOARD
`timescale 1ps/1ps

module ph1_ddrphy_ip_top (
    
    sys_clk_p,
    sys_rstn,

`ifdef USE_CLK1
    user_clk0,
`endif
`ifdef USE_CLK2
    user_clk1,
`endif
`ifdef USE_CLK3
    user_clk2,
`endif
`ifdef USE_CLK4
    user_clk3,
`endif

    pll_locked,

// DDR bus signals
`ifdef USE_DQS_GATE
    dqs_gate,
`endif
    ddr_addr,
    ddr_ba,
    ddr_cke,

`ifdef DRAM_DDR4
    ddr_bg, 
    ddr_ck_c,
    ddr_ck_t,   
`ifdef USE_DM
    ddr_dm_dbi,
`endif
`ifdef USE_PAR_ALERT
    ddr_parity,
    ddr_alert_n,
`endif
    ddr_act_n,
    ddr_dqs_c,
    ddr_dqs_t,
`elsif DRAM_DDR3
    ddr_ck_n,
    ddr_ck_p,
    ddr_ras_n,
    ddr_cas_n,
    ddr_we_n,   
`ifdef USE_DM
    ddr_dm,
`endif
    ddr_dqs_n,
    ddr_dqs_p,
`endif

`ifdef USE_CS
    ddr_cs_n,
`endif
`ifdef USE_RESET
    ddr_reset_n,
`endif
    ddr_odt,
    ddr_dq,

//// DFI bus signals, between hard controller and users or top-level systems
    dfi_clk,
    dfi_reset_n,
    dfi_cke,
    dfi_odt,
    dfi_cs_n,
    dfi_ras_n,
    dfi_cas_n,
    dfi_we_n,
`ifdef DRAM_DDR4
    dfi_act_n,
    dfi_bg,
`ifdef USE_PAR_ALERT
    dfi_parity_in,
    dfi_alert_n,
`endif
`endif
    dfi_bank,
    dfi_address,
    dfi_wrdata_en,
    dfi_wrdata,
    dfi_wrdata_mask,
    dfi_rddata_en,
    dfi_rddata_valid,
    dfi_rddata,
    dfi_rddata_dbi_n,

    dfi_ctrlupd_req,
    dfi_ctrlupd_ack,
    dfi_phyupd_req,
    dfi_phyupd_ack,
    dfi_phyupd_type,

`ifdef USE_DEBUG
    uart_rxd,
    uart_txd,
`endif

////user dram
`ifdef USE_USER_DRAM
    apb_clk           ,
    user_update       ,
    user_ram_addr     ,
    user_ram_wr_en    ,
    user_ram_rd_en    ,
    user_ram_wr_data  ,
    user_ram_rd_data  ,
`endif

    mcu_busy          ,
    pzq_cal_done_o    ,
    pzq_cal_done_i    ,
    ddr_init_cal_done
);

parameter DEVICE              = "PH1A90";
parameter TCK                 = 1876; //memory tCK parameter, clock period in ps
parameter NCK_PER_CLK         = 4; //4,2. Fabric clk period : Memory clk period
parameter DRAM_TYPE           = "DDR3"; //"DDR3","DDR4"
parameter CTRL_INDEX          = 0;
parameter BYTE_LANE_0         = 4'b0000; //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
parameter BYTE_LANE_1         = 4'b0011;
parameter BYTE_LANE_2         = 4'b1111;
parameter DATA_CTRL_0         = 4'b0000; //[3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
parameter DATA_CTRL_1         = 4'b0011;
parameter DATA_CTRL_2         = 4'b0000;
parameter ADDR_MAP            = 216'h00000000000022222623423523822423322121423021A217223239;
parameter CK_MAP              = 24'h22B22A;
parameter BANK_MAP            = 36'h21923121B;
parameter CKE_MAP             = 24'h000_220;
parameter ODT_MAP             = 24'h000_000_236;
parameter CS_MAP              = 24'h000_000_23A;
parameter DQS_BYTE_MAP        = 216'h000000000000000000000000000000000000000000117116107106;
parameter DM_MAP              =108'h000_000_000_000_000_000_000_112_100;
parameter RAS_MAP             = 12'h200;
parameter CAS_MAP             = 12'h237;
parameter WE_MAP              = 12'h216;
parameter RESET_MAP           = 12'h215;
parameter DATA0_MAP           = 96'h10A10410210510310810B109;
parameter DATA1_MAP           = 96'h11911311A11411011511811B;
parameter DATA2_MAP           = 96'h000000000000000000000000;
parameter DATA3_MAP           = 96'h000000000000000000000000;
parameter DATA4_MAP           = 96'h000000000000000000000000;
parameter DATA5_MAP           = 96'h000000000000000000000000;
parameter DATA6_MAP           = 96'h000000000000000000000000;
parameter DATA7_MAP           = 96'h000000000000000000000000;
parameter DATA8_MAP           = 96'h000000000000000000000000;
parameter LOC_DX_BYTELANE_MAP = 72'h000000000000001110;
parameter LOC_AC_BYTELANE_MAP = 32'h20212223;
parameter DQS_GATE            = "Internal" ;
parameter DQS_GATE_MAP        = 108'h000000000000000000000000000;
parameter DQS_GATE_WIDTH      = 1 ;
parameter USER_CLK_EN         = 4'b0000;
parameter CLOCK_RATE          = 50_000_000;
//--------------------------ddr parameters-----------------------
parameter CK_WIDTH                    = 1; // # of CK/CK# outputs to memory
parameter ODT_WIDTH           = 1;
parameter CKE_WIDTH           = 1; // # of cke outputs
parameter CS_WIDTH            = 1; // # of unique CS outputs
parameter DQ_WIDTH            = 16;
parameter DQS_WIDTH           = 2; // # of DQS (strobe)
parameter DM_WIDTH            = 2;
parameter ROW_WIDTH           = 14;
parameter ADDR_WIDTH          = 14;
parameter BANK_WIDTH          = 3;
parameter AC_WIDTH            = 4;
parameter BURST_TYPE          = "Sequential"; // "Sequential", "Interleaved"
parameter INTER_VREF          = "ENABLE"; //"Enable", "Disable"
parameter DCI                 = "ENABLE";
parameter DEBUG_CTRL          = "DISABLE"; // "Enable", "Disable"



/////////////////////////////  port   ///////////////////////////////////
input                           sys_clk_p;
input                           sys_rstn;
`ifdef USE_CLK1 
output                          user_clk0;
`endif
`ifdef USE_CLK2
output                          user_clk1;
`endif  
`ifdef USE_CLK3 
output                          user_clk2;
`endif  
`ifdef USE_CLK4
output                          user_clk3;
`endif
output                          pll_locked;

// DDR bus signals
`ifdef USE_DQS_GATE
inout  [DQS_GATE_WIDTH-1 : 0]   dqs_gate;
`endif
output [    ADDR_WIDTH-1 : 0]   ddr_addr;
output [    BANK_WIDTH-1 : 0]   ddr_ba;
output [     ODT_WIDTH-1 : 0]   ddr_odt;
output [     CKE_WIDTH-1 : 0]   ddr_cke;
`ifdef USE_CS
output [      CS_WIDTH-1 : 0]   ddr_cs_n;
`endif
`ifdef USE_RESET
output                          ddr_reset_n;
`endif
inout  [      DQ_WIDTH-1 : 0]   ddr_dq;

`ifdef DRAM_DDR4
output [      BG_WIDTH-1 : 0]   ddr_bg;
output [      CK_WIDTH-1 : 0]   ddr_ck_c;
output [      CK_WIDTH-1 : 0]   ddr_ck_t;
`ifdef USE_DM
inout  [      DM_WIDTH-1 : 0]   ddr_dm_dbi;
`endif
`ifdef USE_PAR_ALERT
output                          ddr_parity;
input                           ddr_alert_n;
`endif
output                          ddr_act_n;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_c;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_t;
`elsif DRAM_DDR3
output [      CK_WIDTH-1 : 0]   ddr_ck_n;
output [      CK_WIDTH-1 : 0]   ddr_ck_p;
output                          ddr_ras_n;
output                          ddr_cas_n;
output                          ddr_we_n;
`ifdef USE_DM
inout  [      DM_WIDTH-1 : 0]   ddr_dm;
`endif
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_n;
inout  [     DQS_WIDTH-1 : 0]   ddr_dqs_p;
`endif

// DFI bus signals, between hard controller and users or top-level systems
output                      dfi_clk;
input  [             3:0]   dfi_reset_n;
input  [ CKE_WIDTH*4-1:0]   dfi_cke;
input  [ ODT_WIDTH*4-1:0]   dfi_odt;
input  [ CS_WIDTH *4-1:0]   dfi_cs_n;
input  [             3:0]   dfi_ras_n;
input  [             3:0]   dfi_cas_n;
input  [             3:0]   dfi_we_n;
input  [BANK_WIDTH*4-1:0]   dfi_bank;
input  [ADDR_WIDTH*4-1:0]   dfi_address;
input  [ DQS_WIDTH*4-1:0]   dfi_wrdata_en;
input  [  DQ_WIDTH*8-1:0]   dfi_wrdata;
input  [  DM_WIDTH*8-1:0]   dfi_wrdata_mask;
input  [ DQS_WIDTH*4-1:0]   dfi_rddata_en;
`ifdef DFI_FIFO
output [ DQS_WIDTH*4-1:0]   dfi_rddata_valid;
output [  DQ_WIDTH*8-1:0]   dfi_rddata;
output [  DM_WIDTH*8-1:0]   dfi_rddata_dbi_n;
`else
output reg [ DQS_WIDTH*4-1:0]   dfi_rddata_valid;
output reg [  DQ_WIDTH*8-1:0]   dfi_rddata;
output reg [  DM_WIDTH*8-1:0]   dfi_rddata_dbi_n;
`endif


`ifdef DRAM_DDR4
input  [             3:0]   dfi_act_n;
input  [  BG_WIDTH*4-1:0]   dfi_bg;
`endif

`ifdef USE_PAR_ALERT
input  [             3:0]   dfi_parity_in;
`ifdef DFI_FIFO
output [             3:0]   dfi_alert_n;
`else
output reg [         3:0]   dfi_alert_n;
`endif
`else
wire   [             3:0]   dfi_parity_in = 'd0;
`endif

input  [             1:0]   dfi_ctrlupd_req;
output [             1:0]   dfi_ctrlupd_ack;
output [             1:0]   dfi_phyupd_req;
input  [             1:0]   dfi_phyupd_ack;
output [             3:0]   dfi_phyupd_type;

`ifdef USE_USER_DRAM
// user dram signals
output  wire                apb_clk          ;
input                       user_update      ;
input  [  7:0]              user_ram_addr    ;
input                       user_ram_wr_en   ;
input                       user_ram_rd_en   ;
input  [ 31:0]              user_ram_wr_data ;
output [ 31:0]              user_ram_rd_data ;
`else
wire                        apb_clk          ;
wire                        user_update      ='d0 ;
wire   [  7:0]              user_ram_addr    ='d0 ;
wire                        user_ram_wr_en   ='d0 ;
wire                        user_ram_rd_en   ='d0 ;
wire   [ 31:0]              user_ram_wr_data ='d0 ;
`endif

// uart debug
`ifdef USE_DEBUG
input                      uart_rxd;    
output                     uart_txd;
`else
wire                       uart_rxd = 'd0;
wire                       uart_txd;
`endif
output                     mcu_busy         ;
output                     pzq_cal_done_o   ;
input                      pzq_cal_done_i   ;
output                     ddr_init_cal_done;

localparam DFI_PIPELINE_STAGE = 2     ; // 1, 2

localparam USER_SET_EN0       = 1'b0  ; // 0, 1, used to control CWL and CL
localparam USER_SET_EN1       = 1'b0  ; // 0, 1, used to control VREF, DRV and ODT
localparam HOST_VREF_RANGE    = 1'b0  ; //
localparam HOST_VREF          = 8'h10 ; //
localparam HOST_DRV           = 4'hB  ; // 480/(n+1), n=0,1,2...15 
localparam HOST_ODT           = 4'hB  ; // 480/(n+1), n=0,1,2...15
localparam CWL                = 4'h0  ; // refer to the datasheet of the component
localparam CL                 = 4'h3  ; // refer to the datasheet of the component

////  DFI temp signals,async fifo side
`ifdef DFI_FIFO
wire  [              3:0]  dfi_reset_n_temp;
wire  [  CKE_WIDTH*4-1:0]  dfi_cke_temp;
wire  [  ODT_WIDTH*4-1:0]  dfi_odt_temp;
wire  [   CS_WIDTH*4-1:0]  dfi_cs_n_temp;
wire  [              3:0]  dfi_ras_n_temp;
wire  [              3:0]  dfi_cas_n_temp;
wire  [              3:0]  dfi_we_n_temp;
`ifdef DRAM_DDR4
wire  [              3:0]  dfi_act_n_temp;
wire  [   BG_WIDTH*4-1:0]  dfi_bg_temp;
wire  [              3:0]  dfi_alert_n_temp;
wire  [              3:0]  dfi_parity_in_temp;
`endif
wire  [ BANK_WIDTH*4-1:0]  dfi_bank_temp;
wire  [ ADDR_WIDTH*4-1:0]  dfi_address_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_wrdata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_en_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_rddata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_temp;
`else // `ifndef DFI_FIFO
reg   [              3:0]  dfi_reset_n_temp;
reg   [  CKE_WIDTH*4-1:0]  dfi_cke_temp;
reg   [  ODT_WIDTH*4-1:0]  dfi_odt_temp;
reg   [   CS_WIDTH*4-1:0]  dfi_cs_n_temp;
reg   [              3:0]  dfi_ras_n_temp;
reg   [              3:0]  dfi_cas_n_temp;
reg   [              3:0]  dfi_we_n_temp;
`ifdef DRAM_DDR4
reg   [              3:0]  dfi_act_n_temp;
reg   [   BG_WIDTH*4-1:0]  dfi_bg_temp;
wire  [              3:0]  dfi_alert_n_temp;
reg   [              3:0]  dfi_parity_in_temp;
`endif
reg   [ BANK_WIDTH*4-1:0]  dfi_bank_temp;
reg   [ ADDR_WIDTH*4-1:0]  dfi_address_temp;
reg   [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_temp;
reg   [   DQ_WIDTH*8-1:0]  dfi_wrdata_temp;
reg   [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_temp;
reg   [  DQS_WIDTH*4-1:0]  dfi_rddata_en_temp;
wire  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_temp;
wire  [   DQ_WIDTH*8-1:0]  dfi_rddata_temp;
wire  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_temp;
`endif


// DFI local signals, phy side
wire             dfi_clk_local;
wire  [  3:0]    dfi_reset_n_local;
wire  [  7:0]    dfi_cke_local;
wire  [  7:0]    dfi_odt_local;
wire  [  7:0]    dfi_cs_n_local;
wire  [  3:0]    dfi_act_n_local;
wire  [  3:0]    dfi_ras_n_local;
wire  [  3:0]    dfi_cas_n_local;
wire  [  3:0]    dfi_we_n_local;
wire  [  7:0]    dfi_bg_local;
wire  [ 11:0]    dfi_bank_local;
wire  [ 71:0]    dfi_address_local;
wire  [ 35:0]    dfi_wrdata_en_local;
wire  [575:0]    dfi_wrdata_local;
wire  [ 71:0]    dfi_wrdata_mask_local;
wire  [ 35:0]    dfi_rddata_en_local;
wire  [ 35:0]    dfi_rddata_valid_local;
wire  [575:0]    dfi_rddata_local;
wire  [ 71:0]    dfi_rddata_dbi_n_local;
wire  [  3:0]    dfi_parity_in_local;
wire  [  3:0]    dfi_alert_n_local;

wire             ddr_clk0;
wire             phy_clk0;
wire             ddr_clk1;
wire             phy_clk1;
wire             ddr_clk2;
wire             phy_clk2;
wire             bank31_hctrl_clk;
wire             bank32_hctrl_clk;
wire             bank33_hctrl_clk;
wire             hctrl_clk;

wire   phy_rstn        = pll_locked;

`ifdef PPC_LOC_Y80
assign dfi_clk_local   = bank33_hctrl_clk;
`elsif PPC_LOC_Y40
assign dfi_clk_local   = bank32_hctrl_clk;
`else
assign dfi_clk_local   = bank31_hctrl_clk;
`endif

assign dfi_clk         = hctrl_clk;


//// internal apb bus signals
wire             apb_clk_o   ;
wire             apb_rst_n   ;
wire [15:0]      apb_addr    ;
wire [17:0]      apb_addr_int; 
wire             apb_enable  ;
wire             apb_error   ;
wire [31:0]      apb_rdata   ;
wire             apb_ready   ;
wire [31:0]      apb_wdata   ;
wire             apb_wr_rdn  ;
wire             apb_sel     ;
wire [31:0]      user_set    ;
wire [31:0]      user_led    ;

assign apb_rst_n = pll_locked ;
assign apb_addr  = apb_addr_int[17:2];

`ifdef  PH1_DDR_SIM 
assign    apb_clk = hctrl_clk;
`else
assign    apb_clk = apb_clk_o;
`endif

ph1_logic_clk_management #(
    .BYTE_LANE_0      ( BYTE_LANE_0      ),
    .BYTE_LANE_1      ( BYTE_LANE_1      ),
    .BYTE_LANE_2      ( BYTE_LANE_2      ),
    .USER_CLK_EN      ( USER_CLK_EN      )
) u_clk(
    .sys_clk          ( sys_clk_p        ),
    .sys_rstn         ( sys_rstn         ),
    .apb_clk          ( apb_clk_o        ),
    .ddr_clk0         ( ddr_clk0         ),
    .phy_clk0         ( phy_clk0         ),
    .ddr_clk1         ( ddr_clk1         ),
    .phy_clk1         ( phy_clk1         ),
    .ddr_clk2         ( ddr_clk2         ),
    .phy_clk2         ( phy_clk2         ),
    .hctrl_clk        ( hctrl_clk        ),
    .bank31_hctrl_clk ( bank31_hctrl_clk ),
    .bank32_hctrl_clk ( bank32_hctrl_clk ),
    .bank33_hctrl_clk ( bank33_hctrl_clk ),

`ifdef USE_CLK1 
    .user_clk0        ( user_clk0        ),
`endif  
`ifdef USE_CLK2 
    .user_clk1        ( user_clk1        ),
`endif  
`ifdef USE_CLK3 
    .user_clk2        ( user_clk2        ),
`endif
`ifdef USE_CLK4         
    .user_clk3        ( user_clk3        ),
`endif

    .pll_locked       ( pll_locked       )
);

assign user_set = (USER_SET_EN1 << 28) | (USER_SET_EN0 << 24) | (HOST_VREF_RANGE << 23) | (HOST_VREF << 16) | (HOST_DRV << 12) | (HOST_ODT << 8) | (CL << 4) | CWL ;

ph1_logic_sopc_top #(
    .CLOCK_RATE        ( CLOCK_RATE       )
) u_mcu (
    .cpu_clk           ( apb_clk          ),
    .cpu_rst_n         ( pll_locked       ),
    .fpga_apb_PADDR    ( apb_addr_int     ),
    .fpga_apb_PSEL     ( apb_sel          ),
    .fpga_apb_PENABLE  ( apb_enable       ),
    .fpga_apb_PREADY   ( apb_ready        ),
    .fpga_apb_PWRITE   ( apb_wr_rdn       ),
    .fpga_apb_PWDATA   ( apb_wdata        ),
    .fpga_apb_PRDATA   ( apb_rdata        ),
    .fpga_apb_PSLVERR  ( apb_error        ),
    
    .uart_txd          ( uart_txd         ),    
    .uart_rxd          ( uart_rxd         ),

    .user_update       ( user_update      ), 
    .user_ram_addr     ( user_ram_addr    ),
    .user_ram_wr_en    ( user_ram_wr_en   ),
    .user_ram_rd_en    ( user_ram_rd_en   ),
    .user_ram_wr_data  ( user_ram_wr_data ),
    .user_ram_rd_data  ( user_ram_rd_data ),
    .user_set          ( user_set         ),
    .user_led          ( user_led         ),
    .pzq_cal_done_o    ( pzq_cal_done_o   ),
    .pzq_cal_done_i    ( pzq_cal_done_i   ),
    .mcu_busy          ( mcu_busy         ),
    .ddr_init_cal_done ( ddr_init_cal_done)
);


ph1_logic_dfi_bus_adjust #(
    .ADDR_WIDTH       (ADDR_WIDTH    ),
    .ROW_WIDTH        (ROW_WIDTH     ),
    .BANK_WIDTH       (BANK_WIDTH    ),
`ifdef DRAM_DDR4
    .BG_WIDTH         (BG_WIDTH      ),
`endif
    .ODT_WIDTH        (ODT_WIDTH     ),
    .CK_WIDTH         (CK_WIDTH      ),
    .CKE_WIDTH        (CKE_WIDTH     ),
    .CS_WIDTH         (CS_WIDTH      ),
    .DQ_WIDTH         (DQ_WIDTH      ),
    .DQS_WIDTH        (DQS_WIDTH     ),
    .DM_WIDTH         (DM_WIDTH      )
) u_dfi_bus_adjust(
    ////fifo side
    .dfi_reset_n_temp       (dfi_reset_n_temp      ),
    .dfi_cke_temp           (dfi_cke_temp          ),
    .dfi_odt_temp           (dfi_odt_temp          ),
    .dfi_cs_n_temp          (dfi_cs_n_temp         ),
    .dfi_ras_n_temp         (dfi_ras_n_temp        ),
    .dfi_cas_n_temp         (dfi_cas_n_temp        ),
    .dfi_we_n_temp          (dfi_we_n_temp         ),
`ifdef DRAM_DDR4
    .dfi_act_n_temp         (dfi_act_n_temp        ),
    .dfi_bg_temp            (dfi_bg_temp           ),
    .dfi_alert_n_temp       (dfi_alert_n_temp      ),
    .dfi_parity_in_temp     (dfi_parity_in_temp    ),
`endif
    .dfi_bank_temp          (dfi_bank_temp         ),
    .dfi_address_temp       (dfi_address_temp      ),
    .dfi_wrdata_en_temp     (dfi_wrdata_en_temp    ),
    .dfi_wrdata_temp        (dfi_wrdata_temp       ),
    .dfi_wrdata_mask_temp   (dfi_wrdata_mask_temp  ),
    .dfi_rddata_en_temp     (dfi_rddata_en_temp    ),
    .dfi_rddata_valid_temp  (dfi_rddata_valid_temp ),
    .dfi_rddata_temp        (dfi_rddata_temp       ),
    .dfi_rddata_dbi_n_temp  (dfi_rddata_dbi_n_temp ),

    ////dfi phy side
    .dfi_reset_n            (dfi_reset_n_local     ),
    .dfi_cke                (dfi_cke_local         ),
    .dfi_odt                (dfi_odt_local         ),
    .dfi_cs_n               (dfi_cs_n_local        ),
    .dfi_act_n              (dfi_act_n_local       ),
    .dfi_ras_n              (dfi_ras_n_local       ),
    .dfi_cas_n              (dfi_cas_n_local       ),
    .dfi_we_n               (dfi_we_n_local        ),
    .dfi_bg                 (dfi_bg_local          ),
    .dfi_bank               (dfi_bank_local        ),
    .dfi_address            (dfi_address_local     ),
    .dfi_parity_in          (dfi_parity_in_local   ),
    .dfi_alert_n            (dfi_alert_n_local     ),
    .dfi_wrdata_en          (dfi_wrdata_en_local   ),
    .dfi_wrdata             (dfi_wrdata_local      ),
    .dfi_wrdata_mask        (dfi_wrdata_mask_local ),

    .dfi_rddata_en          (dfi_rddata_en_local   ),
    .dfi_rddata_valid       (dfi_rddata_valid_local),
    .dfi_rddata             (dfi_rddata_local      ),
    .dfi_rddata_dbi_n       (dfi_rddata_dbi_n_local)

);


ph1_logic_ddrphy_standard #(
    .TCK                ( TCK           ),  // memory tCK parameter, clock period in ps
    .NCK_PER_CLK        ( NCK_PER_CLK   ),
    .DQS_GATE           ( DQS_GATE      ),
    .CTRL_INDEX         ( CTRL_INDEX    ),
// bank and pad position parameters about ddr bus   
    .BYTE_LANE_0        ( BYTE_LANE_0   ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1        ( BYTE_LANE_1   ),
    .BYTE_LANE_2        ( BYTE_LANE_2   ),
    .DATA_CTRL_0        ( DATA_CTRL_0   ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1        ( DATA_CTRL_1   ),
    .DATA_CTRL_2        ( DATA_CTRL_2   ),
    .ADDR_MAP           ( ADDR_MAP      ),
    .CK_MAP             ( CK_MAP        ),
    .BANK_MAP           ( BANK_MAP      ),
    .CKE_MAP            ( CKE_MAP       ),
    .ODT_MAP            ( ODT_MAP       ),
    .CS_MAP             ( CS_MAP        ),
    .DQS_GATE_MAP       ( DQS_GATE_MAP  ),
    .RESET_MAP          ( RESET_MAP     ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP     ( BANK_GROUP_MAP),
    .ACT_MAP            ( ACT_MAP       ),
    .PARITY_MAP         ( PARITY_MAP    ),
    .ALERT_MAP          ( ALERT_MAP     ),  //DDR4
    .DM_DBI_MAP         ( DM_DBI_MAP    ),
`elsif DRAM_DDR3
    .RAS_MAP            ( RAS_MAP       ),
    .CAS_MAP            ( CAS_MAP       ),
    .WE_MAP             ( WE_MAP        ),
    .DM_MAP             ( DM_MAP        ),
`endif

    .DQS_BYTE_MAP       ( DQS_BYTE_MAP  ),
    .DATA0_MAP          ( DATA0_MAP     ),
    .DATA1_MAP          ( DATA1_MAP     ),
    .DATA2_MAP          ( DATA2_MAP     ),
    .DATA3_MAP          ( DATA3_MAP     ),
    .DATA4_MAP          ( DATA4_MAP     ),
    .DATA5_MAP          ( DATA5_MAP     ),
    .DATA6_MAP          ( DATA6_MAP     ),
    .DATA7_MAP          ( DATA7_MAP     ),
    .DATA8_MAP          ( DATA8_MAP     ),
    .LOC_DX_BYTELANE_MAP( LOC_DX_BYTELANE_MAP ),
    .LOC_AC_BYTELANE_MAP( LOC_AC_BYTELANE_MAP ),

    .DQS_GATE_WIDTH     ( DQS_GATE_WIDTH),
    .ADDR_WIDTH         ( ADDR_WIDTH    ),
    .ROW_WIDTH          ( ROW_WIDTH     ),
    .BANK_WIDTH         ( BANK_WIDTH    ),
`ifdef DRAM_DDR4
    .BG_WIDTH           ( BG_WIDTH      ),
    .DM_DBI             ( DM_DBI        ),  //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    .ODT_WIDTH          ( ODT_WIDTH     ),
    .CK_WIDTH           ( CK_WIDTH      ),  // # of CK/CK# outputs to memory
    .CKE_WIDTH          ( CKE_WIDTH     ),  // # of cke outputs
    .CS_WIDTH           ( CS_WIDTH      ),  // # of unique CS outputs
    .DQ_WIDTH           ( DQ_WIDTH      ),
    .DQS_WIDTH          ( DQS_WIDTH     ),  // # of DQS (strobe)
    .DM_WIDTH           ( DM_WIDTH      ),
    .AC_WIDTH           ( AC_WIDTH      ),
        
    .INTER_VREF         ( INTER_VREF    ),  //"Enable", "Disable"
    .DCI                ( DCI           )   //"Enable", "Disable"
) u_ddrphy_standard (
    .rst_n                  ( phy_rstn      ),
    .phy_clk0               ( phy_clk0      ),  //bank0 clkin group
    .ddr_clk0               ( ddr_clk0      ),
    .phy_clk1               ( phy_clk1      ),  //bank1 clkin group
    .ddr_clk1               ( ddr_clk1      ),
    .phy_clk2               ( phy_clk2      ),  //bank2 clkin group
    .ddr_clk2               ( ddr_clk2      ),
    .lclk_0                 ( 4'd0          ),
    .lclk_1                 ( 4'd0          ),
    .lclk_2                 ( 4'd0          ),
    .bank31_hctrl_clk       ( bank31_hctrl_clk  ),
    .bank32_hctrl_clk       ( bank32_hctrl_clk  ),
    .bank33_hctrl_clk       ( bank33_hctrl_clk  ),
    .ctrlclk_en_upp         ( 9'h0          ),
    .ddrclk_en_upp          ( 9'h0          ),
    .rdclk_en_upp           ( 9'h0          ),
    .ctrlclk_en_low         ( 1'h0          ),
    .ddrclk_en_low          ( 1'h0          ),
    .rdclk_en_low           ( 1'h0          ),   

    //DDR bus signals
`ifdef USE_DQS_GATE
    .dqs_gate               ( dqs_gate      ),
`endif
    .ddr_addr               ( ddr_addr      ),
    .ddr_ba                 ( ddr_ba        ),
    .ddr_cke                ( ddr_cke       ),
    .ddr_odt                ( ddr_odt       ),
`ifdef USE_CS
    .ddr_cs_n               ( ddr_cs_n      ),
`endif
`ifdef USE_RESET
    .ddr_reset_n            ( ddr_reset_n   ),
`endif
    .ddr_dq                 ( ddr_dq        ),

`ifdef DRAM_DDR4
    .ddr_bg                 ( ddr_bg        ),     
    .ddr_ck_c               ( ddr_ck_c      ),
    .ddr_ck_t               ( ddr_ck_t      ),   
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm_dbi    ),
`endif
`ifdef USE_PAR_ALERT
    .ddr_parity             ( ddr_parity    ),
    .ddr_alert_n            ( ddr_alert_n   ),
`endif
    .ddr_act_n              ( ddr_act_n     ),
    .ddr_dqs_c              ( ddr_dqs_c     ),
    .ddr_dqs_t              ( ddr_dqs_t     ),  
`elsif DRAM_DDR3
    .ddr_ck_n               ( ddr_ck_n      ),
    .ddr_ck_p               ( ddr_ck_p      ), 
    .ddr_ras_n              ( ddr_ras_n     ),
    .ddr_cas_n              ( ddr_cas_n     ),
    .ddr_we_n               ( ddr_we_n      ),
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm        ),
`endif
    .ddr_dqs_n              ( ddr_dqs_n     ),
    .ddr_dqs_p              ( ddr_dqs_p     ), 
`endif

// controller signals, between hard controller and users or top-level systems
    .hctrl_ctl_idle          ( 1'b0          ),
    .hctrl_gpr0              (               ),
    .atpg_mode               ( 1'b0          ),

// DFI bus signals, between hard controller and users or top-level systems
    .dfi_reset_n             ( dfi_reset_n_local        ),
    .dfi_cke                 ( dfi_cke_local            ),
    .dfi_odt                 ( dfi_odt_local            ),
    .dfi_cs_n                ( dfi_cs_n_local           ),
    .dfi_act_n               ( dfi_act_n_local          ),
    .dfi_ras_n               ( dfi_ras_n_local          ),
    .dfi_cas_n               ( dfi_cas_n_local          ),
    .dfi_we_n                ( dfi_we_n_local           ),
    .dfi_bg                  ( dfi_bg_local             ),
    .dfi_bank                ( dfi_bank_local           ),
    .dfi_address             ( dfi_address_local        ),
    .dfi_wrdata_en           ( dfi_wrdata_en_local      ),
    .dfi_wrdata              ( dfi_wrdata_local         ),
    .dfi_wrdata_mask         ( dfi_wrdata_mask_local    ),
    .dfi_rddata_en           ( dfi_rddata_en_local      ),
    .dfi_rddata_valid        ( dfi_rddata_valid_local   ),
    .dfi_rddata              ( dfi_rddata_local         ),
    .dfi_rddata_dbi_n        ( dfi_rddata_dbi_n_local   ),
    .dfi_ctrlupd_req         ( dfi_ctrlupd_req          ),
    .dfi_ctrlupd_ack         ( dfi_ctrlupd_ack          ),
    .dfi_phyupd_req          ( dfi_phyupd_req           ),
    .dfi_phyupd_ack          ( dfi_phyupd_ack           ),
    .dfi_phyupd_type         ( dfi_phyupd_type          ),
    .dfi_init_start          ( 1'b0                     ),
    .dfi_data_byte_disable   ( 9'h00                    ),
    .dfi_dram_clk_disable    ( 2'b00                    ),
    .dfi_init_complete       (                          ),
    .dfi_parity_in           ( dfi_parity_in_local      ),
    .dfi_alert_n             ( dfi_alert_n_local        ),
    .dfi_lp_ctrl_req         ( 2'b00                    ),
    .dfi_lp_data_req         ( 2'b00                    ),
    .dfi_lp_wakeup           ( 2'b00                    ),
    .dfi_lp_ack              (                          ),

// debug bus signals, between hard controller and users or top-level systems
    .hctrl_jtag_trst_n       ( 1'b0        ),
    .hctrl_jtag_tclk         ( 1'b0        ),
    .hctrl_jtag_tdi          ( 1'b0        ),
    .hctrl_jtag_tdo          (             ),
    .hctrl_jtag_tdo_en       (             ),
    .hctrl_jtag_tms          ( 1'b0        ),

// APB bus signals
    .apb_clk                 ( apb_clk     ),
    .apb_rst_n               ( apb_rst_n   ),
    .apb_addr                ( apb_addr    ),
    .apb_enable              ( apb_enable  ),
    .apb_error               ( apb_error   ),
    .apb_rdata               ( apb_rdata   ),
    .apb_ready               ( apb_ready   ),
    .apb_sync_path_sel       ( 1'b0        ),
    .apb_wdata               ( apb_wdata   ),
    .apb_wr_rdn              ( apb_wr_rdn  ),
    .apb_sel                 ( apb_sel     )
);


`ifdef DFI_FIFO

wire ac_fifo_empty ;
ph1_logic_generic_async_fifo #(
`ifdef DRAM_DDR4
    .DATA_WIDTH ( 4+(CKE_WIDTH*4)+(ODT_WIDTH*4)+(CS_WIDTH *4)+4+4+4+4+(BG_WIDTH*4)+(BANK_WIDTH*4)+ (ADDR_WIDTH*4)+4 ),
`elsif DRAM_DDR3
    .DATA_WIDTH ( 4+(CKE_WIDTH*4)+(ODT_WIDTH*4)+(CS_WIDTH *4)+0+4+4+4+(         0)+(BANK_WIDTH*4)+ (ADDR_WIDTH*4)+0 ),
`endif
    .ADDR_WIDTH (2)
) u_dfi_fifo_ac (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk       ), 
    .clkr       ( dfi_clk_local ), 
    .we         ( 1'b1          ), 
    .re         (~ac_fifo_empty ), 
`ifdef DRAM_DDR4
    .di         ( {dfi_reset_n[3:0],            dfi_cke[CKE_WIDTH*4-1:0],         dfi_odt[ODT_WIDTH*4-1:0],           dfi_cs_n[CS_WIDTH *4-1:0],
                   dfi_act_n[3:0],              dfi_ras_n[3:0],                   dfi_cas_n[3:0],                     dfi_we_n[3:0],
                   dfi_bg[BG_WIDTH*4-1:0],      dfi_bank[BANK_WIDTH*4-1:0],       dfi_address[ADDR_WIDTH*4-1:0],       dfi_parity_in[3:0]}
                ),
    .dout       ( {dfi_reset_n_temp[3:0],       dfi_cke_temp[CKE_WIDTH*4-1:0],    dfi_odt_temp[ODT_WIDTH*4-1:0],      dfi_cs_n_temp[CS_WIDTH *4-1:0],
                   dfi_act_n_temp[3:0],         dfi_ras_n_temp[3:0],              dfi_cas_n_temp[3:0],                dfi_we_n_temp[3:0],
                   dfi_bg_temp[BG_WIDTH*4-1:0], dfi_bank_temp[BANK_WIDTH*4-1:0],  dfi_address_temp[ADDR_WIDTH*4-1:0],  dfi_parity_in_temp[3:0]}
                ),
`elsif DRAM_DDR3
    .di         ( {dfi_reset_n[3:0],                dfi_cke[CKE_WIDTH*4-1:0],         dfi_odt[ODT_WIDTH*4-1:0],           dfi_cs_n[CS_WIDTH *4-1:0],
                   dfi_ras_n[3:0],                  dfi_cas_n[3:0],                   dfi_we_n[3:0],
                   dfi_bank[BANK_WIDTH*4-1:0],      dfi_address[ADDR_WIDTH*4-1:0]      }
                ),
    .dout       ( {dfi_reset_n_temp[3:0],           dfi_cke_temp[CKE_WIDTH*4-1:0],    dfi_odt_temp[ODT_WIDTH*4-1:0],      dfi_cs_n_temp[CS_WIDTH *4-1:0],
                   dfi_ras_n_temp[3:0],             dfi_cas_n_temp[3:0],              dfi_we_n_temp[3:0],
                   dfi_bank_temp[BANK_WIDTH*4-1:0], dfi_address_temp[ADDR_WIDTH*4-1:0] }
                ),
`endif
    .full_flag  (               ), 
    .empty_flag ( ac_fifo_empty )
);
    
wire wr_fifo_empty ;
ph1_logic_generic_async_fifo #(
   .DATA_WIDTH ( DQS_WIDTH*4 + DQ_WIDTH*8 + DM_WIDTH*8 ),
   .ADDR_WIDTH ( 2                                     )
) u_dfi_fifo_wr (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk       ), 
    .clkr       ( dfi_clk_local ), 
    .we         ( 1'b1          ), 
    .re         (~wr_fifo_empty ), 
    .di         ( {dfi_wrdata_en     [DQS_WIDTH*4-1:0], dfi_wrdata     [DQ_WIDTH*8-1:0], dfi_wrdata_mask     [DM_WIDTH*8-1:0]} ),
    .dout       ( {dfi_wrdata_en_temp[DQS_WIDTH*4-1:0], dfi_wrdata_temp[DQ_WIDTH*8-1:0], dfi_wrdata_mask_temp[DM_WIDTH*8-1:0]} ),
    .full_flag  (               ), 
    .empty_flag ( wr_fifo_empty )
);

wire rden_fifo_empty ;
ph1_logic_generic_async_fifo #(
    .DATA_WIDTH ( DQS_WIDTH*4 ),
    .ADDR_WIDTH ( 2           )
) u_dfi_fifo_rden (
    .rrst       (~phy_rstn        ), 
    .wrst       (~phy_rstn        ), 
    .clkw       ( dfi_clk         ), 
    .clkr       ( dfi_clk_local   ), 
    .we         ( 1'b1            ), 
    .re         (~rden_fifo_empty ), 
    .di         ( dfi_rddata_en     [DQS_WIDTH*4-1:0] ),
    .dout       ( dfi_rddata_en_temp[DQS_WIDTH*4-1:0] ),
    .full_flag  (                 ), 
    .empty_flag ( rden_fifo_empty )
);
    
wire rd_fifo_empty ;
ph1_logic_generic_async_fifo #(
    .DATA_WIDTH ( DQS_WIDTH*4 + DQ_WIDTH*8 + DM_WIDTH*8 ),
    .ADDR_WIDTH ( 2                                     )
) u_dfi_fifo_rd (
    .rrst       (~phy_rstn      ), 
    .wrst       (~phy_rstn      ), 
    .clkw       ( dfi_clk_local ), 
    .clkr       ( dfi_clk       ), 
    .we         ( 1'b1          ), 
    .re         (~rd_fifo_empty ), 
    .di         ( {dfi_rddata_valid_temp[DQS_WIDTH*4-1:0], dfi_rddata_temp[DQ_WIDTH*8-1:0], dfi_rddata_dbi_n_temp[DM_WIDTH*8-1:0]} ),
    .dout       ( {dfi_rddata_valid     [DQS_WIDTH*4-1:0], dfi_rddata     [DQ_WIDTH*8-1:0], dfi_rddata_dbi_n     [DM_WIDTH*8-1:0]} ),
    .full_flag  (               ), 
    .empty_flag ( rd_fifo_empty )
);

`else // `ifndef DFI_FIFO

reg  [              3:0]  dfi_reset_n_r;
reg  [  CKE_WIDTH*4-1:0]  dfi_cke_r;
reg  [  ODT_WIDTH*4-1:0]  dfi_odt_r;
reg  [   CS_WIDTH*4-1:0]  dfi_cs_n_r;
reg  [              3:0]  dfi_ras_n_r;
reg  [              3:0]  dfi_cas_n_r;
reg  [              3:0]  dfi_we_n_r;
`ifdef DRAM_DDR4
reg  [              3:0]  dfi_act_n_r;
reg  [   BG_WIDTH*4-1:0]  dfi_bg_r;
reg  [              3:0]  dfi_alert_n_r;
reg  [              3:0]  dfi_parity_in_r;
`endif
reg  [ BANK_WIDTH*4-1:0]  dfi_bank_r;
reg  [ ADDR_WIDTH*4-1:0]  dfi_address_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_wrdata_en_r;
reg  [   DQ_WIDTH*8-1:0]  dfi_wrdata_r;
reg  [   DM_WIDTH*8-1:0]  dfi_wrdata_mask_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_rddata_en_r;
reg  [  DQS_WIDTH*4-1:0]  dfi_rddata_valid_r;
reg  [   DQ_WIDTH*8-1:0]  dfi_rddata_r;
reg  [   DM_WIDTH*8-1:0]  dfi_rddata_dbi_n_r;

generate
if (DFI_PIPELINE_STAGE == 2) begin : pipeline_2
// first stage dfi pipeline
always @ (posedge dfi_clk)
begin
    dfi_reset_n_r          <= dfi_reset_n        ;
    dfi_cke_r              <= dfi_cke            ;
    dfi_odt_r              <= dfi_odt            ;
    dfi_cs_n_r             <= dfi_cs_n           ;
    dfi_ras_n_r            <= dfi_ras_n          ;
    dfi_cas_n_r            <= dfi_cas_n          ;
    dfi_we_n_r             <= dfi_we_n           ;
`ifdef DRAM_DDR4
    dfi_act_n_r            <= dfi_act_n          ;
    dfi_bg_r               <= dfi_bg             ;
`endif
    dfi_bank_r             <= dfi_bank           ;
    dfi_address_r          <= dfi_address        ;
    dfi_wrdata_en_r        <= dfi_wrdata_en      ;
    dfi_wrdata_r           <= dfi_wrdata         ;
    dfi_wrdata_mask_r      <= dfi_wrdata_mask    ;
    dfi_rddata_en_r        <= dfi_rddata_en      ;

    dfi_rddata_valid       <= dfi_rddata_valid_r ;
    dfi_rddata             <= dfi_rddata_r       ;
    dfi_rddata_dbi_n       <= dfi_rddata_dbi_n_r ;

`ifdef USE_PAR_ALERT
    dfi_alert_n            <= dfi_alert_n_r      ;
`endif
end

// second stage dfi pipeline
always @ (posedge dfi_clk_local)
begin
    dfi_reset_n_temp          <= dfi_reset_n_r         ;
    dfi_cke_temp              <= dfi_cke_r             ;
    dfi_odt_temp              <= dfi_odt_r             ;
    dfi_cs_n_temp             <= dfi_cs_n_r            ;
    dfi_ras_n_temp            <= dfi_ras_n_r           ;
    dfi_cas_n_temp            <= dfi_cas_n_r           ;
    dfi_we_n_temp             <= dfi_we_n_r            ;
`ifdef DRAM_DDR4
    dfi_act_n_temp            <= dfi_act_n_r           ;
    dfi_bg_temp               <= dfi_bg_r              ;
`endif
    dfi_bank_temp             <= dfi_bank_r            ;
    dfi_address_temp          <= dfi_address_r         ;
    dfi_wrdata_en_temp        <= dfi_wrdata_en_r       ;
    dfi_wrdata_temp           <= dfi_wrdata_r          ;
    dfi_wrdata_mask_temp      <= dfi_wrdata_mask_r     ;
    dfi_rddata_en_temp        <= dfi_rddata_en_r       ;
    dfi_rddata_valid_r        <= dfi_rddata_valid_temp ;
    dfi_rddata_r              <= dfi_rddata_temp       ;
    dfi_rddata_dbi_n_r        <= dfi_rddata_dbi_n_temp ;

`ifdef USE_PAR_ALERT
    dfi_alert_n_r             <= dfi_alert_n_temp      ;
`endif
end

end else begin : pipeline_1// if (DFI_PIPELINE_STAGE == 1)

always @ (posedge dfi_clk_local)
begin
    dfi_reset_n_temp          <= dfi_reset_n           ;
    dfi_cke_temp              <= dfi_cke               ;
    dfi_odt_temp              <= dfi_odt               ;
    dfi_cs_n_temp             <= dfi_cs_n              ;
    dfi_ras_n_temp            <= dfi_ras_n             ;
    dfi_cas_n_temp            <= dfi_cas_n             ;
    dfi_we_n_temp             <= dfi_we_n              ;
`ifdef DRAM_DDR4
    dfi_act_n_temp            <= dfi_act_n             ;
    dfi_bg_temp               <= dfi_bg                ;
`endif
    dfi_bank_temp             <= dfi_bank              ;
    dfi_address_temp          <= dfi_address           ;
    dfi_wrdata_en_temp        <= dfi_wrdata_en         ;
    dfi_wrdata_temp           <= dfi_wrdata            ;
    dfi_wrdata_mask_temp      <= dfi_wrdata_mask       ;
    dfi_rddata_en_temp        <= dfi_rddata_en         ;
    dfi_rddata_valid          <= dfi_rddata_valid_temp ;
    dfi_rddata                <= dfi_rddata_temp       ;
    dfi_rddata_dbi_n          <= dfi_rddata_dbi_n_temp ;

`ifdef USE_PAR_ALERT
    dfi_alert_n               <= dfi_alert_n_temp      ;
`endif
end

end // end of PIPELINE STAGE
endgenerate

`endif // end of DFI_FIFO


`ifdef PH1_DDR_SIM
wire        apb_wr_flag, apb_rd_flag ;
reg  [31:0] user_led_tmp ;

assign apb_wr_flag = apb_wr_rdn ? (apb_sel & apb_enable & apb_ready) : 1'b0;
assign apb_rd_flag = apb_wr_rdn ? 1'b0 : (apb_sel & apb_enable & apb_ready);

integer apb_fd        ;
reg     apb_fd_opened ;

initial begin
    apb_fd_opened = 0;
    apb_fd = $fopen("ddr_debug_info.log","a");
    apb_fd_opened = 1;

    wait ( ddr_init_cal_done );

    $display (        "DDR PHY Initialization and Calibration Finished!");
    $fdisplay(apb_fd, "DDR PHY Initialization and Calibration Finished!");

    apb_fd_opened = 0;
    $fclose(apb_fd);
end

always @ (posedge apb_clk)
begin
    user_led_tmp <= user_led ;
end

always @ (posedge apb_clk)
begin
    if (apb_fd_opened == 1) begin
       if (apb_wr_flag)
           $fdisplay(apb_fd, "write : 0x%08x = 0x%08x", apb_addr, apb_wdata );
       else if (apb_rd_flag)
           $fdisplay(apb_fd, "read  : 0x%08x = 0x%08x", apb_addr, apb_rdata );
       if (user_led != user_led_tmp)
           $fdisplay(apb_fd, "********** step : %x **********", user_led);
    end
end
`endif // end of PH1_DDR_SIM


endmodule


`timescale 1 ps / 1 fs

module ph1_logic_clk_management #
(
	parameter BYTE_LANE_0	= 4'b0000,   // [3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
	parameter BYTE_LANE_1	= 4'b1111,
	parameter BYTE_LANE_2	= 4'b1110,
    parameter USER_CLK_EN   = 4'b0001
)(
    input                   sys_clk,
    input                   sys_rstn,
    output                  ddr_clk0, //high speed clock, serial data  clock
    output                  phy_clk0, //low speed  clock, parallel data  clock
    output                  ddr_clk1,
    output                  phy_clk1,
    output                  ddr_clk2,
    output                  phy_clk2,
    output                  apb_clk,
    output                  hctrl_clk       ,
    output                  bank31_hctrl_clk,
    output                  bank32_hctrl_clk,
    output                  bank33_hctrl_clk,

`ifdef USE_CLK1 
    output          user_clk0,
`endif
`ifdef USE_CLK2
    output          user_clk1,
`endif  
`ifdef USE_CLK3 
    output          user_clk2,
`endif  
`ifdef USE_CLK4
    output          user_clk3,
`endif

    output          pll_locked,
    output          pll_locked_to_phy
);

//--------------internal signals-----------------------
wire            pll0_ddr_clk;
wire            pll0_phy_clk;
wire            clkc0;
wire            clkc1;
wire            clkc2;

wire            hctrl_clk_int  ; // synthesis keep
wire            hctrl_clk_bufg ; // synthesis keep

ph1_logic_pll0 u_pll0 (
    .refclk                 ( sys_clk           ),
    .reset                  (~sys_rstn          ),
    .clk0_out               ( clkc0             ),
    .clk1_out               ( clkc1             ),
    .clk2_out               ( clkc2             ),
    .clk3_out               ( apb_clk           ),
    .lock                   ( pll_locked_to_phy )
);


ph1_logic_pll1 u_pll1 (
    .refclk                 ( clkc0             ),
    .clk0_out               ( hctrl_clk_int     ),
    .clk1_out               ( user_clk0         ),
    .clk2_out               ( user_clk1         ),
    .clk3_out               ( user_clk2         ),
    .clk4_out               ( user_clk3         ),
    .reset                  (~pll_locked_to_phy ),

`ifdef USE_CLK1
    .clk1_en                ( USER_CLK_EN[0]    ),
`endif
`ifdef USE_CLK2
    .clk2_en                ( USER_CLK_EN[1]    ),
`endif
`ifdef USE_CLK3
    .clk3_en                ( USER_CLK_EN[2]    ),
`endif
`ifdef USE_CLK4
    .clk4_en                ( USER_CLK_EN[3]    ),
`endif

    .lock                   ( pll_locked        )
);

PH1_PHY_HP_MLCLK #(
    .MODE ("HPS")
) u_mlclk0(
    .ce             ( 1'b1         ),
    .clkin          ( clkc1        ),
    .clkout         ( pll0_phy_clk )
);
PH1_PHY_HP_MLCLK #(
    .MODE ("HPS")
) u_mlclk1(
    .ce             ( 1'b1         ),
    .clkin          ( clkc2        ),
    .clkout         ( pll0_ddr_clk )
);
PH1_PHY_HP_IOCLK #( 
    .MODE ("HPS")
) u_ioclk0 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk0     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk1 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk0    )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk2 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk1     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk3 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk1     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk4 (
    .clkin         ( pll0_phy_clk ),
    .clkout        ( phy_clk2     )
);
PH1_PHY_HP_IOCLK #(
    .MODE ("HPS")
) u_ioclk5 (
    .clkin         ( pll0_ddr_clk ),
    .clkout        ( ddr_clk2     )
);

PH1_LOGIC_BUFG bufg_hctrlclk( .i(hctrl_clk_int), .o(hctrl_clk_bufg) );

assign hctrl_clk = hctrl_clk_bufg;

generate
if( BYTE_LANE_0 != 0 ) begin: gen_bank33_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (3) 
    ) u_bank33_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank33_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank33_hctrl_clk_0
    assign bank33_hctrl_clk = 0;
end

if( BYTE_LANE_1 != 0 ) begin: gen_bank32_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (2) 
    ) u_bank32_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank32_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank32_hctrl_clk_0
    assign bank32_hctrl_clk = 0;
end

if( BYTE_LANE_2 != 0 ) begin: gen_bank31_hctrl_clk
    PH1_PHY_SCLK_V2 # ( 
        .DELAY (1) 
    ) u_bank31_hctrl_clk (
        .ce     ( 1'b1             ),
        .clkin  ( hctrl_clk_bufg   ),
        .clkout ( bank31_hctrl_clk )
    )/* synthesis keep */;
end
else begin: gen_bank31_hctrl_clk_0
    assign bank31_hctrl_clk = 0;
end
endgenerate

endmodule

///////////////////////////////////////////////////////////////////////////////
//	Input frequency:                25.000000MHz
//	Clock multiplication factor: 64
//	Clock division factor:       1
//	Clock information:
//		Clock name	| Frequency 	| Phase shift
//		C0        	| 133.333333MHZ	| 18.7500 DEG  
//		C1        	| 133.333333MHZ	| 0.0000  DEG  
//		C2        	| 533.333333MHZ	| 0.0000  DEG  
//		C3        	| 50.000000 MHZ	| 0.0000  DEG  
///////////////////////////////////////////////////////////////////////////////
`timescale 1 ns / 100 fs

module ph1_logic_pll0 (
  refclk,
  reset,
  lock,
  clk0_out,
  clk1_out,
  clk2_out,
  clk3_out,
  clkb1_out,
  clkb2_out 
);

  input refclk;
  input reset;
  output lock;
  output clk0_out;
  output clk1_out;
  output clk2_out;
  output clk3_out;
  output clkb1_out;
  output clkb2_out;


  PH1_PHY_PLL #(
    .DYN_PHASE_PATH_SEL("DISABLE"),
    .DYN_FPHASE_EN("DISABLE"),
    .MPHASE_ENABLE("ENABLE"),
    .FIN("25.000000"),
    .FEEDBK_MODE("NOCOMP"),
    .FBKCLK("VCO_PHASE0"),
    .FBKCLK_INT("VCO_PHASE0"),
    .PLL_FEED_TYPE("INTERNAL"),
    .PLL_USR_RST("ENABLE"),
    .GMC_GAIN(0),
    .ICP_CUR(5),
    .LPF_CAP(2),
    .LPF_RES(4),
    .REFCLK_DIV(1),
    .FBCLK_DIV(64),
    .CLKC0_ENABLE("ENABLE"),
    .CLKC0_DIV(12),
    .CLKC0_CPHASE(11),
    .CLKC0_FPHASE(5),
    .CLKC0_FPHASE_RSTSEL(1),
    .CLKC0_DUTY_INT(6),
    .CLKC0_DUTY50("ENABLE"),
    .CLKC1_ENABLE("ENABLE"),
    .CLKC1_DIV(12),
    .CLKC1_CPHASE(11),
    .CLKC1_FPHASE(0),
    .CLKC1_FPHASE_RSTSEL(0),
    .CLKC1_DUTY_INT(6),
    .CLKC1_DUTY50("ENABLE"),
    .CLKC2_ENABLE("ENABLE"),
    .CLKC2_DIV(3),
    .CLKC2_CPHASE(2),
    .CLKC2_FPHASE(0),
    .CLKC2_FPHASE_RSTSEL(0),
    .CLKC2_DUTY_INT(2),
    .CLKC2_DUTY50("ENABLE"),
    .CLKC3_ENABLE("ENABLE"),
    .CLKC3_DIV(32),
    .CLKC3_CPHASE(31),
    .CLKC3_FPHASE(0),
    .CLKC3_FPHASE_RSTSEL(0),
    .CLKC3_DUTY_INT(16),
    .CLKC3_DUTY50("ENABLE"),
    .INTPI(2),
    .HIGH_SPEED_EN("DISABLE"),
    .SSC_ENABLE("DISABLE"),
    .SSC_MODE("CENTER"),
    .SSC_AMP(0.0000),
    .SSC_FREQ_DIV(0),
    .SSC_RNGE(0),
    .FRAC_ENABLE("DISABLE"),
    .DITHER_ENABLE("DISABLE"),
    .SDM_FRAC(0) 
  ) pll_inst (
    .refclk(refclk),
    .pllreset(reset),
    .lock(lock),
    .pllpd(1'b0),
    .refclk_rst(1'b0),
    .wakeup(1'b0),
    .psclk(1'b0),
    .psdown(1'b0),
    .psstep(1'b0),
    .psclksel(3'b000),
    .psdone(ph1_logic_pll0_open0),
    .cps_step(2'b00),
    .drp_clk(1'b0),
    .drp_rstn(1'b1),
    .drp_sel(1'b0),
    .drp_rd(1'b0),
    .drp_wr(1'b0),
    .drp_addr(8'b00000000),
    .drp_wdata(8'b00000000),
    .drp_err(ph1_logic_pll0_open1),
    .drp_rdy(ph1_logic_pll0_open2),
    .drp_rdata({ph1_logic_pll0_open10, ph1_logic_pll0_open9, ph1_logic_pll0_open8, ph1_logic_pll0_open7, ph1_logic_pll0_open6, ph1_logic_pll0_open5, ph1_logic_pll0_open4, ph1_logic_pll0_open3}),
    .fbclk(1'b0),
    .clkc({ph1_logic_pll0_open19, ph1_logic_pll0_open17, ph1_logic_pll0_open15, ph1_logic_pll0_open13, clk3_out, clk2_out, clk1_out, clk0_out}),
    .clkcb({ph1_logic_pll0_open20, ph1_logic_pll0_open18, ph1_logic_pll0_open16, ph1_logic_pll0_open14, ph1_logic_pll0_open12, clkb2_out, clkb1_out, ph1_logic_pll0_open11}),
    .clkc_en({8'b00001111}),
    .clkc_rst(2'b00),
    .ext_freq_mod_clk(1'b0),
    .ext_freq_mod_en(1'b0),
    .ext_freq_mod_val(17'b00000000000000000),
    .ssc_en(1'b0) 
  );

endmodule

///////////////////////////////////////////////////////////////////////////////
//	Input frequency:                133.250000MHz
//	Clock multiplication factor: 1
//	Clock division factor:       1
//	Clock information:
//		Clock name	| Frequency 	| Phase shift
//		C0        	| 133.250000MHZ	| 0.0000  DEG  
//		C1        	| 99.937500 MHZ	| 0.0000  DEG  
//		C2        	| 99.937500 MHZ	| 0.0000  DEG  
//		C3        	| 99.937500 MHZ	| 0.0000  DEG  
//		C4        	| 99.937500 MHZ	| 0.0000  DEG  
///////////////////////////////////////////////////////////////////////////////
`timescale 1 ns / 100 fs

module ph1_logic_pll1 (
  refclk,
  reset,
  clk1_en,
  clk2_en,
  clk3_en,
  clk4_en,
  lock,
  clk0_out,
  clk1_out,
  clk2_out,
  clk3_out,
  clk4_out 
);

  input refclk;
  input reset;
  input clk1_en;
  input clk2_en;
  input clk3_en;
  input clk4_en;
  output lock;
  output clk0_out;
  output clk1_out;
  output clk2_out;
  output clk3_out;
  output clk4_out;

  wire clk0_buf;

  PH1_LOGIC_BUFG bufg_feedback (
    .i(clk0_buf),
    .o(clk0_out) 
  );

  PH1_PHY_PLL #(
    .DYN_PHASE_PATH_SEL("DISABLE"),
    .DYN_FPHASE_EN("DISABLE"),
    .MPHASE_ENABLE("DISABLE"),
    .FIN("133.250000"),
    .FEEDBK_MODE("NORMAL"),
    .FBKCLK("CLKC0_EXT"),
    .PLL_FEED_TYPE("EXTERNAL"),
    .PLL_USR_RST("ENABLE"),
    .GMC_GAIN(2),
    .ICP_CUR(5),
    .LPF_CAP(2),
    .LPF_RES(2),
    .REFCLK_DIV(1),
    .FBCLK_DIV(1),
    .CLKC0_ENABLE("ENABLE"),
    .CLKC0_DIV(9),
    .CLKC0_CPHASE(8),
    .CLKC0_FPHASE(0),
    .CLKC0_FPHASE_RSTSEL(0),
    .CLKC0_DUTY_INT(5),
    .CLKC0_DUTY50("ENABLE"),
    .CLKC1_ENABLE("ENABLE"),
    .CLKC1_DIV(12),
    .CLKC1_CPHASE(11),
    .CLKC1_FPHASE(0),
    .CLKC1_FPHASE_RSTSEL(0),
    .CLKC1_DUTY_INT(6),
    .CLKC1_DUTY50("ENABLE"),
    .CLKC2_ENABLE("ENABLE"),
    .CLKC2_DIV(12),
    .CLKC2_CPHASE(11),
    .CLKC2_FPHASE(0),
    .CLKC2_FPHASE_RSTSEL(0),
    .CLKC2_DUTY_INT(6),
    .CLKC2_DUTY50("ENABLE"),
    .CLKC3_ENABLE("ENABLE"),
    .CLKC3_DIV(12),
    .CLKC3_CPHASE(11),
    .CLKC3_FPHASE(0),
    .CLKC3_FPHASE_RSTSEL(0),
    .CLKC3_DUTY_INT(6),
    .CLKC3_DUTY50("ENABLE"),
    .CLKC4_ENABLE("ENABLE"),
    .CLKC4_DIV(12),
    .CLKC4_CPHASE(11),
    .CLKC4_FPHASE(0),
    .CLKC4_FPHASE_RSTSEL(0),
    .CLKC4_DUTY_INT(6),
    .CLKC4_DUTY50("ENABLE"),
    .INTPI(1),
    .HIGH_SPEED_EN("DISABLE"),
    .SSC_ENABLE("DISABLE"),
    .SSC_MODE("CENTER"),
    .SSC_AMP(0.0000),
    .SSC_FREQ_DIV(0),
    .SSC_RNGE(0),
    .FRAC_ENABLE("DISABLE"),
    .DITHER_ENABLE("DISABLE"),
    .SDM_FRAC(0) 
  ) pll_inst (
    .refclk(refclk),
    .pllreset(reset),
    .lock(lock),
    .pllpd(1'b0),
    .refclk_rst(1'b0),
    .wakeup(1'b0),
    .psclk(1'b0),
    .psdown(1'b0),
    .psstep(1'b0),
    .psclksel(3'b000),
    .psdone(ph1_logic_pll1_open0),
    .cps_step(2'b00),
    .drp_clk(1'b0),
    .drp_rstn(1'b1),
    .drp_sel(1'b0),
    .drp_rd(1'b0),
    .drp_wr(1'b0),
    .drp_addr(8'b00000000),
    .drp_wdata(8'b00000000),
    .drp_err(ph1_logic_pll1_open1),
    .drp_rdy(ph1_logic_pll1_open2),
    .drp_rdata({ph1_logic_pll1_open10, ph1_logic_pll1_open9, ph1_logic_pll1_open8, ph1_logic_pll1_open7, ph1_logic_pll1_open6, ph1_logic_pll1_open5, ph1_logic_pll1_open4, ph1_logic_pll1_open3}),
    .fbclk(clk0_out),
    .clkc({ph1_logic_pll1_open20, ph1_logic_pll1_open18, ph1_logic_pll1_open16, clk4_out, clk3_out, clk2_out, clk1_out, clk0_buf}),
    .clkcb({ph1_logic_pll1_open21, ph1_logic_pll1_open19, ph1_logic_pll1_open17, ph1_logic_pll1_open15, ph1_logic_pll1_open14, ph1_logic_pll1_open13, ph1_logic_pll1_open12, ph1_logic_pll1_open11}),
    .clkc_en({3'b000, clk4_en, clk3_en, clk2_en, clk1_en, 1'b1}),
    .clkc_rst(2'b00),
    .ext_freq_mod_clk(1'b0),
    .ext_freq_mod_en(1'b0),
    .ext_freq_mod_val(17'b00000000000000000),
    .ssc_en(1'b0) 
  );

endmodule


`timescale 1ps/1ps

module ph1_logic_ddrphy_standard #(
    parameter TCK                   = 1250,         // memory tCK parameter, clock period in ps
    parameter NCK_PER_CLK           = 4,
    parameter DRAM_TYPE             = "DDR3",       // "DDR3","DDR4"
    parameter DQS_GATE              = "External",   // Internal, External
    parameter CTRL_INDEX            = 0,            // multi-controller, 0: ctrl0; 1: ctrl1.
//bank and pad position parameters about ddr bus
    parameter BYTE_LANE_0           = 4'b1111,      // [3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    parameter BYTE_LANE_1           = 4'b1111,
    parameter BYTE_LANE_2           = 4'b1111,
    parameter DATA_CTRL_0           = 4'b1000,      // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    parameter DATA_CTRL_1           = 4'b1111,
    parameter DATA_CTRL_2           = 4'b1111,
    parameter ADDR_MAP              = 215'h000_018_016_017_014_015_012_013_010_011_008_009_006_007_002_003_000_001,
    parameter CK_MAP                = 48'h004_005,
    parameter BANK_MAP              = 60'h000_000_000_025_024,
    parameter CKE_MAP               = 24'h020,
    parameter ODT_MAP               = 24'h000_023,
    parameter CS_MAP                = 24'h000_022,

`ifdef DRAM_DDR4
    parameter BANK_GROUP_MAP        = 24'h020_019,
    parameter PARITY_MAP            = 12'h028,
    parameter ACT_MAP               = 12'h026,
    parameter DM_DBI_MAP            = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
    parameter ALERT_MAP             = 12'h029, 
`elsif DRAM_DDR3
    parameter RAS_MAP               = 12'h000,
    parameter CAS_MAP               = 12'h000,
    parameter WE_MAP                = 12'h000,
    parameter DM_MAP                = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
`endif

    parameter RESET_MAP             = 12'h027,
    parameter DQS_GATE_MAP          = 108'h101_214_201_224_23b_014_03b_001_02a,
    parameter DQS_BYTE_MAP          = 215'h235_234_225_224_215_214_205_204_135_134_125_124_115_114_105_104_035_034,
    parameter DATA0_MAP             = 96'h039_038_037_036_033_032_031_030,
    parameter DATA1_MAP             = 96'h109_108_107_106_103_102_101_100,
    parameter DATA2_MAP             = 96'h119_118_117_116_113_112_111_110,
    parameter DATA3_MAP             = 96'h129_128_127_126_123_122_121_120,
    parameter DATA4_MAP             = 96'h139_138_137_136_133_132_131_130,
    parameter DATA5_MAP             = 96'h209_208_207_206_203_202_201_200,
    parameter DATA6_MAP             = 96'h219_218_217_216_213_212_211_210,
    parameter DATA7_MAP             = 96'h229_228_227_226_223_222_221_220,
    parameter DATA8_MAP             = 96'h239_238_237_236_233_232_231_230,
    parameter LOC_DX_BYTELANE_MAP   = 72'h23_22_21_20_13_12_11_10_03,
    parameter LOC_AC_BYTELANE_MAP   = 32'h00_02_01_00,

    parameter DQS_GATE_WIDTH        = 9,
    parameter ADDR_WIDTH            = 17,       //DRAM address bus width
    parameter ROW_WIDTH             = 17,       //DRAM address bus width
    parameter BANK_WIDTH            = 2,
`ifdef DRAM_DDR4
    parameter BG_WIDTH              = 2,
    parameter DM_DBI                = "NONE",   //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    parameter ODT_WIDTH             = 1,
    parameter CK_WIDTH              = 1,        // # of CK/CK# outputs to memory
    parameter CKE_WIDTH             = 1,        // # of cke outputs
    parameter CS_WIDTH              = 1,        // # of unique CS outputs
    parameter DQ_WIDTH              = 72,
    parameter DQS_WIDTH             = 9,        // # of DQS (strobe)
    parameter DM_WIDTH              = 9,

    parameter AC_WIDTH              = 4,
//Memory Option
    parameter INTER_VREF            = "ENABLE", //"ENABLE", "DISABLE"
    parameter DCI                   = "ENABLE"  // "ENABLE", "DISABLE"
)(
    input               rst_n,
    input               phy_clk0,           //bank0 clkin group
    input               ddr_clk0,
    input               phy_clk1,           //bank1 clkin group
    input               ddr_clk1,
    input               phy_clk2,           //bank2 clkin group
    input               ddr_clk2,
    input               lclk_0,
    input               lclk_1,
    input               lclk_2,
    input               bank31_hctrl_clk,
    input               bank32_hctrl_clk,
    input               bank33_hctrl_clk,

    input[8:0]          ctrlclk_en_upp,
    input[8:0]          ddrclk_en_upp,
    input[8:0]          rdclk_en_upp,
    input               ctrlclk_en_low,
    input               ddrclk_en_low,
    input               rdclk_en_low,

// DDR bus signals
`ifdef USE_DQS_GATE
    inout  [DQS_GATE_WIDTH-1:0]    dqs_gate,
`endif
output     [    ADDR_WIDTH-1:0]    ddr_addr,
output     [    BANK_WIDTH-1:0]    ddr_ba,
`ifdef USE_CS 
    output [      CS_WIDTH-1:0]    ddr_cs_n,
`endif
    output [     ODT_WIDTH-1:0]    ddr_odt,
`ifdef USE_DM
    inout  [      DM_WIDTH-1:0]    ddr_dm,
`endif
output     [     CKE_WIDTH-1:0]    ddr_cke,
`ifdef USE_RESET
    output                         ddr_reset_n,
`endif
    inout  [      DQ_WIDTH-1:0]    ddr_dq,

`ifdef DRAM_DDR4
    output [      BG_WIDTH-1:0]    ddr_bg,
    output [      CK_WIDTH-1:0]    ddr_ck_c,
    output [      CK_WIDTH-1:0]    ddr_ck_t,
    output                         ddr_act_n,
`ifdef USE_PAR_ALERT
    output                         ddr_parity,
    input                          ddr_alert_n,
`endif
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_c,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_t,
`elsif DRAM_DDR3
    output [      CK_WIDTH-1:0]    ddr_ck_n,
    output [      CK_WIDTH-1:0]    ddr_ck_p,
    output                         ddr_ras_n,
    output                         ddr_cas_n,
    output                         ddr_we_n,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_n,
    inout  [     DQS_WIDTH-1:0]    ddr_dqs_p,
`endif

// controller signals, between hard controller and users or top-level systems
    input                hctrl_ctl_idle,
    output [ 31:0 ]      hctrl_gpr0,
    input                atpg_mode,

// DFI bus signals, between hard controller and users or top-level systems
    input  [  3:0]       dfi_reset_n,
    input  [  7:0]       dfi_cke,
    input  [  7:0]       dfi_odt,
    input  [  7:0]       dfi_cs_n,
    input  [  3:0]       dfi_act_n,
    input  [  3:0]       dfi_ras_n,
    input  [  3:0]       dfi_cas_n,
    input  [  3:0]       dfi_we_n,
    input  [  7:0]       dfi_bg,
    input  [ 11:0]       dfi_bank,
    input  [ 71:0]       dfi_address,
    input  [ 35:0]       dfi_wrdata_en,
    input  [575:0]       dfi_wrdata,
    input  [ 71:0]       dfi_wrdata_mask,
    input  [ 35:0]       dfi_rddata_en,
    output [ 35:0]       dfi_rddata_valid,
    output [575:0]       dfi_rddata,
    output [ 71:0]       dfi_rddata_dbi_n,
    input  [  1:0]       dfi_ctrlupd_req,
    output [  1:0]       dfi_ctrlupd_ack,
    output [  1:0]       dfi_phyupd_req,
    input  [  1:0]       dfi_phyupd_ack,
    output [  3:0]       dfi_phyupd_type,
    input                dfi_init_start,
    input  [  8:0]       dfi_data_byte_disable,
    input  [  1:0]       dfi_dram_clk_disable,
    output               dfi_init_complete,
    input  [  3:0]       dfi_parity_in,
    output [  3:0]       dfi_alert_n,
    input  [  1:0]       dfi_lp_ctrl_req,
    input  [  1:0]       dfi_lp_data_req,
    input  [  7:0]       dfi_lp_wakeup,
    output [  1:0]       dfi_lp_ack,

// debug bus signals, between hard controller and users or top-level systems
    input                hctrl_jtag_trst_n,
    input                hctrl_jtag_tclk,
    input                hctrl_jtag_tdi,
    output               hctrl_jtag_tdo,
    output               hctrl_jtag_tdo_en,
    input                hctrl_jtag_tms,

// APB bus signals
    input                apb_clk,
    input                apb_rst_n,
    input  [ 15:0]       apb_addr,
    input                apb_enable,
    output               apb_error,
    output [ 31:0]       apb_rdata,
    output               apb_ready,
    input                apb_sync_path_sel,
    input  [ 31:0]       apb_wdata,
    input                apb_wr_rdn,
    input                apb_sel,

    output [ 13:0]       zqcal_debug_data0,
    output [ 13:0]       zqcal_debug_data1,
    output [ 13:0]       zqcal_debug_data2,
    output [ 63:0]       dqsgr_debug_data0,
    output [ 63:0]       dqsgr_debug_data1,
    output [ 63:0]       dqsgr_debug_data2
);

// APB bus signals, between hard controller and users or top-level systems
wire                hctrl_apb_clk;
wire                hctrl_apb_rst_n;
wire                hctrl_apb_sel;
wire                hctrl_apb_wr_rdn;
wire                hctrl_apb_enable;
wire [ 9:0]         hctrl_apb_addr;
wire [31:0]         hctrl_apb_wdata;
wire [31:0]         hctrl_apb_rdata;
wire                hctrl_apb_rdy;
wire                hctrl_apb_error;

wire                phy_apb_clk;
wire                phy_apb_rst_n;
wire [15:0]         phy_apb_addr;
wire                phy_apb_enable;
wire                phy_apb_error;
wire [31:0]         phy_apb_rdata;
wire                phy_apb_ready;
wire [31:0]         phy_apb_wdata;
wire                phy_apb_wr_rdn;
wire                phy_apb_sel;

wire                gate_apb_clk;
wire                gate_apb_rst_n;
wire [15:0]         gate_apb_addr;
wire                gate_apb_enable;
wire                gate_apb_error;
wire [31:0]         gate_apb_rdata;
wire                gate_apb_ready;
wire [31:0]         gate_apb_wdata;
wire                gate_apb_wr_rdn;
wire                gate_apb_sel;

wire [ 8:0]         ctrlclk_en_gate_upp;
wire [ 8:0]         rdclk_en_gate_upp;
wire [ 8:0]         ddrclk_en_gate_upp;
wire                ctrlclk_en_gate_low;
wire                rdclk_en_gate_low;
wire                ddrclk_en_gate_low;
wire [ 8:0]         rstn_upp;
wire                rstn_low;

wire [167:0]        zqcal_code_o;
wire [167:0]        zqcal_code_i;
wire [ 31:0]        dqs_rd_gate_status_p0;  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                            //clock domain: phy_clk, parallel signals
wire [ 31:0]        dqs_rd_gate_status_p1;  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                            //clock domain: phy_clk, parallel signals
wire [ 31:0]        dqs_rd_gate_status_p2;  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane


wire [11:0]          mc0_phy_clk_wren_gt;    //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
wire [11:0]          mc0_phy_clk_rden_gt;    //clock gate signal of phy_clk in read operation;
wire [ 3:0]          phy_ddr_clk_gate0;      //phy_clk and ddr_clk gate signal
wire [ 3:0]          phy_ddr_clk_gate1;      //phy_clk and ddr_clk gate signal
wire [ 3:0]          phy_ddr_clk_gate2;      //phy_clk and ddr_clk gate signal
wire [11:0]          phy_rstn_low;
wire [11:0]          phy_rstn_upp;

wire [12* 8-1:0]      phy_rd_dm;      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [12*64-1:0]      phy_rdata;      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
wire [11     :0]      phy_rd_en;      //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [ 6* 8-1:0]      phy_rdata_se;   //2 single pad per bank, 6 pairs pads in 3 banks;
wire [12* 8-1:0]      phy_rd_dqsn;
wire [12* 8-1:0]      phy_rd_dqsp;

wire [12* 8-1:0]      phy_wr_dm;      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [12*64-1:0]      phy_wdata;      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
wire [12* 8-1:0]      phy_wr_en;      //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
wire [ 6* 8-1:0]      phy_wrdata_se;  //2 single pad per bank, 6 pads in 3 banks;
wire [12* 8-1:0]      phy_wr_dqsn;
wire [12* 8-1:0]      phy_wr_dqsp;
wire [95     :0]      dqs_iogate_rdata;   //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
wire [12* 8-1:0]      dqs_rd_gate_en;     //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
wire [12* 8-1:0]      dqs_rd_en_shadow;
wire                  dqs_pupd_en_i;      //dqs pull-up and pull-down enable when training
wire [11     :0]      dqs_pupd_en_o;      //dqs pull-up and pull-down enable when training


wire [143:0]          hctrl_addr;
wire [ 15:0]          hctrl_cke;
wire [ 15:0]          hctrl_odt;
wire [ 15:0]          hctrl_cs_n;
wire [ 15:0]          hctrl_bg;
wire [ 15:0]          hctrl_ba;
wire [  7:0]          hctrl_act_n;
wire [  7:0]          hctrl_parity;
wire [  7:0]          hctrl_alert_n;
wire [ 17:0]          hctrl_datain_en_upp;
wire [575:0]          hctrl_dqin;
wire [ 71:0]          hctrl_dmin;
wire [ 71:0]          dqs_gate_in;
wire [ 15:0]          hctrl2mem_ck;
wire                  hctrl2mem_ram_rst_n;
wire [ 15:0]          hctrl2mem_cke;
wire [ 15:0]          hctrl2mem_cs_n;
wire [ 15:0]          hctrl2mem_odt;
wire [ 15:0]          hctrl2mem_bg;
wire [ 15:0]          hctrl2mem_ba;
wire [  7:0]          hctrl2mem_act_n;
wire [143:0]          hctrl2mem_addr;
wire [  7:0]          hctrl2mem_parity;
wire [575:0]          hctrl2mem_dqout;
wire [ 71:0]          hctrl2mem_dmout;
wire [ 71:0]          hctrl2mem_dataout_en;
wire [ 71:0]          hctrl2mem_wdqsout;
wire [ 71:0]          hctrl2mem_rdqs_en;
wire [ 71:0]          hctrl2mem_rdqs_en_pre;
wire                  hctrl_datain_en_low;
wire [ 12:0]          apb_dly_sel;
wire [ 59:0]          apb_dly_addr;
wire [ 89:0]          apb_dly_data;
wire [  9:0]          apb_dly_gate;
wire                  dfi_io_pd;
wire                  o_dfi_io_pd;
wire                  zqcal_clrcfg;
wire                  zqcal_start;
wire                  zqcal_update_en;
wire                  zqcal_vt_update_en_out;
wire [  2:0]          zqcal_vt_update_en_in;
wire [  2:0]          zqcal_done;
wire                  offcal_clrcfg;
wire                  offcal_start;
wire                  offcal_update_en;
wire                  offcal_vt_update_en_out;
wire [ 11:0]          offcal_vt_update_en_in;
wire [ 11:0]          offcal_done;

wire                  zqcal_clrcfg_o;
wire                  zqcal_start_o;
wire                  zqcal_update_en_o;
wire [  2:0]          zqcal_vt_update_en_out_i;
wire                  zqcal_vt_update_en_in_o;
wire [  2:0]          zqcal_done_i;
wire                  offcal_clrcfg_o;
wire                  offcal_start_o;
wire                  offcal_update_en_o;
wire [ 11:0]          offcal_vt_update_en_out_i;
wire                  offcal_vt_update_en_in_o;
wire [ 11:0]          offcal_done_i;
wire [ 11:0]          remap_apb_dly_sel;
wire [ 71:0]          remap_apb_dly_addr;
wire [107:0]          remap_apb_dly_data;
wire [ 11:0]          remap_apb_dly_gate;

// dcc control
wire                  dcc_clrcfg;
wire                  dcc_start;
wire                  dcc_update_en;
wire                  dcc_vt_update_en_out;
wire [ 11:0]          dcc_vt_update_en_in;
wire [ 11:0]          dcc_done;
// dcc control
wire                  dcc_clrcfg_o;
wire                  dcc_start_o;
wire                  dcc_update_en_o;
wire [ 11:0]          dcc_vt_update_en_out_i;
wire                  dcc_vt_update_en_in_o;
wire [ 11:0]          dcc_done_i;
// delay control
wire [ 62:0]          delay_cal_en_in_upp;
wire [ 62:0]          delay_cal_in_upp;
wire [  1:0]          delay_cal_en_in_low;
wire [  1:0]          delay_cal_in_low;
wire [  8:0]          delay_cal_mode_upp;
wire [ 62:0]          delay_cal_clk_en_upp;
wire [ 62:0]          delay_cal_en_out_upp;
wire                  delay_cal_mode_low;
wire [  1:0]          delay_cal_clk_en_low;
wire [  1:0]          delay_cal_en_out_low;

wire [ 83:0]          remap_delay_cal_en_in;
wire [ 83:0]          remap_delay_cal_in;
wire [ 11:0]          remap_delay_cal_mode;
wire [ 83:0]          remap_delay_cal_clk_en;
wire [ 83:0]          remap_delay_cal_en_out;

wire [  8:0]          loopback_fifo_rstn_upp;
wire                  loopback_fifo_rstn_low;
wire [  8:0]          delay_gate;
wire [ 17:0]          phy_dqs_cnt;
wire                  loopback_fifo_resp_upp;
wire                  loopback_fifo_resp_low;

// dqs signals
wire [  7:0]          dqs_rd_gate_status0;  // bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  7:0]          dqs_rd_gate_status1;  // bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  7:0]          dqs_rd_gate_status2;  // bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                            // clock domain: ddr_clk, serial signals
wire [  3:0]          dqs_rstn0;            // bank0,[3:0]:D/C/B/A
wire [  3:0]          dqs_rstn1;            // bank1,[3:0]:D/C/B/A
wire [  3:0]          dqs_rstn2;            // bank2,[3:0]:D/C/B/A
wire [ 17:0]          phy_status;
 
wire [  8:0]          wrlvl_mode;
wire [ 95:0]          wrlvl_wrqout;
wire [ 71:0]          wrlvl_rdqout;
wire                  loopback_mode;
wire [  1:0]          loopback_clknum_sel;
wire [  1:0]          loopback_clk_sel;
wire [ 17:0]          loopback_fifo_dataout_upp;
wire                  loopback_fifo_dataout_low;
wire [ 71:0]          hctrl2io_pdr;
wire [ 71:0]          hctrl2io_odt_en;
wire [  8:0]          delay_dti_upp;
wire [  8:0]          hctrl_vref_rank_sel_upp;
wire [  7:0]          loopback_en_out;
wire [ 95:0]          remap_loopback_en ;
//delay ctrl signals, uhy_clk
wire                  delay_testmode_en;
wire                  delay_osc_chain_en;
wire [ 2:0]           delay_dti_low;
wire [ 3:0]           delay_osc_div;
wire [ 1:0]           delay_osc_wrlvl_sel;
wire [ 1:0]           delay_osc_wdata_sel;
wire [ 1:0]           delay_osc_sel_low;
//
wire [ 41:0]          vref_value_low;
wire [125:0]          vref_value_upp;
wire                  ioloopback_sel_upp;         // no use
wire                  ioloopback_sel_low;         // no use
wire [ 11:0]          loopback_fifo_datain_low;   // [3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
wire [ 11:0]          loopback_fifo_datain_upp;

wire [ 11:0]          remap_loopback_fifo_rstn_upp;
wire [ 11:0]          remap_loopback_fifo_rstn_low;
wire [ 11:0]          remap_delay_gate;
wire [ 23:0]          remap_dqs_cnt;
wire [ 11:0]          remap_loopback_fifo_resp_upp;
wire [ 11:0]          remap_loopback_fifo_resp_low;
wire [ 11:0]          remap_delay_dti;
wire [ 23:0]          remap_delay_osc_wdq_ac_sel;
wire [167:0]          remap_vref_ctrl_value;
wire [ 23:0]          remap_loopback_clknum_sel;
wire [ 23:0]          remap_loopback_clk_sel;
wire [ 11:0]          remap_wrlvl_mode;
wire [ 71:0]          remap_wrlvl_qin;
wire [ 11:0]          remap_loopback_mode;
wire [ 95:0]          remap_phy_rd_dqs_pdr;
wire [ 95:0]          remap_phy_rd_dqs_te;
wire [ 11:0]          remap_vref_rank_sel;

wire                  hctrl_clk;

`ifdef PPC_LOC_Y80
assign hctrl_clk   = bank33_hctrl_clk;
`elsif PPC_LOC_Y40
assign hctrl_clk   = bank32_hctrl_clk;
`else
assign hctrl_clk   = bank31_hctrl_clk;
`endif

///////   APB MUX   ////////
ph1_logic_apb_mux_1_3 u_apb_mux (
// APB master
    .mst_psel    ( apb_sel   ),
    .mst_paddr   ( apb_addr  ),
    .mst_prdata  ( apb_rdata ),
    .mst_pready  ( apb_ready ),
    .mst_pslverr ( apb_error ),

    // APB slaves
    .slv_psel    ( {gate_apb_sel,   phy_apb_sel,   hctrl_apb_sel  } ),
    .slv_prdata  ( {gate_apb_rdata, phy_apb_rdata, hctrl_apb_rdata} ),
    .slv_pready  ( {gate_apb_ready, phy_apb_ready, hctrl_apb_rdy  } ),
    .slv_pslverr ( {gate_apb_error, phy_apb_error, hctrl_apb_error} )
);

assign hctrl_apb_clk    = apb_clk ;
assign phy_apb_clk      = apb_clk ;
assign gate_apb_clk     = apb_clk ;

assign hctrl_apb_rst_n  = apb_rst_n ;
assign phy_apb_rst_n    = apb_rst_n ;
assign gate_apb_rst_n   = apb_rst_n ;

assign hctrl_apb_addr   = apb_addr ;
assign phy_apb_addr     = apb_addr ;
assign gate_apb_addr    = apb_addr ;

assign hctrl_apb_enable = apb_enable ;
assign phy_apb_enable   = apb_enable ;
assign gate_apb_enable  = apb_enable ;

assign hctrl_apb_wr_rdn = apb_wr_rdn ;
assign phy_apb_wr_rdn   = apb_wr_rdn ;
assign gate_apb_wr_rdn  = apb_wr_rdn ;

assign hctrl_apb_wdata  = apb_wdata ;
assign phy_apb_wdata    = apb_wdata ;
assign gate_apb_wdata   = apb_wdata ;

`ifdef CTRL_INDEX_0
  PH1_PHY_DDR4_CAL  u_hard_controller_0(
`else
  PH1_PHY_DDR4_CAL  u_hard_controller_1(
`endif
// controller signals, between hard controller and users or top-level systems
    .hctrl_clk                  ( hctrl_clk      ),
    .hctrl_rst_n                ( rst_n                 ),
    .hctrl_ctl_idle             ( hctrl_ctl_idle        ),
    .hctrl_gpr0                 ( hctrl_gpr0            ),

// DFI bus signals, between hard controller and users or top-level systems
    .dfi_reset_n                ( dfi_reset_n           ),
    .dfi_cke                    ( dfi_cke               ),
    .dfi_odt                    ( dfi_odt               ),
    .dfi_cs_n                   ( dfi_cs_n              ),
    .dfi_act_n                  ( dfi_act_n             ),
    .dfi_ras_n                  ( dfi_ras_n             ),
    .dfi_cas_n                  ( dfi_cas_n             ),
    .dfi_we_n                   ( dfi_we_n              ),
    .dfi_bg                     ( dfi_bg                ),
    .dfi_bank                   ( dfi_bank              ),
    .dfi_address                ( dfi_address           ),
    .dfi_wrdata_en              ( dfi_wrdata_en         ),
    .dfi_wrdata                 ( dfi_wrdata            ),
    .dfi_wrdata_mask            ( dfi_wrdata_mask       ),
    .dfi_rddata_en              ( dfi_rddata_en         ),
    .dfi_rddata_valid           ( dfi_rddata_valid      ),
    .dfi_rddata                 ( dfi_rddata            ),
    .dfi_rddata_dbi_n           ( dfi_rddata_dbi_n      ),
    .dfi_ctrlupd_req            ( dfi_ctrlupd_req       ),
    .dfi_ctrlupd_ack            ( dfi_ctrlupd_ack       ),
    .dfi_phyupd_req             ( dfi_phyupd_req        ),
    .dfi_phyupd_ack             ( dfi_phyupd_ack        ),
    .dfi_phyupd_type            ( dfi_phyupd_type       ),
    .dfi_init_start             ( dfi_init_start        ),
    .dfi_data_byte_disable      ( dfi_data_byte_disable ),
    .dfi_dram_clk_disable       ( dfi_dram_clk_disable  ),
    .dfi_init_complete          ( dfi_init_complete     ),
    .dfi_parity_in              ( dfi_parity_in         ),
    .dfi_alert_n                ( dfi_alert_n           ),
    .dfi_lp_ctrl_req            ( dfi_lp_ctrl_req       ),
    .dfi_lp_data_req            ( dfi_lp_data_req       ),
    .dfi_lp_wakeup              ( dfi_lp_wakeup         ),
    .dfi_lp_ack                 ( dfi_lp_ack            ),

// APB bus signals, between hard controller and users or top-level systems
    .hctrl_scan_atpg_mode       ( atpg_mode ),
    .hctrl_apb_rst_n            ( hctrl_apb_rst_n       ),
    .hctrl_apb_clk              ( hctrl_apb_clk         ),
    .hctrl_apb_sel              ( hctrl_apb_sel         ),
    .hctrl_apb_wr_rdn           ( hctrl_apb_wr_rdn      ),
    .hctrl_apb_enable           ( hctrl_apb_enable      ),
    .hctrl_apb_addr             ( hctrl_apb_addr        ),
    .hctrl_apb_wdata            ( hctrl_apb_wdata       ),
    .hctrl_apb_rdata            ( hctrl_apb_rdata       ),
    .hctrl_apb_rdy              ( hctrl_apb_rdy         ),
    .hctrl_apb_error            ( hctrl_apb_error       ),

//debug bus signals, between hard controller and users or top-level systems
    .hctrl_jtag_trst_n          ( hctrl_jtag_trst_n     ),
    .hctrl_jtag_tclk            ( hctrl_jtag_tclk       ),
    .hctrl_jtag_tdi             ( hctrl_jtag_tdi        ),
    .hctrl_jtag_tdo             ( hctrl_jtag_tdo        ),
    .hctrl_jtag_tdo_en          ( hctrl_jtag_tdo_en     ),
    .hctrl_jtag_tms             ( hctrl_jtag_tms        ),


//control signals, between hard controller and fabric/IOL
    .ctrlclk_en_upp             ( ctrlclk_en_upp        ),
    .ddrclk_en_upp              ( ddrclk_en_upp         ),
    .rdclk_en_upp               ( rdclk_en_upp          ),
    .ctrlclk_en_low             ( ctrlclk_en_low        ),
    .ddrclk_en_low              ( ddrclk_en_low         ),
    .rdclk_en_low               ( rdclk_en_low          ),
    .ctrlclk_en_gate_upp        ( ctrlclk_en_gate_upp   ),
    .rdclk_en_gate_upp          ( rdclk_en_gate_upp     ),
    .ddrclk_en_gate_upp         ( ddrclk_en_gate_upp    ),
    .ctrlclk_en_gate_low        ( ctrlclk_en_gate_low   ),
    .rdclk_en_gate_low          ( rdclk_en_gate_low     ),
    .ddrclk_en_gate_low         ( ddrclk_en_gate_low    ),
    .rstn_upp                   ( rstn_upp              ),
    .rstn_low                   ( rstn_low              ),

//signals are relative to SDRAM, between hard controller and fabric/IOL
    .hctrl_addr                 ( hctrl_addr            ),
    .hctrl_cke                  ( hctrl_cke             ),
    .hctrl_odt                  ( hctrl_odt             ),
    .hctrl_cs_n                 ( hctrl_cs_n            ),
    .hctrl_bg                   ( hctrl_bg              ),
    .hctrl_ba                   ( hctrl_ba              ),
    .hctrl_act_n                ( hctrl_act_n           ),
    .hctrl_parity               ( hctrl_parity          ),
    .hctrl_alert_n              ( hctrl_alert_n         ),
    .hctrl_datain_en_upp        ( hctrl_datain_en_upp   ),
    .hctrl_dqin                 ( hctrl_dqin            ),
    .hctrl_dmin                 ( hctrl_dmin            ),
    .dqs_gate_in                ( dqs_gate_in ),
    .hctrl2mem_ck               ( hctrl2mem_ck          ),
    .hctrl2mem_ram_rst_n        ( hctrl2mem_ram_rst_n   ),
    .hctrl2mem_cke              ( hctrl2mem_cke         ),
    .hctrl2mem_cs_n             ( hctrl2mem_cs_n        ),
    .hctrl2mem_odt              ( hctrl2mem_odt         ),
    .hctrl2mem_bg               ( hctrl2mem_bg          ),
    .hctrl2mem_ba               ( hctrl2mem_ba          ),
    .hctrl2mem_act_n            ( hctrl2mem_act_n       ),
    .hctrl2mem_addr             ( hctrl2mem_addr        ),
    .hctrl2mem_parity           ( hctrl2mem_parity      ),
    .hctrl2mem_dqout            ( hctrl2mem_dqout       ),
    .hctrl2mem_dmout            ( hctrl2mem_dmout       ),
    .hctrl2mem_dataout_en       ( hctrl2mem_dataout_en  ),
    .hctrl2mem_wdqsout          ( hctrl2mem_wdqsout     ),
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en_pre ),
    .hctrl_datain_en_low        ( hctrl_datain_en_low   ),

//apb signals, between hard controller and fabric/IOL
    .apb_dly_sel                ( apb_dly_sel           ),
    .apb_dly_addr               ( apb_dly_addr          ),
    .apb_dly_data               ( apb_dly_data          ),
    .apb_dly_gate               ( apb_dly_gate          ),
    .apb_dfi_io_pd              ( dfi_io_pd             ),

//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg               ( zqcal_clrcfg              ),
    .zqcal_start                ( zqcal_start               ),
    .zqcal_update_en            ( zqcal_update_en           ),
    .zqcal_vt_update_en_out     ( zqcal_vt_update_en_out    ),
    .zqcal_vt_update_en_in      ( zqcal_vt_update_en_in     ),
    .zqcal_done_bank            ( zqcal_done                ),

//offcal control, between hard controller and fabric/IOL
    .offcal_clrcfg              ( offcal_clrcfg             ),
    .offcal_start               ( offcal_start              ),
    .offcal_update_en           ( offcal_update_en          ),
    .offcal_vt_update_en_out    ( offcal_vt_update_en_out   ),
    .offcal_vt_update_en_in     ( offcal_vt_update_en_in    ),
    .offcal_done_bank           ( offcal_done               ),

//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg                 ( dcc_clrcfg                ),
    .dcc_start                  ( dcc_start                 ),
    .dcc_update_en              ( dcc_update_en             ),
    .dcc_vt_update_en_out       ( dcc_vt_update_en_out      ),
    .dcc_vt_update_en_in        ( dcc_vt_update_en_in       ),
    .dcc_done_bank              ( dcc_done                  ),

//Delay Line calibration, between hard controller and fabric/IOL
    .delay_cal_en_in_upp        ( delay_cal_en_in_upp       ),
    .delay_cal_in_upp           ( delay_cal_in_upp          ),
    .delay_cal_en_in_low        ( delay_cal_en_in_low       ),
    .delay_cal_in_low           ( delay_cal_in_low          ),
    .delay_cal_mode_upp         ( delay_cal_mode_upp        ),
    .delay_cal_clk_en_upp       ( delay_cal_clk_en_upp      ),
    .delay_cal_en_out_upp       ( delay_cal_en_out_upp      ),
    .delay_cal_mode_low         ( delay_cal_mode_low        ),
    .delay_cal_clk_en_low       ( delay_cal_clk_en_low      ),
    .delay_cal_en_out_low       ( delay_cal_en_out_low      ),
//debug signals, between hard controller and fabric/IOL
    .loopback_fifo_rstn_upp     ( loopback_fifo_rstn_upp    ),
    .loopback_fifo_rstn_low     ( loopback_fifo_rstn_low    ),
    .delay_gate                 ( delay_gate                ),
    .phy_dqs_cnt                ( phy_dqs_cnt               ),
    .loopback_fifo_resp_upp     ( loopback_fifo_resp_upp    ),
    .loopback_fifo_resp_low     ( loopback_fifo_resp_low    ),
    .phy2hctrl_dti_upp          ( phy2hctrl_dti_upp         ),
    .phy2hctrl_dti_low          ( phy2hctrl_dti_low         ),
    .phy_status                 ( phy_status                ),
    .hctrl2phy_dto              (                           ),
    .wrlvl_mode                 ( wrlvl_mode                ),
    .wrlvl_qin                  ( remap_wrlvl_qin           ),
    .loopback_mode              ( loopback_mode             ),
    .loopback_clknum_sel        ( loopback_clknum_sel       ),
    .loopback_clk_sel           ( loopback_clk_sel          ),
    .loopback_fifo_dataout_upp  ( loopback_fifo_dataout_upp ),
    .loopback_fifo_dataout_low  ( loopback_fifo_dataout_low ),
    .hctrl2io_pdr               ( hctrl2io_pdr              ),
    .hctrl2io_odt_en            ( hctrl2io_odt_en           ),
    .delay_dti_upp              ( delay_dti_upp             ),
    .hctrl_vref_rank_sel_upp    ( hctrl_vref_rank_sel_upp   ),
    .loopback_en_out            ( loopback_en_out           ),
    .delay_testmode_en          ( delay_testmode_en         ),
    .delay_osc_chain_en         ( delay_osc_chain_en        ),
    .delay_dti_low              ( delay_dti_low             ),
    .delay_osc_div              ( delay_osc_div             ),
    .delay_osc_wrlvl_sel        ( delay_osc_wrlvl_sel       ),
    .delay_osc_wdata_sel        ( delay_osc_wdata_sel       ),
    .delay_osc_sel_low          ( delay_osc_sel_low         ),
    .vref_value_low             ( vref_value_low            ),
    .vref_value_upp             ( vref_value_upp            ),
    .ioloopback_sel_upp         ( ioloopback_sel_upp        ),
    .ioloopback_sel_low         ( ioloopback_sel_low        ),
    .apb_sync_path_sel          ( apb_sync_path_sel         ),
    .wakeup_mux_dly             ( 1'b1                      ),
    .dqs_pupd_en                ( dqs_pupd_en_i             )
);


ph1_logic_bus_matrix #(
    .BYTE_LANE_0                ( BYTE_LANE_0       ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1                ( BYTE_LANE_1       ),
    .BYTE_LANE_2                ( BYTE_LANE_2       ),
    .DATA_CTRL_0                ( DATA_CTRL_0       ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1                ( DATA_CTRL_1       ),
    .DATA_CTRL_2                ( DATA_CTRL_2       ),
    .ADDR_MAP                   ( ADDR_MAP          ),
    .CK_MAP                     ( CK_MAP            ),
    .BANK_MAP                   ( BANK_MAP          ),
    .CKE_MAP                    ( CKE_MAP           ),
    .ODT_MAP                    ( ODT_MAP           ),
    .CS_MAP                     ( CS_MAP            ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP             ( BANK_GROUP_MAP    ),
    .ACT_MAP                    ( ACT_MAP           ),
    .PARITY_MAP                 ( PARITY_MAP        ),
    .ALERT_MAP                  ( ALERT_MAP         ),
    .DM_DBI_MAP                 ( DM_DBI_MAP        ),
`elsif DRAM_DDR3
    .RAS_MAP                    ( RAS_MAP           ),
    .CAS_MAP                    ( CAS_MAP           ),
    .WE_MAP                     ( WE_MAP            ),
    .DM_MAP                     ( DM_MAP            ),
`endif

    .DQS_GATE_MAP               ( DQS_GATE_MAP      ),
    .DQS_BYTE_MAP               ( DQS_BYTE_MAP      ),
    .RESET_MAP                  ( RESET_MAP         ),
    .DATA0_MAP                  ( DATA0_MAP         ),
    .DATA1_MAP                  ( DATA1_MAP         ),
    .DATA2_MAP                  ( DATA2_MAP         ),
    .DATA3_MAP                  ( DATA3_MAP         ),
    .DATA4_MAP                  ( DATA4_MAP         ),
    .DATA5_MAP                  ( DATA5_MAP         ),
    .DATA6_MAP                  ( DATA6_MAP         ),
    .DATA7_MAP                  ( DATA7_MAP         ),
    .DATA8_MAP                  ( DATA8_MAP         ),
    .LOC_DX_BYTELANE_MAP        ( LOC_DX_BYTELANE_MAP ),
    .LOC_AC_BYTELANE_MAP        ( LOC_AC_BYTELANE_MAP ),
    .DQS_GATE_WIDTH             ( DQS_GATE_WIDTH    ),
    .ADDR_WIDTH                 ( ADDR_WIDTH        ), //DRAM address bus width
    .ROW_WIDTH                  ( ROW_WIDTH         ), //DRAM address bus width
    .BANK_WIDTH                 ( BANK_WIDTH        ),
`ifdef DRAM_DDR4
    .BG_WIDTH                   ( BG_WIDTH          ),
`endif
    .ODT_WIDTH                  ( ODT_WIDTH         ),
    .CK_WIDTH                   ( CK_WIDTH          ), // # of CK/CK# outputs to memory
    .CKE_WIDTH                  ( CKE_WIDTH         ), // # of cke outputs
    .CS_WIDTH                   ( CS_WIDTH          ), // # of unique CS outputs
    .DQ_WIDTH                   ( DQ_WIDTH          ),
    .DQS_WIDTH                  ( DQS_WIDTH         ), // # of DQS (strobe)
    .DM_WIDTH                   ( DM_WIDTH          ),
    .DCI                        ( DCI               ),
    .AC_WIDTH                   ( AC_WIDTH          )

) u_bus_matrix(
    .sys_clk                    ( hctrl_clk            ),
    .sys_rstn                   ( rst_n                ),

    .ctrlclk_en_gate_upp        ( ctrlclk_en_gate_upp   ),
    .rdclk_en_gate_upp          ( rdclk_en_gate_upp     ),
    .ddrclk_en_gate_upp         ( ddrclk_en_gate_upp    ),
    .ctrlclk_en_gate_low        ( ctrlclk_en_gate_low   ),
    .rdclk_en_gate_low          ( rdclk_en_gate_low     ),
    .ddrclk_en_gate_low         ( ddrclk_en_gate_low    ),
    .rstn_upp                   ( rstn_upp              ),
    .rstn_low                   ( rstn_low              ),

//signals are relative to SDRAM, between hard controller and fabric/IOL
    .hctrl_addr                 ( hctrl_addr            ),
    .hctrl_cke                  ( hctrl_cke             ),
    .hctrl_odt                  ( hctrl_odt             ),
    .hctrl_cs_n                 ( hctrl_cs_n            ),
    .hctrl_bg                   ( hctrl_bg              ),
    .hctrl_ba                   ( hctrl_ba              ),
    .hctrl_act_n                ( hctrl_act_n           ),
    .hctrl_parity               ( hctrl_parity          ),
    .hctrl_alert_n              ( hctrl_alert_n         ),
    .hctrl_datain_en_upp        ( hctrl_datain_en_upp   ),
    .hctrl_dqin                 ( hctrl_dqin            ),
    .hctrl_dmin                 ( hctrl_dmin            ),
    .dqs_gate_in                ( dqs_gate_in           ),
    .hctrl2mem_ck               ( hctrl2mem_ck          ),
    .hctrl2mem_ram_rst_n        ( hctrl2mem_ram_rst_n   ),
    .hctrl2mem_cke              ( hctrl2mem_cke         ),
    .hctrl2mem_cs_n             ( hctrl2mem_cs_n        ),
    .hctrl2mem_odt              ( hctrl2mem_odt         ),
    .hctrl2mem_bg               ( hctrl2mem_bg          ),
    .hctrl2mem_ba               ( hctrl2mem_ba          ),
    .hctrl2mem_act_n            ( hctrl2mem_act_n       ),
    .hctrl2mem_addr             ( hctrl2mem_addr        ),
    .hctrl2mem_parity           ( hctrl2mem_parity      ),
    .hctrl2mem_dqout            ( hctrl2mem_dqout       ),
    .hctrl2mem_dmout            ( hctrl2mem_dmout       ),
    .hctrl2mem_dataout_en       ( hctrl2mem_dataout_en  ),
    .hctrl2mem_wdqsout          ( hctrl2mem_wdqsout     ),
`ifdef USE_EFFICIENCY_EQUALIZER
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en     ),
`else
    .hctrl2mem_rdqs_en          ( hctrl2mem_rdqs_en_pre ),
`endif
    .hctrl_datain_en_low        ( hctrl_datain_en_low   ),

//apb signals, between hard controller and fabric/IOL
    .apb_dly_sel                ( apb_dly_sel           ),
    .apb_dly_addr               ( apb_dly_addr          ),
    .apb_dly_data               ( apb_dly_data          ),
    .apb_dly_gate               ( apb_dly_gate          ),
    .apb_dfi_io_pd              ( dfi_io_pd             ),

//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg               ( zqcal_clrcfg              ),
    .zqcal_start                ( zqcal_start               ),
    .zqcal_update_en            ( zqcal_update_en           ),
    .zqcal_vt_update_en_out     ( zqcal_vt_update_en_in     ),
    .zqcal_vt_update_en_in      ( zqcal_vt_update_en_out    ),
    .zqcal_done                 ( zqcal_done                ),
//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg                 ( dcc_clrcfg                ),
    .dcc_start                  ( dcc_start                 ),
    .dcc_update_en              ( dcc_update_en             ),
    .dcc_vt_update_en_out       ( dcc_vt_update_en_in       ),
    .dcc_vt_update_en_in        ( dcc_vt_update_en_out      ),
    .dcc_done                   ( dcc_done                  ),
//Delay Line calibration, between hard controller and fabric/IOL
    .delay_cal_en_in_upp        ( delay_cal_en_in_upp       ),
    .delay_cal_in_upp           ( delay_cal_in_upp          ),
    .delay_cal_en_in_low        ( delay_cal_en_in_low       ),
    .delay_cal_in_low           ( delay_cal_in_low          ),
    .delay_cal_mode_upp         ( delay_cal_mode_upp        ),
    .delay_cal_clk_en_upp       ( delay_cal_clk_en_upp      ),
    .delay_cal_en_out_upp       ( delay_cal_en_out_upp      ),
    .delay_cal_mode_low         ( delay_cal_mode_low        ),
    .delay_cal_clk_en_low       ( delay_cal_clk_en_low      ),
    .delay_cal_en_out_low       ( delay_cal_en_out_low      ),
//debug signals, between hard controller and fabric/IOL
    .loopback_fifo_rstn_upp     ( loopback_fifo_rstn_upp    ),
    .loopback_fifo_rstn_low     ( loopback_fifo_rstn_low    ),
    .delay_gate                 ( delay_gate                ),
    .phy_dqs_cnt                ( phy_dqs_cnt               ),
    .loopback_fifo_resp_upp     ( loopback_fifo_resp_upp    ),
    .loopback_fifo_resp_low     ( loopback_fifo_resp_low    ),
    .phy_status                 ( phy_status                ),
    .wrlvl_mode                 ( wrlvl_mode                ),
    .wrlvl_qin                  ( remap_wrlvl_qin           ),
    .loopback_mode              ( loopback_mode             ),
    .loopback_clknum_sel        ( loopback_clknum_sel       ),
    .loopback_clk_sel           ( loopback_clk_sel          ),
    .loopback_fifo_dataout_upp  ( loopback_fifo_dataout_upp ),
    .loopback_fifo_dataout_low  ( loopback_fifo_dataout_low ),
    .hctrl2io_pdr               ( hctrl2io_pdr              ),
    .hctrl2io_odt_en            ( hctrl2io_odt_en           ),
    .delay_dti_upp              ( delay_dti_upp             ),
    .hctrl_vref_rank_sel_upp    ( hctrl_vref_rank_sel_upp   ),
    .loopback_en_in             ( loopback_en_out           ),
    .delay_dti_low              ( delay_dti_low             ),
    .delay_osc_div              ( delay_osc_div             ),
    .delay_osc_wrlvl_sel        ( delay_osc_wrlvl_sel       ),
    .delay_osc_wdata_sel        ( delay_osc_wdata_sel       ),
    .delay_osc_sel_low          ( delay_osc_sel_low         ),
    .vref_value_low             ( vref_value_low            ),
    .vref_value_upp             ( vref_value_upp            ),
    .dqs_pupd_en_i              ( dqs_pupd_en_i             ),

//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
    .o_dfi_io_pd                    ( o_dfi_io_pd           ),
    .wrlvl_rdqout                   ( wrlvl_rdqout          ),  //A_wrlvl_qout
    .wrlvl_wrqout                   ( wrlvl_wrqout          ),
    .dqs_rd_gate_status_p0          ( dqs_rd_gate_status_p0 ),  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status_p1          ( dqs_rd_gate_status_p1 ),  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status_p2          ( dqs_rd_gate_status_p2 ),  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
    .mc0_phy_clk_wren_gt            ( mc0_phy_clk_wren_gt   ),  //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
    .mc0_phy_clk_rden_gt            ( mc0_phy_clk_rden_gt   ),  //clock gate signal of phy_clk in read operation;
    .phy_ddr_clk_gate0              ( phy_ddr_clk_gate0     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate1              ( phy_ddr_clk_gate1     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate2              ( phy_ddr_clk_gate2     ),  //phy_clk and ddr_clk gate signal
    .phy_rstn_low                   ( phy_rstn_low          ),
    .phy_rstn_upp                   ( phy_rstn_upp          ),
    .phy_rd_dm                      ( phy_rd_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                                //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata                      ( phy_rdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_rd_en                      ( phy_rd_en             ),  //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata_se                   ( phy_rdata_se          ),  //2 single pad per bank, 6 pairs pads in 3 banks;
    .phy_rd_dqsn                    ( phy_rd_dqsn           ),
    .phy_rd_dqsp                    ( phy_rd_dqsp           ),
    .phy_wr_dm                      ( phy_wr_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A;
                                                                //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wdata                      ( phy_wdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_wr_en                      ( phy_wr_en             ),  //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wrdata_se                  ( phy_wrdata_se         ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_wr_dqsn                    ( phy_wr_dqsn           ),
    .phy_wr_dqsp                    ( phy_wr_dqsp           ),
    .dqs_iogate_rdata               ( dqs_iogate_rdata      ),  //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_gate_en                 ( dqs_rd_gate_en        ),  //read dqs gate enable; [7:0]: bank0_bytelane_A; 
                                                                //[95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_en_shadow               ( dqs_rd_en_shadow      ),
    .dqs_pupd_en_o                  ( dqs_pupd_en_o         ),  //dqs pull-up and pull-down enable when training
    .remap_apb_dly_sel              ( remap_apb_dly_sel     ),
    .remap_apb_dly_addr             ( remap_apb_dly_addr    ),
    .remap_apb_dly_data             ( remap_apb_dly_data    ),
    .remap_apb_dly_gate             ( remap_apb_dly_gate    ),
    .remap_delay_cal_en_in          ( remap_delay_cal_en_in ),
    .remap_delay_cal_in             ( remap_delay_cal_in    ),
    .remap_delay_cal_mode           ( remap_delay_cal_mode  ),
    .remap_delay_cal_clk_en         ( remap_delay_cal_clk_en),
    .remap_delay_cal_en_out         ( remap_delay_cal_en_out),
    .dqs_rd_gate_status0            ( dqs_rd_gate_status0   ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status1            ( dqs_rd_gate_status1   ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status2            ( dqs_rd_gate_status2   ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                //clock domain: ddr_clk, serial signals
    .remap_loopback_fifo_rstn_upp   ( remap_loopback_fifo_rstn_upp),
    .remap_loopback_fifo_rstn_low   ( remap_loopback_fifo_rstn_low),
//dqs signals
    .dqs_rstn0                      ( dqs_rstn0                 ),  //bank0,[3:0]:D/C/B/A
    .dqs_rstn1                      ( dqs_rstn1                 ),  //bank1,[3:0]:D/C/B/A
    .dqs_rstn2                      ( dqs_rstn2                 ),  //bank2,[3:0]:D/C/B/A
    .loopback_fifo_datain_low       ( loopback_fifo_datain_low  ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_upp       ( loopback_fifo_datain_upp  ),
    .remap_vref_ctrl_value          ( remap_vref_ctrl_value     ),
    .remap_dqs_cnt                  ( remap_dqs_cnt             ),
    .remap_loopback_fifo_resp_upp   ( remap_loopback_fifo_resp_upp  ),
    .remap_loopback_fifo_resp_low   ( remap_loopback_fifo_resp_low  ),
    .remap_delay_gate               ( remap_delay_gate          ),
    .remap_loopback_clknum_sel      ( remap_loopback_clknum_sel ),
    .remap_loopback_clk_sel         ( remap_loopback_clk_sel    ),
    .remap_delay_dti                ( remap_delay_dti           ),
    .remap_delay_osc_wdq_ac_sel     ( remap_delay_osc_wdq_ac_sel),
    .remap_wrlvl_mode               ( remap_wrlvl_mode          ),
    .remap_loopback_mode            ( remap_loopback_mode       ),
    .remap_phy_rd_dqs_pdr           ( remap_phy_rd_dqs_pdr      ),
    .remap_phy_rd_dqs_te            ( remap_phy_rd_dqs_te       ),
    .remap_vref_rank_sel            ( remap_vref_rank_sel       ),
    .remap_loopback_en                      ( remap_loopback_en ),
//zcal control, between hard controller and fabric/IOL
    .zqcal_clrcfg_o                 ( zqcal_clrcfg_o            ),
    .zqcal_start_o                  ( zqcal_start_o             ),
    .zqcal_update_en_o              ( zqcal_update_en_o         ),
    .zqcal_vt_update_en_out_i       ( zqcal_vt_update_en_out_i  ),
    .zqcal_vt_update_en_in_o        ( zqcal_vt_update_en_in_o   ),
    .zqcal_done_i                   ( zqcal_done_i              ),

//DCC control, between hard controller and fabric/IOL
    .dcc_clrcfg_o                   ( dcc_clrcfg_o              ),
    .dcc_start_o                    ( dcc_start_o               ),
    .dcc_update_en_o                ( dcc_update_en_o           ),
    .dcc_vt_update_en_out_i         ( dcc_vt_update_en_out_i    ),
    .dcc_vt_update_en_in_o          ( dcc_vt_update_en_in_o     ),
    .dcc_done_i                     ( dcc_done_i                )

);

ph1_logic_ddrphy_streamlined #(
    .TCK                        ( TCK               ),  //memory tCK parameter, clock period in ps
    .NCK_PER_CLK                ( NCK_PER_CLK       ),  //4,2. Fabric clk period : Memory clk period
    .DQS_GATE                   ( DQS_GATE          ),
    .CTRL_INDEX                 ( CTRL_INDEX        ),
//bank and pad position parameters about ddr bus
    .BYTE_LANE_0                ( BYTE_LANE_0       ),  //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    .BYTE_LANE_1                ( BYTE_LANE_1       ),
    .BYTE_LANE_2                ( BYTE_LANE_2       ),
    .DATA_CTRL_0                ( DATA_CTRL_0       ),  // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    .DATA_CTRL_1                ( DATA_CTRL_1       ),
    .DATA_CTRL_2                ( DATA_CTRL_2       ),
    .ADDR_MAP                   ( ADDR_MAP          ),
    .CK_MAP                     ( CK_MAP            ),
    .BANK_MAP                   ( BANK_MAP          ),
    .CKE_MAP                    ( CKE_MAP           ),
    .ODT_MAP                    ( ODT_MAP           ),
    .CS_MAP                     ( CS_MAP            ),
    .DQS_GATE_MAP               ( DQS_GATE_MAP      ),
    .RESET_MAP                  ( RESET_MAP         ),
`ifdef DRAM_DDR4
    .BANK_GROUP_MAP             ( BANK_GROUP_MAP    ),
    .ACT_MAP                    ( ACT_MAP           ),
    .PARITY_MAP                 ( PARITY_MAP        ),
    .ALERT_MAP                  ( ALERT_MAP         ),  
    .DM_DBI_MAP                 ( DM_DBI_MAP        ),
`elsif DRAM_DDR3
    .RAS_MAP                    ( RAS_MAP           ),
    .CAS_MAP                    ( CAS_MAP           ),
    .WE_MAP                     ( WE_MAP            ),
    .DM_MAP                     ( DM_MAP            ),
`endif
    .DQS_BYTE_MAP               ( DQS_BYTE_MAP      ),
    .DATA0_MAP                  ( DATA0_MAP         ),
    .DATA1_MAP                  ( DATA1_MAP         ),
    .DATA2_MAP                  ( DATA2_MAP         ),
    .DATA3_MAP                  ( DATA3_MAP         ),
    .DATA4_MAP                  ( DATA4_MAP         ),
    .DATA5_MAP                  ( DATA5_MAP         ),
    .DATA6_MAP                  ( DATA6_MAP         ),
    .DATA7_MAP                  ( DATA7_MAP         ),
    .DATA8_MAP                  ( DATA8_MAP         ),
    .DQS_GATE_WIDTH             ( DQS_GATE_WIDTH    ),
    .ADDR_WIDTH                 ( ADDR_WIDTH        ),  // DRAM address bus width
    .ROW_WIDTH                  ( ROW_WIDTH         ),
    .BANK_WIDTH                 ( BANK_WIDTH        ),
    .ODT_WIDTH                  ( ODT_WIDTH         ),
    .CK_WIDTH                   ( CK_WIDTH          ),  // # of CK/CK# outputs to memory
    .CKE_WIDTH                  ( CKE_WIDTH         ),  // # of cke outputs
    .CS_WIDTH                   ( CS_WIDTH          ),  // # of unique CS outputs
    .DQ_WIDTH                   ( DQ_WIDTH          ),
    .DQS_WIDTH                  ( DQS_WIDTH         ),  // # of DQS (strobe)
    .DM_WIDTH                   ( DM_WIDTH          ),
`ifdef DRAM_DDR4
    .BG_WIDTH                   ( BG_WIDTH          ),
    .DM_DBI                     ( DM_DBI            ),  //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    .AC_WIDTH                   ( AC_WIDTH          ),
//Memory Option
    .INTER_VREF                 ( INTER_VREF        ),  //"Enable", "Disable"
    .DCI                        ( DCI               )   //"Enable", "Disable"

) u_ddrphy(
    .ctl_rst_n_bank0        ( {4{rst_n}}            ),
    .ctl_rst_n_bank1        ( {4{rst_n}}            ),
    .ctl_rst_n_bank2        ( {4{rst_n}}            ),
    .pzq_ctl_rst_n          ( {3{rst_n}}            ),
    .A_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .B_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .C_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .D_ioclk_0              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk0, phy_clk0} : {ddr_clk0, phy_clk0, 2'b00} ),
    .A_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .B_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .C_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .D_ioclk_1              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk1, phy_clk1} : {ddr_clk1, phy_clk1, 2'b00} ),
    .A_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .B_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .C_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .D_ioclk_2              ( (CTRL_INDEX == 0) ? {2'b00, ddr_clk2, phy_clk2} : {ddr_clk2, phy_clk2, 2'b00} ),
    .lclk_0                 ( lclk_0                ),
    .lclk_1                 ( lclk_1                ),
    .lclk_2                 ( lclk_2                ),
    .hctrl_clk0             ( {4{bank33_hctrl_clk}} ),
    .hctrl_clk1             ( {4{bank32_hctrl_clk}} ),
    .hctrl_clk2             ( {4{bank31_hctrl_clk}} ),
    .pzq_user_clk           ( {bank31_hctrl_clk, bank32_hctrl_clk, bank33_hctrl_clk} ),
    .mc0_phy_clk_wren_gt    ( mc0_phy_clk_wren_gt   ),  //clock gate signal of phy_clk in write operation ;
    .mc0_phy_clk_rden_gt    ( mc0_phy_clk_rden_gt   ),  //clock gate signal of phy_clk in read operation;
    .phy_ddr_clk_gate0      ( phy_ddr_clk_gate0     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate1      ( phy_ddr_clk_gate1     ),  //phy_clk and ddr_clk gate signal
    .phy_ddr_clk_gate2      ( phy_ddr_clk_gate2     ),  //phy_clk and ddr_clk gate signal
    .phy_rstn_low           ( phy_rstn_low          ),
    .phy_rstn_upp           ( phy_rstn_upp          ),
//DDR bus signals
    `ifdef USE_DQS_GATE
        .dqs_gate           ( dqs_gate              ),
    `endif
    .ddr_addr               ( ddr_addr              ),
    .ddr_ba                 ( ddr_ba                ),
    .ddr_cke                ( ddr_cke               ),
    .ddr_odt                ( ddr_odt               ),
`ifdef USE_RESET
    .ddr_reset_n            ( ddr_reset_n           ),
`endif
`ifdef USE_CS
    .ddr_cs_n               ( ddr_cs_n              ),
`endif
`ifdef USE_DM
    .ddr_dm                 ( ddr_dm                ),
`endif
    .ddr_dq                 ( ddr_dq                ),
`ifdef DRAM_DDR4
    .ddr_bg                 ( ddr_bg                ),
    .ddr_ck_c               ( ddr_ck_c              ),
    .ddr_ck_t               ( ddr_ck_t              ),
`ifdef USE_PAR_ALERT
    .ddr_parity             ( ddr_parity            ),
    .ddr_alert_n            ( ddr_alert_n           ),
`endif
    .ddr_act_n              ( ddr_act_n             ),
    .ddr_dqs_c              ( ddr_dqs_c             ),
    .ddr_dqs_t              ( ddr_dqs_t             ),
`elsif DRAM_DDR3
    .ddr_ck_c               ( ddr_ck_n              ),
    .ddr_ck_t               ( ddr_ck_p              ),
    .ddr_ras_n              ( ddr_ras_n             ),
    .ddr_cas_n              ( ddr_cas_n             ),
    .ddr_we_n               ( ddr_we_n              ),
    .ddr_dqs_c              ( ddr_dqs_n             ),
    .ddr_dqs_t              ( ddr_dqs_p             ),
`endif
//debug signals
    .age_toggle_inv         ( 3'b000                ),  //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    .age_toggle_en          ( 3'b000                ),  //{3{age_toggle_en}}  ),  //[0]:4lanes_0,[1]:4lanes_1;[2]:4lanes_2
    .dfi_io_pd              ( {12{o_dfi_io_pd}}     ),  //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
//dcc control
    .dcc_cfg_done           ( dcc_done_i            ),  //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
    .dcc_clrcfg             ( dcc_clrcfg_o          ),
    .dcc_start              ( dcc_start_o           ),
    .dcc_update_en_in       ( dcc_update_en_o       ),
    .dcc_vt_update_en_in    ( dcc_vt_update_en_in_o ),
    .dcc_vt_update_en_out   ( dcc_vt_update_en_out_i), //[3:0]:4lanes_0_D/C/B/A;[7:4]:4lanes_1_D/C/B/A;[11:8]:4lanes_2_D/C/B/A;
//delay control
    .delay_cal_clk_en0      ( remap_delay_cal_clk_en[27:0]  ),  //bank0,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in0       ( remap_delay_cal_en_out[27:0]  ),
    .delay_cal_en_out0      ( remap_delay_cal_en_in[27:0]   ),
    .delay_cal_mode0        ( remap_delay_cal_mode[3:0]     ),  //bank0,[3:0]:D/C/B/A
    .delay_cal_value0       ( remap_delay_cal_in[27:0]      ),
    .delay_cal_clk_en1      ( remap_delay_cal_clk_en[55:28] ),  //bank1,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in1       ( remap_delay_cal_en_out[55:28] ),
    .delay_cal_en_out1      ( remap_delay_cal_en_in[55:28]  ),
    .delay_cal_mode1        ( remap_delay_cal_mode[7:4]     ),  //bank1,[3:0]:D/C/B/A
    .delay_cal_value1       ( remap_delay_cal_in[55:28]     ),
    .delay_cal_clk_en2      ( remap_delay_cal_clk_en[83:56] ),  //bank2,[6:0]:A_bytelane;[13:7]: B_bytelane;[20:14]: C_bytelane;[27:21]:D_bytelane
    .delay_cal_en_in2       ( remap_delay_cal_en_out[83:56] ),
    .delay_cal_en_out2      ( remap_delay_cal_en_in[83:56]  ),
    .delay_cal_mode2        ( remap_delay_cal_mode[11:8]    ),  //bank2,[3:0]:D/C/B/A
    .delay_cal_value2       ( remap_delay_cal_in[83:56]     ),
//delay ctrl signals, use phy_clk
    .delay_paddr0           ( remap_apb_dly_addr[23:0]      ),  //bank0,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data0            ( remap_apb_dly_data[35:0]      ),  //bank0,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel0             ( remap_apb_dly_sel[3:0]        ),  //bank0,[3:0]:D/C/B/A
    .delay_ranksel0         ( remap_delay_gate[3:0]         ),  //bank0,[3:0]:D/C/B/A
    .delay_dto0             ( remap_delay_dti[3:0]          ),  //bank0,[3:0]:D/C/B/A
    .delay_gate0            ( remap_apb_dly_gate[3:0]       ),  //bank0,[3:0]:D/C/B/A
    .delay_osc_div0         ( {4{delay_osc_div}}            ),  //bank0,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en0          ( {4{delay_osc_chain_en}}       ),  //bank0,[3:0]:D/C/B/A
    .delay_osc_wdq_sel0     ( remap_delay_osc_wdq_ac_sel[7:0]), //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel0   ( {4{delay_osc_wrlvl_sel}}      ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en0     ( {4{delay_testmode_en}}        ),  //bank0,[3:0]:D/C/B/A

    .delay_paddr1           ( remap_apb_dly_addr[47:24]     ),  //bank1,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data1            ( remap_apb_dly_data[71:36]     ),  //bank1,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel1             ( remap_apb_dly_sel[7:4]        ),  //bank1,[3:0]:D/C/B/A
    .delay_ranksel1         ( remap_delay_gate[7:4]         ),  //bank1,[3:0]:D/C/B/A
    .delay_dto1             ( remap_delay_dti[7:4]          ),  //bank1,[3:0]:D/C/B/A
    .delay_gate1            ( remap_apb_dly_gate[7:4]       ),  //bank1,[3:0]:D/C/B/A
    .delay_osc_div1         ( {4{delay_osc_div}}            ),  //bank1,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en1          ( {4{delay_osc_chain_en}}       ),  //bank1,[3:0]:D/C/B/A
    .delay_osc_wdq_sel1     ( remap_delay_osc_wdq_ac_sel[15:8]),//bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel1   ( {4{delay_osc_wrlvl_sel}}      ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en1     ( {4{delay_testmode_en}}        ),  //bank1,[3:0]:D/C/B/A

    .delay_paddr2           ( remap_apb_dly_addr[71:48]     ),  //bank2,[5:0]:A_bytelane;[11:6]: B_bytelane; [17:12]: C_bytelane; [23:18]: D_bytelane
    .delay_data2            ( remap_apb_dly_data[107:72]    ),  //bank2,[8:0]:A_bytelane;[17:9]: B_bytelane; [26:18]: C_bytelane; [35:27]: D_bytelane
    .delay_sel2             ( remap_apb_dly_sel[11:8]       ),  //bank2,[3:0]:D/C/B/A
    .delay_ranksel2         ( remap_delay_gate[11:8]        ),  //bank2,[3:0]:D/C/B/A
    .delay_dto2             ( remap_delay_dti[11:8]         ),  //bank2,[3:0]:D/C/B/A
    .delay_gate2            ( remap_apb_dly_gate[11:8]      ),  //bank2,[3:0]:D/C/B/A
    .delay_osc_div2         ( {4{delay_osc_div}}            ),  //bank2,[3:0]:A_bytelane;[7:4]:B_bytelane;[11:8]:C_bytelane;[15:12]:D_bytelane
    .delay_osc_en2          ( {4{delay_osc_chain_en}}       ),  //bank2,[3:0]:D/C/B/A
    .delay_osc_wdq_sel2     ( remap_delay_osc_wdq_ac_sel[23:16]),//bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_osc_wrlvl_sel2   ( {4{delay_osc_wrlvl_sel}}      ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
    .delay_testmode_en2     ( {4{delay_testmode_en}}        ),  //bank2,[3:0]:D/C/B/A

//APB bus signals
    .apb_clk                ( phy_apb_clk           ),
    .apb_rst_n              ( phy_apb_rst_n         ),
    .apb_addr               ( phy_apb_addr          ),
    .apb_enable             ( phy_apb_enable        ),
    .apb_error              ( phy_apb_error         ),
    .apb_rdata              ( phy_apb_rdata         ),
    .apb_ready              ( phy_apb_ready         ),
    .apb_sync_path_sel      ( apb_sync_path_sel     ),
    .apb_wdata              ( phy_apb_wdata         ),
    .apb_wr_rdn             ( phy_apb_wr_rdn        ),
    .apb_sel                ( phy_apb_sel           ),

//data signals, need to use the bit width parameter
    .phy_rd_dm              ( phy_rd_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata              ( phy_rdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_rd_en              ( phy_rd_en             ),  //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_rdata_se           ( phy_rdata_se          ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_rd_dqsn            ( phy_rd_dqsn           ),
    .phy_rd_dqsp            ( phy_rd_dqsp           ),

    .phy_wr_dm              ( phy_wr_dm             ),  //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wdata              ( phy_wdata             ),  //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    .phy_wr_en              ( phy_wr_en             ),  //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    .phy_wrdata_se          ( phy_wrdata_se         ),  //2 single pad per bank, 6 pads in 3 banks;
    .phy_wr_dqsn            ( phy_wr_dqsn           ),
    .phy_wr_dqsp            ( phy_wr_dqsp           ),

//dqs signals
    .dqs_rd_gate_status0    ( dqs_rd_gate_status0   ),  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p0  ( dqs_rd_gate_status_p0 ),  //bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status1    ( dqs_rd_gate_status1   ),  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p1  ( dqs_rd_gate_status_p1 ),  //bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rd_gate_status2    ( dqs_rd_gate_status2   ),  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                        //clock domain: ddr_clk, serial signals
    .dqs_rd_gate_status_p2  ( dqs_rd_gate_status_p2 ),  //bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                        //clock domain: phy_clk, parallel signals
    .dqs_rstn0              ( dqs_rstn0             ),  //bank0,[3:0]:D/C/B/A
    .dqs_rstn1              ( dqs_rstn1             ),  //bank1,[3:0]:D/C/B/A
    .dqs_rstn2              ( dqs_rstn2             ),  //bank2,[3:0]:D/C/B/A
    .dqs_cnt                ( remap_dqs_cnt         ),  //[7:0]: bank0_bytelane_D/C/B/A; [15:8]:bank1_bytelane_D/C/B/A; [23:16]:bank2_bytelane_D/C/B/A
    .dqs_iogate_rdata       ( dqs_iogate_rdata      ),  //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_gate_en         ( dqs_rd_gate_en        ),  //read dqs gate enable; [7:0]: bank0_bytelane_A; 
                                                        //[95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    .dqs_rd_en_shadow       ( dqs_rd_en_shadow ),


//debug signals
    .atpg_mode0             ( {5{atpg_mode}}                ),  //bank0,[4:0]:pzq/D/C/B/A
    .atpg_mode1             ( {5{atpg_mode}}                ),  //bank1,[4:0]:pzq/D/C/B/A
    .atpg_mode2             ( {5{atpg_mode}}                ),  //bank2,[4:0]:pzq/D/C/B/A
    .loopback_clk_sel       ( remap_loopback_clk_sel        ),  //[1:0]: bank0_bytelane_A; [7:0]: bank0_bytelane_D/C/B/A;
                                                                //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    .loopback_clknum_sel    ( remap_loopback_clknum_sel     ),  //[1:0]: bank0_bytelane_A; [7:0]: bank0_bytelane_D/C/B/A;
                                                                //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_low( loopback_fifo_datain_low     ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .loopback_fifo_datain_upp( loopback_fifo_datain_upp     ),
    .loopback_fifo_resp_low ( remap_loopback_fifo_resp_low  ),
    .loopback_fifo_resp_upp ( remap_loopback_fifo_resp_upp  ),
    .loopback_fifo_rstn_low ( remap_loopback_fifo_rstn_low  ),
    .loopback_fifo_rstn_upp ( remap_loopback_fifo_rstn_upp  ),
    .loopback_mode          ( remap_loopback_mode           ),
    .loopback_en            ( remap_loopback_en             ),
                                                                //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    .offcal_clrcfg          ( offcal_clrcfg_o               ),  //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    .offcal_done            ( offcal_done_i                 ),
    .offcal_start           ( offcal_start_o                ),
    .offcal_update_en       ( offcal_update_en_o            ),
    .offcal_vt_update_en_in ( offcal_vt_update_en_in_o      ),
    .offcal_vt_update_en_out( offcal_vt_update_en_out_i     ),

    .phy_rd_dqs_pdr0        ( remap_phy_rd_dqs_pdr[31:0]    ),  //IO power downreceiver;
    .phy_rd_dqs_pdr1        ( remap_phy_rd_dqs_pdr[63:32]   ),
    .phy_rd_dqs_pdr2        ( remap_phy_rd_dqs_pdr[95:64]   ),
    .phy_rd_dqs_te0         ( remap_phy_rd_dqs_te[31:0]     ),  //IO termination enable;
    .phy_rd_dqs_te1         ( remap_phy_rd_dqs_te[63:32]    ),
    .phy_rd_dqs_te2         ( remap_phy_rd_dqs_te[95:64]    ),
    .wrlvl_en               ( remap_wrlvl_mode              ),  //write leveling enable;
    .wrlvl_qin              ( wrlvl_wrqout                  ),  //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    .wrlvl_qout             ( wrlvl_rdqout                  ),
    .dqs_pupd_en            ( dqs_pupd_en_o                 ),  //dqs pull-up and pull-down enable when training
    .clb2phy_vref0          ( 24'hffffff                    ),
    .clb2phy_vref1          ( 24'hffffff                    ),
    .clb2phy_vref2          ( 24'hffffff                    ),
    .clb2phy_vref3          ( 24'hffffff                    ),
    .zqcal_clrcfg           ( {zqcal_clrcfg_o,zqcal_clrcfg_o,zqcal_clrcfg_o}        ),
    .zqcal_done             ( zqcal_done_i                                          ),
    .zqcal_start            ( {zqcal_start_o,zqcal_start_o,zqcal_start_o}           ),
    .zqcal_update_en        ( {zqcal_update_en_o,zqcal_update_en_o,zqcal_update_en_o}),
    .zqcal_vt_update_en_in  ( {3{zqcal_vt_update_en_in_o}}                          ),
    .zqcal_vt_update_en_out ( zqcal_vt_update_en_out_i                              ),
    .vref_value_sel         ( {remap_vref_rank_sel[8],remap_vref_rank_sel[9],remap_vref_rank_sel[10],remap_vref_rank_sel[11],
                               remap_vref_rank_sel[4],remap_vref_rank_sel[5],remap_vref_rank_sel[6],remap_vref_rank_sel[7],
                               remap_vref_rank_sel[0],remap_vref_rank_sel[1],remap_vref_rank_sel[2],remap_vref_rank_sel[3]}),
    .vref_ctrl_value        ( {remap_vref_ctrl_value[125:112],remap_vref_ctrl_value[139:126],remap_vref_ctrl_value[153:140],remap_vref_ctrl_value[167:154],
                               remap_vref_ctrl_value[69:56  ],remap_vref_ctrl_value[83:70  ],remap_vref_ctrl_value[97:84  ],remap_vref_ctrl_value[111:98 ],
                               remap_vref_ctrl_value[13:0   ],remap_vref_ctrl_value[27:14  ],remap_vref_ctrl_value[41:28  ],remap_vref_ctrl_value[55:42  ]}),
    .zqcal_debug_data0      ( zqcal_debug_data0             ),
    .zqcal_debug_data1      ( zqcal_debug_data1             ),
    .zqcal_debug_data2      ( zqcal_debug_data2             ),
    .dqsgr_debug_data0      ( dqsgr_debug_data0             ),
    .dqsgr_debug_data1      ( dqsgr_debug_data1             ),
    .dqsgr_debug_data2      ( dqsgr_debug_data2             )

);

`ifdef USE_EFFICIENCY_EQUALIZER
ph1_logic_ddrphy_gate_gen_glue u_gate_gen (
    .ctl_clk                   ( hctrl_clk       ),
    .ctl_rst_n                 ( rst_n                  ),
    .dfi_cs_n                  ( dfi_cs_n               ),
    .dfi_act_n                 ( dfi_act_n              ),
    .dfi_ras_n                 ( dfi_ras_n              ),
    .dfi_cas_n                 ( dfi_cas_n              ),
    .dfi_we_n                  ( dfi_we_n               ),
    .dfi_rddata_en             ( dfi_rddata_en          ),
    .gate_ctl_qs_en            ( hctrl2mem_rdqs_en_pre  ),
    .phy_ctl_qs_en             ( hctrl2mem_rdqs_en      ),

    .apb_clk                   ( gate_apb_clk           ),
    .apb_rst_n                 ( gate_apb_rst_n         ),
    .apb_ready                 ( gate_apb_ready         ),
    .apb_enable                ( gate_apb_enable        ),
    .apb_sel                   ( gate_apb_sel           ),
    .apb_wr_rdn                ( gate_apb_wr_rdn        ),
    .apb_addr                  ( gate_apb_addr          ),
    .apb_rdata                 ( gate_apb_rdata         ),
    .apb_wdata                 ( gate_apb_wdata         ),
    .apb_error                 ( gate_apb_error         )

);

`endif

endmodule


`timescale 1ps/1ps

module ph1_logic_bus_matrix(
//---------------------apb bus and general signals--------------------------------------------------
        input                             sys_rstn,
        input                             sys_clk,

//----------------ports lay on between phy_control and bus_matrix----------------------------------
//control signals, between hard controller and fabric/IOL
        input[8:0]                      ctrlclk_en_gate_upp,
        input[8:0]                      rdclk_en_gate_upp,
        input[8:0]                      ddrclk_en_gate_upp,
        input                           ctrlclk_en_gate_low,
        input                           rdclk_en_gate_low,
        input                           ddrclk_en_gate_low,
        input[8:0]                      rstn_upp,
        input                           rstn_low,
//signals are relative to SDRAM, between hard controller and fabric/IOL
        output reg[143:0]               hctrl_addr,
        output reg[15:0]                hctrl_cke,
        output reg[15:0]                hctrl_odt,
        output reg[15:0]                hctrl_cs_n,
        output reg[15:0]                hctrl_bg,
        output reg[15:0]                hctrl_ba,
        output reg[7:0]                 hctrl_act_n,
        output reg[7:0]                 hctrl_parity,
        output reg[7:0]                 hctrl_alert_n,
        output reg[17:0]                hctrl_datain_en_upp,
        output reg[575:0]               hctrl_dqin,
        output reg[71:0]                hctrl_dmin,
        output reg[71:0]                dqs_gate_in,
        input[15:0]                     hctrl2mem_ck,
        input                           hctrl2mem_ram_rst_n,
        input[15:0]                     hctrl2mem_cke,
        input[15:0]                     hctrl2mem_cs_n,
        input[15:0]                     hctrl2mem_odt,
        input[15:0]                     hctrl2mem_bg,
        input[15:0]                     hctrl2mem_ba,
        input[7:0]                      hctrl2mem_act_n,
        input[143:0]                    hctrl2mem_addr,
        input[7:0]                      hctrl2mem_parity,
        input[575:0]                    hctrl2mem_dqout,
        input[71:0]                     hctrl2mem_dmout,
        input[71:0]                     hctrl2mem_dataout_en,
        input[71:0]                     hctrl2mem_wdqsout,
        input[71:0]                     hctrl2mem_rdqs_en,
        output                          hctrl_datain_en_low,
//apb signals, between hard controller and fabric/IOL
        input[12:0]                     apb_dly_sel,
        input[59:0]                     apb_dly_addr,
        input[89:0]                     apb_dly_data,
        input[9:0]                      apb_dly_gate,
        input                           apb_dfi_io_pd,

//zcal control, between hard controller and fabric/IOL
        input                           zqcal_clrcfg,
        input                           zqcal_start,
        input                           zqcal_update_en,
        input                           zqcal_vt_update_en_in,
        output [2:0]                    zqcal_vt_update_en_out,
        output [2:0]                    zqcal_done,

//DCC control, between hard controller and fabric/IOL
        input                           dcc_clrcfg,
        input                           dcc_start,
        input                           dcc_update_en,
        input                           dcc_vt_update_en_in,
        output [11:0]                   dcc_vt_update_en_out,
        output [11:0]                   dcc_done,

//Delay Line calibration, between hard controller and fabric/IOL
         //delay control
        output reg[62:0]                delay_cal_en_in_upp,
        output reg[62:0]                delay_cal_in_upp,
        output [1:0]                    delay_cal_en_in_low,
        output [1:0]                    delay_cal_in_low,
        input[8:0]                      delay_cal_mode_upp,
        input[62:0]                     delay_cal_clk_en_upp,
        input[62:0]                     delay_cal_en_out_upp,
        input                           delay_cal_mode_low,
        input[1:0]                      delay_cal_clk_en_low,
        input[1:0]                      delay_cal_en_out_low,

//debug signals, between hard controller and fabric/IOL
        input[8:0]                      loopback_fifo_rstn_upp,
        input                           loopback_fifo_rstn_low,
        input[8:0]                      delay_gate,
        output reg[17:0]                phy_dqs_cnt,
        input                           loopback_fifo_resp_low,
        input                           loopback_fifo_resp_upp,
        output reg[17:0]                phy_status,
        input[8:0]                      wrlvl_mode,
        output reg[71:0]                wrlvl_qin, //remap_wrlvl_qin
        input                           loopback_mode,
        input[1:0]                      loopback_clknum_sel,
        input[1:0]                      loopback_clk_sel,
        input[71:0]                     hctrl2io_pdr,
        input[71:0]                     hctrl2io_odt_en,
        output reg[8:0]                 delay_dti_upp,
        input[8:0]                      hctrl_vref_rank_sel_upp,
        input[7:0]                      loopback_en_in,
        input[17:0]                     loopback_fifo_dataout_upp,
        input                           loopback_fifo_dataout_low,
        output[2:0]                     delay_dti_low,
        input[3:0]                      delay_osc_div,
        input[1:0]                      delay_osc_wrlvl_sel,
        input[1:0]                      delay_osc_wdata_sel,
        input[1:0]                      delay_osc_sel_low,
        input[41:0]                     vref_value_low,
        input[125:0]                    vref_value_upp,
        input                           dqs_pupd_en_i,
//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
        output                          o_dfi_io_pd,
        input[71:0]                     wrlvl_rdqout, //A_wrlvl_qout
        output reg[95:0]                wrlvl_wrqout,
        input[31:0]                     dqs_rd_gate_status_p0,//bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                                            //clock domain: phy_clk, parallel signals
        input[31:0]                     dqs_rd_gate_status_p1,//bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                //clock domain: phy_clk, parallel signals
        input[31:0]                     dqs_rd_gate_status_p2,//bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
                                                                                    //clock domain: phy_clk, parallel signals
        output reg[11:0]                mc0_phy_clk_wren_gt, //clock gate signal of phy_clk in write operation ;ctlclk_en_gt
        output reg[11:0]                mc0_phy_clk_rden_gt, //clock gate signal of phy_clk in read operation;
        output[3:0]                     phy_ddr_clk_gate0,   //phy_clk and ddr_clk gate signal
        output[3:0]                     phy_ddr_clk_gate1,   //phy_clk and ddr_clk gate signal
        output[3:0]                     phy_ddr_clk_gate2,   //phy_clk and ddr_clk gate signal
        output reg[11:0]                phy_rstn_low,
        output reg[11:0]                phy_rstn_upp,
        input[12*8-1:0]                 phy_rd_dm,    //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        input[12*64-1:0]                phy_rdata,    //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
        input[11:0]                     phy_rd_en,    //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        input[6*8-1:0]                  phy_rdata_se, //2 single pad per bank, 6 pairs pads in 3 banks;
        input[12*8-1:0]                 phy_rd_dqsn,
        input[12*8-1:0]                 phy_rd_dqsp,
        output[12*8-1:0]                phy_wr_dm,    //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        output[12*64-1:0]               phy_wdata,    //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
        output reg[12*8-1:0]            phy_wr_en,    //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
        output reg[6*8-1:0]             phy_wrdata_se,//2 single pad per bank, 6 pads in 3 banks;
        output [12*8-1:0]               phy_wr_dqsn,
        output[12*8-1:0]                phy_wr_dqsp,
        input[95:0]                     dqs_iogate_rdata,           //[7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
        output reg[12*8-1:0]            dqs_rd_gate_en,             //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
        output[12*8-1:0]                dqs_rd_en_shadow,
        output[11:0]                    dqs_pupd_en_o,                  //dqs pull-up and pull-down enable when training
        output reg[11:0]                remap_apb_dly_sel,
        output reg[71:0]                remap_apb_dly_addr,
        output reg[107:0]               remap_apb_dly_data,
        output reg[11:0]                remap_apb_dly_gate,
        input[83:0]                     remap_delay_cal_en_in,
        input[83:0]                     remap_delay_cal_in,
        output reg[11:0]                remap_delay_cal_mode,
        output reg[83:0]                remap_delay_cal_clk_en,
        output reg[83:0]                remap_delay_cal_en_out,
        input[7:0]                      dqs_rd_gate_status0,  //bank0,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                        //clock domain: ddr_clk, serial signals
        input[7:0]                      dqs_rd_gate_status1,  //bank1,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                        //clock domain: ddr_clk, serial signals
        input[7:0]                      dqs_rd_gate_status2,  //bank2,[1:0]:A_bytelane;[3:2]:B_bytelane;[5:4]:C_bytelane;[7:6]:D_bytelane
                                                                                                    //clock domain: ddr_clk, serial signals
        output reg[11:0]                remap_loopback_fifo_rstn_upp,
        output reg[11:0]                remap_loopback_fifo_rstn_low,
//dqs signals
        output[3:0]                     dqs_rstn0,          //bank0,[3:0]:D/C/B/A
        output[3:0]                     dqs_rstn1,          //bank1,[3:0]:D/C/B/A
        output[3:0]                     dqs_rstn2,          //bank2,[3:0]:D/C/B/A
        output reg[11:0]                loopback_fifo_datain_low,//[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
        output reg[11:0]                loopback_fifo_datain_upp,
        output reg[167:0]               remap_vref_ctrl_value,
        input[23:0]                     remap_dqs_cnt,
        output[11:0]                    remap_loopback_fifo_resp_upp,
        output[11:0]                    remap_loopback_fifo_resp_low,
        output reg[11:0]                remap_delay_gate, //dly_ranksel
        output[23:0]                    remap_loopback_clknum_sel,
        output[23:0]                    remap_loopback_clk_sel,
        output [95:0]                   remap_loopback_en,
        input[11:0]                     remap_delay_dti,
        output reg[23:0]                remap_delay_osc_wdq_ac_sel,
        output reg[11:0]                remap_wrlvl_mode,
        output[11:0]                    remap_loopback_mode,
        output reg[95:0]                remap_phy_rd_dqs_pdr,
        output reg[95:0]                remap_phy_rd_dqs_te,
        output reg[11:0]                remap_vref_rank_sel,

//zcal control, between hard controller and fabric/IOL
        output                          zqcal_clrcfg_o,
        output                          zqcal_start_o,
        output                          zqcal_update_en_o,
        output                          zqcal_vt_update_en_in_o,
        input [2:0]                     zqcal_vt_update_en_out_i,
        input [2:0]                     zqcal_done_i,

//DCC control, between hard controller and fabric/IOL
        output                          dcc_clrcfg_o,
        output                          dcc_start_o,
        output                          dcc_update_en_o,
        output                          dcc_vt_update_en_in_o,
        input [11:0]                    dcc_vt_update_en_out_i,
        input [11:0]                    dcc_done_i
);

        parameter BYTE_LANE_0                   = 4'b1111;   //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
        parameter BYTE_LANE_1                   = 4'b1111;
        parameter BYTE_LANE_2                   = 4'b1111;
        parameter DATA_CTRL_0                   = 4'b1111;   // [3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
        parameter DATA_CTRL_1                   = 4'b0001;
        parameter DATA_CTRL_2                   = 4'b1111;
        parameter ADDR_MAP                      = 215'h000_138_139_12b_13a_130_119_129_127_12a_13b_124_122_113_132_115_121_126;
        parameter CK_MAP                        = 48'h137_136_117_116;
        parameter BANK_MAP                      = 60'h000_000_000_135_114;
        parameter CKE_MAP                       = 24'h134_133;
        parameter ODT_MAP                       = 24'h11b_120;
        parameter CS_MAP                        = 24'h118_128;

        parameter DQS_GATE_MAP                  = 108'h101_214_201_224_23b_014_03b_001_02a;
        parameter DQS_BYTE_MAP                  = 215'h107_106_217_216_207_206_227_226_237_236_017_016_037_036_007_006_027_026;

`ifdef DRAM_DDR4
        parameter DM_DBI_MAP                    = 108'h105_218_200_228_231_018_039_00a_020;
        parameter ACT_MAP                       = 12'h000;
        parameter BANK_GROUP_MAP                = 24'h000_000;
        parameter PARITY_MAP                    = 12'h000;
        parameter ALERT_MAP                     = 12'h000; 
        parameter BG_WIDTH                      = 2;
`elsif DRAM_DDR3
        parameter CAS_MAP                       = 12'h000;
        parameter RAS_MAP                       = 12'h000;
        parameter WE_MAP                        = 12'h000;
        parameter DM_MAP                        = 108'h105_218_200_228_231_018_039_00a_020;
`endif
        parameter RESET_MAP                     = 12'h11a;
        parameter DATA0_MAP                     = 96'h025_022_02b_029_021_028_023_024;
        parameter DATA1_MAP                     = 96'h00b_005_009_002_008_004_003_000;
        parameter DATA2_MAP                     = 96'h033_031_03a_034_038_030_032_035;
        parameter DATA3_MAP                     = 96'h012_015_010_01b_013_019_011_01a;
        parameter DATA4_MAP                     = 96'h232_239_233_235_230_234_238_23a;
        parameter DATA5_MAP                     = 96'h222_223_220_22b_221_22a_225_229;
        parameter DATA6_MAP                     = 96'h20a_205_202_209_203_208_204_20b;
        parameter DATA7_MAP                     = 96'h211_219_215_21b_210_213_212_21a;
        parameter DATA8_MAP                     = 96'h10a_109_100_103_102_108_104_10b;
        parameter LOC_DX_BYTELANE_MAP           = 72'h10_21_20_22_23_01_03_00_02;
        parameter LOC_AC_BYTELANE_MAP           = 32'h00_13_11_12;

        parameter DQS_GATE_WIDTH                = 9;
        parameter ADDR_WIDTH                    = 17;   //DRAM address bus width
        parameter ROW_WIDTH                     = 17;
        parameter BANK_WIDTH                    = 2;
        parameter ODT_WIDTH                     = 1;
        parameter CK_WIDTH                      = 1;       // # of CK/CK# outputs to memory
        parameter CKE_WIDTH                     = 1;       // # of cke outputs
        parameter CS_WIDTH                      = 1;       // # of unique CS outputs
        parameter DQ_WIDTH                      = 72;
        parameter DQS_WIDTH                     = 9;       // # of DQS (strobe)
        parameter DM_WIDTH                      = 9;
        parameter DCI                           = "DISABLE"; // "ENABLE", "DISABLE"
        parameter AC_WIDTH                      = 3;


//-------------------collect all beats together---------------------
        reg[15:0]                   tmp_hctrl2mem_ck;
        reg[15:0]                   tmp_hctrl2mem_cke;
        reg[15:0]                   tmp_hctrl2mem_cs_n;
        reg[15:0]                   tmp_hctrl2mem_odt;
        reg[15:0]                   tmp_hctrl2mem_bg;
        reg[15:0]                   tmp_hctrl2mem_ba;
        reg[7:0]                    tmp_hctrl2mem_act_n;
        reg[143:0]                  tmp_hctrl2mem_addr;
        reg[575:0]                  tmp_hctrl2mem_dqout;
        reg[7:0]                    tmp_hctrl2mem_parity;
        reg[575:0]                  tmp_hctrl_dqin;

//------------------read data collect all beats together-----------------------
        reg [143:0]                 tmp_hctrl_addr;
        reg [15:0]                  tmp_hctrl_cke;
        reg [15:0]                  tmp_hctrl_odt;
        reg [15:0]                  tmp_hctrl_cs_n;
        reg [15:0]                  tmp_hctrl_bg;
        reg [15:0]                  tmp_hctrl_ba;
        reg [7:0]                   tmp_hctrl_act_n;
        reg [7:0]                   tmp_hctrl_parity;

//---------------------------------------------
        reg[11:0]                   phy_ddr_clk_gate;

//---------------------------------------------
        reg[8:0]                                    rstn_upp_r;
        reg                                         rstn_low_r;
        reg[15:0]                                   hctrl2mem_ck_r;
        reg                                         hctrl2mem_ram_rst_n_r;
        reg[15:0]                                   hctrl2mem_cke_r;
        reg[15:0]                                   hctrl2mem_cs_n_r;
        reg[15:0]                                   hctrl2mem_odt_r;
        reg[15:0]                                   hctrl2mem_bg_r;
        reg[15:0]                                   hctrl2mem_ba_r;
        reg[7:0]                                    hctrl2mem_act_n_r;
        reg[143:0]                                  hctrl2mem_addr_r;
        reg[7:0]                                    hctrl2mem_parity_r;
        reg[575:0]                                  hctrl2mem_dqout_r;
        reg[71:0]                                   hctrl2mem_dmout_r;
        reg[71:0]                                   hctrl2mem_dataout_en_r;
        reg[71:0]                                   hctrl2mem_wdqsout_r;
        reg[71 :0]                                  hctrl2mem_rdqs_en_r;
        reg[8:0]                                    loopback_fifo_rstn_upp_r;
        reg                                         loopback_fifo_rstn_low_r;
        reg[71:0]                                   hctrl2io_pdr_r;
        reg[71:0]                                   hctrl2io_odt_en_r;

localparam FULL_DATA_MAP = {DATA8_MAP,DATA7_MAP,DATA6_MAP,DATA5_MAP,DATA4_MAP,DATA3_MAP,DATA2_MAP,DATA1_MAP,DATA0_MAP};

//apb signals, between hard controller and fabric/IOL
        reg[12:0]                   apb_dly_sel_r  ;
        reg[59:0]                   apb_dly_addr_r ;
        reg[89:0]                   apb_dly_data_r ;
        reg[9:0]                    apb_dly_gate_r ;

//Delay Line calibration, between hard controller and fabric/IOL
         //delay control
        reg[8:0]                    delay_cal_mode_upp_r;
        reg[62:0]                   delay_cal_clk_en_upp_r;
        reg[62:0]                   delay_cal_en_out_upp_r;
        reg                         delay_cal_mode_low_r;
        reg[1:0]                    delay_cal_clk_en_low_r;
        reg[1:0]                    delay_cal_en_out_low_r;

//debug signals, between hard controller and fabric/IOL
        reg[8:0]                    delay_gate_r;
        reg                         loopback_fifo_resp_low_r;
        reg                         loopback_fifo_resp_upp_r;
        reg[8:0]                    wrlvl_mode_r;
        reg[8:0]                    hctrl_vref_rank_sel_upp_r;
        reg[17:0]                   loopback_fifo_dataout_upp_r;
        reg                         loopback_fifo_dataout_low_r;
        reg[41:0]                   vref_value_low_r;
        reg[125:0]                  vref_value_upp_r;
//-------------- ports lay on between bus_matrix and ddrphy ------------------------------------------
        reg[71:0]                   wrlvl_rdqout_r;
        reg[31:0]                   dqs_rd_gate_status_p0_r;
        reg[31:0]                   dqs_rd_gate_status_p1_r;
        reg[31:0]                   dqs_rd_gate_status_p2_r;
        reg[12*8-1:0]               phy_rd_dm_r;
        reg[12*64-1:0]              phy_rdata_r;
        reg[11:0]                   phy_rd_en_r;
        reg[6*8-1:0]                phy_rdata_se_r;
        reg[12*8-1:0]               phy_rd_dqsn_r;
        reg[12*8-1:0]               phy_rd_dqsp_r;
        reg[95:0]                   dqs_iogate_rdata_r;
        reg[83:0]                   remap_delay_cal_en_in_r;
        reg[83:0]                   remap_delay_cal_in_r;
        reg[7:0]                    dqs_rd_gate_status0_r;
        reg[7:0]                    dqs_rd_gate_status1_r;
        reg[7:0]                    dqs_rd_gate_status2_r;
        reg[23:0]                   remap_dqs_cnt_r;
        reg[11:0]                   remap_delay_dti_r;

always@( posedge sys_clk or negedge sys_rstn )
begin
    if(!sys_rstn) begin
        rstn_upp_r                      <= 9'd0;
        rstn_low_r                      <= 1'b0;
        hctrl2mem_ck_r                  <= 16'd0;
        hctrl2mem_ram_rst_n_r           <= 1'b0;
        hctrl2mem_cke_r                 <= 16'd0;
        hctrl2mem_cs_n_r                <= 16'hffff;
        hctrl2mem_odt_r                 <= 16'd0;
        hctrl2mem_bg_r                  <= 16'd0;
        hctrl2mem_ba_r                  <= 16'd0;
        hctrl2mem_act_n_r               <= 8'hff;
        hctrl2mem_addr_r                <= 144'd0;
        hctrl2mem_parity_r              <= 8'd0;
        hctrl2mem_dqout_r               <= 576'd0;
        hctrl2mem_dmout_r               <= 72'd0;
        hctrl2mem_dataout_en_r          <= 72'd0;
        hctrl2mem_wdqsout_r             <= 72'd0;
        hctrl2mem_rdqs_en_r             <= 72'd0;
        loopback_fifo_rstn_upp_r        <= 9'd0;
        loopback_fifo_rstn_low_r        <= 1'b0;
        hctrl2io_pdr_r                  <= 72'd0;
        hctrl2io_odt_en_r               <= 72'd0;
    end else begin
        rstn_upp_r                      <= rstn_upp                     ;
        rstn_low_r                      <= rstn_low                     ;
        hctrl2mem_ck_r                  <= hctrl2mem_ck                 ;
        hctrl2mem_ram_rst_n_r           <= hctrl2mem_ram_rst_n          ;
        hctrl2mem_cke_r                 <= hctrl2mem_cke                ;
        hctrl2mem_cs_n_r                <= hctrl2mem_cs_n               ;
        hctrl2mem_odt_r                 <= hctrl2mem_odt                ;
        hctrl2mem_bg_r                  <= hctrl2mem_bg                 ;
        hctrl2mem_ba_r                  <= hctrl2mem_ba                 ;
        hctrl2mem_act_n_r               <= hctrl2mem_act_n              ;
        hctrl2mem_addr_r                <= hctrl2mem_addr               ;
        hctrl2mem_parity_r              <= hctrl2mem_parity             ;
        hctrl2mem_dqout_r               <= hctrl2mem_dqout              ;
        hctrl2mem_dmout_r               <= hctrl2mem_dmout              ;
        hctrl2mem_dataout_en_r          <= hctrl2mem_dataout_en         ;
        hctrl2mem_wdqsout_r             <= hctrl2mem_wdqsout            ;
        hctrl2mem_rdqs_en_r             <= hctrl2mem_rdqs_en            ;
        loopback_fifo_rstn_upp_r        <= loopback_fifo_rstn_upp       ;
        loopback_fifo_rstn_low_r        <= loopback_fifo_rstn_low       ;
        hctrl2io_pdr_r                  <= hctrl2io_pdr                 ;
        hctrl2io_odt_en_r               <= hctrl2io_odt_en              ;
    end
end

always @ (posedge sys_clk or negedge sys_rstn)
begin
    if ( !sys_rstn ) begin
        apb_dly_sel_r          <= 13'd0;
        apb_dly_addr_r         <= 60'd0;
        apb_dly_data_r         <= 90'd0;
        apb_dly_gate_r         <= 10'd0;

        delay_cal_mode_upp_r   <= 9'd0 ;
        delay_cal_clk_en_upp_r <= 63'd0;
        delay_cal_en_out_upp_r <= 63'd0;
        delay_cal_mode_low_r   <= 1'd0 ;
        delay_cal_clk_en_low_r <= 2'd0 ;
        delay_cal_en_out_low_r <= 2'd0 ;

        delay_gate_r           <= 10'd0;
        loopback_fifo_resp_low_r    <= 1'd0;
        loopback_fifo_resp_upp_r    <= 1'd0;
        wrlvl_mode_r                <= 9'd0;
        hctrl_vref_rank_sel_upp_r   <= 9'd0;
        loopback_fifo_dataout_upp_r <= 18'd0;
        loopback_fifo_dataout_low_r <= 1'd0;
        vref_value_low_r            <= 42'd0;
        vref_value_upp_r            <= 126'd0;

        wrlvl_rdqout_r          <= 72 'd0;
        dqs_rd_gate_status_p0_r <= 32 'd0;
        dqs_rd_gate_status_p1_r <= 32 'd0;
        dqs_rd_gate_status_p2_r <= 32 'd0;
        phy_rd_dm_r             <= 96 'd0;
        phy_rdata_r             <= 768'd0;
        phy_rd_en_r             <= 12 'd0;
        phy_rdata_se_r          <= 48 'd0;
        phy_rd_dqsn_r           <= 96 'd0;
        phy_rd_dqsp_r           <= 96 'd0;
        dqs_iogate_rdata_r      <= 96 'd0;
        remap_delay_cal_en_in_r <= 84 'd0;
        remap_delay_cal_in_r    <= 84 'd0;
        dqs_rd_gate_status0_r   <= 8  'd0;
        dqs_rd_gate_status1_r   <= 8  'd0;
        dqs_rd_gate_status2_r   <= 8  'd0;
        remap_dqs_cnt_r         <= 24 'd0;
        remap_delay_dti_r       <= 12 'd0;
    end else begin
        apb_dly_sel_r               <= apb_dly_sel;
        apb_dly_addr_r              <= apb_dly_addr;
        apb_dly_data_r              <= apb_dly_data;
        apb_dly_gate_r              <= apb_dly_gate;

        delay_cal_mode_upp_r        <= delay_cal_mode_upp;
        delay_cal_clk_en_upp_r      <= delay_cal_clk_en_upp;
        delay_cal_en_out_upp_r      <= delay_cal_en_out_upp;
        delay_cal_mode_low_r        <= delay_cal_mode_low;
        delay_cal_clk_en_low_r      <= delay_cal_clk_en_low;
        delay_cal_en_out_low_r      <= delay_cal_en_out_low;

        delay_gate_r                <= delay_gate;
        loopback_fifo_resp_low_r    <= loopback_fifo_resp_low   ;
        loopback_fifo_resp_upp_r    <= loopback_fifo_resp_upp   ;
        wrlvl_mode_r                <= wrlvl_mode               ;
        hctrl_vref_rank_sel_upp_r   <= hctrl_vref_rank_sel_upp  ;
        loopback_fifo_dataout_upp_r <= loopback_fifo_dataout_upp;
        loopback_fifo_dataout_low_r <= loopback_fifo_dataout_low;
        vref_value_low_r            <= vref_value_low           ;
        vref_value_upp_r            <= vref_value_upp           ;


        wrlvl_rdqout_r              <= wrlvl_rdqout         ;
        dqs_rd_gate_status_p0_r     <= dqs_rd_gate_status_p0;
        dqs_rd_gate_status_p1_r     <= dqs_rd_gate_status_p1;
        dqs_rd_gate_status_p2_r     <= dqs_rd_gate_status_p2;
        phy_rd_dm_r                 <= phy_rd_dm            ;
        phy_rdata_r                 <= phy_rdata            ;
        phy_rd_en_r                 <= phy_rd_en            ;
        phy_rdata_se_r              <= phy_rdata_se         ;
        phy_rd_dqsn_r               <= phy_rd_dqsn          ;
        phy_rd_dqsp_r               <= phy_rd_dqsp          ;
        dqs_iogate_rdata_r          <= dqs_iogate_rdata     ;
        remap_delay_cal_en_in_r     <= remap_delay_cal_en_in;
        remap_delay_cal_in_r        <= remap_delay_cal_in   ;
        dqs_rd_gate_status0_r       <= dqs_rd_gate_status0  ;
        dqs_rd_gate_status1_r       <= dqs_rd_gate_status1  ;
        dqs_rd_gate_status2_r       <= dqs_rd_gate_status2  ;
        remap_dqs_cnt_r             <= remap_dqs_cnt        ;
        remap_delay_dti_r           <= remap_delay_dti      ;
    end
end

//zcal control, between hard controller and fabric/IOL

assign zqcal_clrcfg_o = zqcal_clrcfg;
assign zqcal_start_o = zqcal_start;
assign zqcal_update_en_o = zqcal_update_en;
assign zqcal_vt_update_en_in_o = zqcal_vt_update_en_in;
assign zqcal_vt_update_en_out = zqcal_vt_update_en_out_i;
assign zqcal_done[0] = (BYTE_LANE_0 != 0) ?  zqcal_done_i[0] : 1'b1;
assign zqcal_done[1] = (BYTE_LANE_1 != 0) ?  zqcal_done_i[1] : 1'b1;
assign zqcal_done[2] = (BYTE_LANE_2 != 0) ?  zqcal_done_i[2] : 1'b1;


//DCC control, between hard controller and fabric/IOL
assign dcc_clrcfg_o = dcc_clrcfg;
assign dcc_start_o = dcc_start;
assign dcc_update_en_o = dcc_update_en;
assign dcc_vt_update_en_in_o = dcc_vt_update_en_in;
assign dcc_vt_update_en_out = dcc_vt_update_en_out_i;
assign dcc_done = dcc_done_i;


assign o_dfi_io_pd = apb_dfi_io_pd;

assign dqs_pupd_en_o = {12{dqs_pupd_en_i}};

assign phy_ddr_clk_gate0 = phy_ddr_clk_gate[3:0];
assign phy_ddr_clk_gate1 = phy_ddr_clk_gate[7:4];
assign phy_ddr_clk_gate2 = phy_ddr_clk_gate[11:8];

//delay control
assign delay_cal_en_in_low[0] = remap_delay_cal_en_in_r[(28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]) + 2];
assign delay_cal_en_in_low[1] = remap_delay_cal_en_in_r[ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]];
assign delay_cal_in_low[0]    = remap_delay_cal_in_r   [ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0] + 2];
assign delay_cal_in_low[1]    = remap_delay_cal_in_r   [ 28*LOC_AC_BYTELANE_MAP[7:4] + 7*LOC_AC_BYTELANE_MAP[3:0]];

wire[23:0] remap_phy_status = {dqs_rd_gate_status2_r,dqs_rd_gate_status1_r,dqs_rd_gate_status0_r};

//assign phy_status = {dqs_rd_gate_status2[1:0],dqs_rd_gate_status1,dqs_rd_gate_status0};
reg[11:0] remap_dqs_rstn;
assign dqs_rstn0 = remap_dqs_rstn[3:0];
assign dqs_rstn1 = remap_dqs_rstn[7:4];
assign dqs_rstn2 = remap_dqs_rstn[11:8];
assign remap_loopback_fifo_resp_upp = {12{loopback_fifo_resp_upp_r}};
assign remap_loopback_fifo_resp_low = {12{loopback_fifo_resp_low_r}};
assign remap_loopback_clknum_sel    = {12{loopback_clknum_sel}};
assign remap_loopback_clk_sel       = {12{loopback_clk_sel}};
assign remap_loopback_mode          = {12{loopback_mode}};
assign remap_loopback_en            = {12{loopback_en_in}};



reg[1151:0] remap_wr_data;
assign phy_wdata = { remap_wr_data[140*8 +: 16],remap_wr_data[132*8 +: 48],remap_wr_data[128*8 +: 16],remap_wr_data[120*8 +: 48]
                    ,remap_wr_data[116*8 +: 16],remap_wr_data[108*8 +: 48],remap_wr_data[104*8 +: 16],remap_wr_data[96*8  +: 48]
                    ,remap_wr_data[92*8  +: 16],remap_wr_data[84*8  +: 48],remap_wr_data[80*8  +: 16],remap_wr_data[72*8  +: 48]
                    ,remap_wr_data[68*8  +: 16],remap_wr_data[60*8  +: 48],remap_wr_data[56*8  +: 16],remap_wr_data[48*8  +: 48]
                    ,remap_wr_data[44*8  +: 16],remap_wr_data[36*8  +: 48],remap_wr_data[32*8  +: 16],remap_wr_data[24*8  +: 48]
                    ,remap_wr_data[20*8  +: 16],remap_wr_data[12*8  +: 48],remap_wr_data[8*8   +: 16],remap_wr_data[0     +: 48]};


assign dqs_rd_en_shadow = {remap_wr_data[143*8 +: 8],remap_wr_data[131*8 +: 8],remap_wr_data[119*8 +: 8],remap_wr_data[107*8 +: 8]
                          ,remap_wr_data[ 95*8 +: 8],remap_wr_data[ 83*8 +: 8],remap_wr_data[ 71*8 +: 8],remap_wr_data[ 59*8 +: 8]
                          ,remap_wr_data[ 47*8 +: 8],remap_wr_data[ 35*8 +: 8],remap_wr_data[ 23*8 +: 8],remap_wr_data[ 11*8 +: 8]};

//assign dqs_rd_gate_en = {remap_wr_data[143*8 +: 8],remap_wr_data[131*8 +: 8],remap_wr_data[119*8 +: 8],remap_wr_data[107*8 +: 8]
//                      ,remap_wr_data[95*8 +: 8],remap_wr_data[83*8 +: 8],remap_wr_data[71*8 +: 8],remap_wr_data[59*8 +: 8]
//                      ,remap_wr_data[47*8 +: 8],remap_wr_data[35*8 +: 8],remap_wr_data[23*8 +: 8],remap_wr_data[11*8 +: 8]};

assign phy_wr_dm =  {remap_wr_data[142*8 +: 8],remap_wr_data[130*8 +: 8],remap_wr_data[118*8 +: 8],remap_wr_data[106*8 +: 8]
                    ,remap_wr_data[ 94*8 +: 8],remap_wr_data[ 82*8 +: 8],remap_wr_data[ 70*8 +: 8],remap_wr_data[ 58*8 +: 8]
                    ,remap_wr_data[ 46*8 +: 8],remap_wr_data[ 34*8 +: 8],remap_wr_data[ 22*8 +: 8],remap_wr_data[ 10*8 +: 8]};

assign phy_wr_dqsn = {remap_wr_data[139*8 +: 8],remap_wr_data[127*8 +: 8],remap_wr_data[115*8 +: 8],remap_wr_data[103*8 +: 8]
                     ,remap_wr_data[ 91*8 +: 8],remap_wr_data[ 79*8 +: 8],remap_wr_data[ 67*8 +: 8],remap_wr_data[ 55*8 +: 8]
                     ,remap_wr_data[ 43*8 +: 8],remap_wr_data[ 31*8 +: 8],remap_wr_data[ 19*8 +: 8],remap_wr_data[  7*8 +: 8]};

assign phy_wr_dqsp= {remap_wr_data[138*8 +: 8],remap_wr_data[126*8 +: 8],remap_wr_data[114*8 +: 8],remap_wr_data[102*8 +: 8]
                    ,remap_wr_data[ 90*8 +: 8],remap_wr_data[ 78*8 +: 8],remap_wr_data[ 66*8 +: 8],remap_wr_data[ 54*8 +: 8]
                    ,remap_wr_data[ 42*8 +: 8],remap_wr_data[ 30*8 +: 8],remap_wr_data[ 18*8 +: 8],remap_wr_data[  6*8 +: 8] };

wire[1199:0] remap_rd_data = {phy_rdata_se_r    [ 2*16 +: 16]
                             ,dqs_iogate_rdata_r[11* 8 +:  8],phy_rd_dm_r[11*8 +: 8],phy_rdata_r[94*8+:16],phy_rd_dqsn_r[11*8+:8],phy_rd_dqsp_r[11*8+:8],phy_rdata_r[88*8+:48]
                             ,dqs_iogate_rdata_r[10* 8 +:  8],phy_rd_dm_r[10*8 +: 8],phy_rdata_r[86*8+:16],phy_rd_dqsn_r[10*8+:8],phy_rd_dqsp_r[10*8+:8],phy_rdata_r[80*8+:48]
                             ,dqs_iogate_rdata_r[ 9* 8 +:  8],phy_rd_dm_r[ 9*8 +: 8],phy_rdata_r[78*8+:16],phy_rd_dqsn_r[9*8+:8] ,phy_rd_dqsp_r[9*8+:8] ,phy_rdata_r[72*8+:48]
                             ,dqs_iogate_rdata_r[ 8* 8 +:  8],phy_rd_dm_r[ 8*8 +: 8],phy_rdata_r[70*8+:16],phy_rd_dqsn_r[8*8+:8] ,phy_rd_dqsp_r[8*8+:8] ,phy_rdata_r[64*8+:48]
                             ,phy_rdata_se_r    [ 1*16 +: 16]
                             ,dqs_iogate_rdata_r[ 7* 8 +:  8],phy_rd_dm_r[ 7*8 +: 8],phy_rdata_r[62*8+:16],phy_rd_dqsn_r[7*8+:8] ,phy_rd_dqsp_r[7*8+:8] ,phy_rdata_r[56*8+:48]
                             ,dqs_iogate_rdata_r[ 6* 8 +:  8],phy_rd_dm_r[ 6*8 +: 8],phy_rdata_r[54*8+:16],phy_rd_dqsn_r[6*8+:8] ,phy_rd_dqsp_r[6*8+:8] ,phy_rdata_r[48*8+:48]
                             ,dqs_iogate_rdata_r[ 5* 8 +:  8],phy_rd_dm_r[ 5*8 +: 8],phy_rdata_r[46*8+:16],phy_rd_dqsn_r[5*8+:8] ,phy_rd_dqsp_r[5*8+:8] ,phy_rdata_r[40*8+:48]
                             ,dqs_iogate_rdata_r[ 4* 8 +:  8],phy_rd_dm_r[ 4*8 +: 8],phy_rdata_r[38*8+:16],phy_rd_dqsn_r[4*8+:8] ,phy_rd_dqsp_r[4*8+:8] ,phy_rdata_r[32*8+:48]
                             ,phy_rdata_se_r    [    0 +: 16]
                             ,dqs_iogate_rdata_r[ 3* 8 +:  8],phy_rd_dm_r[ 3*8 +: 8],phy_rdata_r[30*8+:16],phy_rd_dqsn_r[3*8+:8] ,phy_rd_dqsp_r[3*8+:8] ,phy_rdata_r[24*8+:48]
                             ,dqs_iogate_rdata_r[ 2* 8 +:  8],phy_rd_dm_r[ 2*8 +: 8],phy_rdata_r[22*8+:16],phy_rd_dqsn_r[2*8+:8] ,phy_rd_dqsp_r[2*8+:8] ,phy_rdata_r[16*8+:48]
                             ,dqs_iogate_rdata_r[ 1* 8 +:  8],phy_rd_dm_r[ 1*8 +: 8],phy_rdata_r[14*8+:16],phy_rd_dqsn_r[1*8+:8] ,phy_rd_dqsp_r[1*8+:8] ,phy_rdata_r[8*8 +:48]
                             ,dqs_iogate_rdata_r[    0 +:  8],phy_rd_dm_r[   0 +: 8],phy_rdata_r[6*8 +:16],phy_rd_dqsn_r[0  +:8] ,phy_rd_dqsp_r[0  +:8] ,phy_rdata_r[0  +:48]};


reg[1199:0] remap_rd_data_r;
reg[  95:0] remap_dqs_gate_in_r;

always @ ( * )
begin
    if( !sys_rstn ) begin
        remap_rd_data_r <= 1200'd0;
        remap_dqs_gate_in_r    <= 96'd0;
    end else begin
        remap_rd_data_r <= remap_rd_data;
        remap_dqs_gate_in_r <= {dqs_rd_gate_status_p2_r, dqs_rd_gate_status_p1_r,dqs_rd_gate_status_p0_r};
    end

end

reg[575:0]  hctrl_dqin_pre;

//--------------collect all beats together---------------------

integer b_i,a_i,c_i;
always@(*)
begin: collect_block

        hctrl_dqin              = 576'd0;
        tmp_hctrl2mem_dqout     = 576'd0;
        hctrl_addr              = 144'd0;
        hctrl_bg                = 16 'd0;
        hctrl_ba                = 16 'd0;
        hctrl_act_n             = 8  'd0;
        hctrl_cs_n              = 16 'd0;
        hctrl_odt               = 16 'd0;
        hctrl_cke               = 16 'd0;
        hctrl_parity            =  8  'd0;

        for(b_i = 0; b_i < 8; b_i = b_i+1)
        begin
                //AC bus
                for(a_i=0; a_i<18; a_i=a_i+1) tmp_hctrl2mem_addr        [a_i*8+b_i] = hctrl2mem_addr_r    [b_i*18 + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_bg          [a_i*8+b_i] = hctrl2mem_bg_r      [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_ba          [a_i*8+b_i] = hctrl2mem_ba_r      [b_i*2  + a_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) tmp_hctrl2mem_act_n       [a_i*8+b_i] = hctrl2mem_act_n_r   [b_i*1  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_cs_n        [a_i*8+b_i] = hctrl2mem_cs_n_r    [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_odt         [a_i*8+b_i] = hctrl2mem_odt_r     [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_cke         [a_i*8+b_i] = hctrl2mem_cke_r     [b_i*2  + a_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) tmp_hctrl2mem_ck          [a_i*8+b_i] = hctrl2mem_ck_r      [a_i*8  + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) tmp_hctrl2mem_parity      [a_i*8+b_i] = hctrl2mem_parity_r  [b_i*1  + a_i];
/*
                //--------------loopback---------------------------
                for(a_i=0; a_i<18; a_i=a_i+1) hctrl_addr        [b_i*18 +a_i] = tmp_hctrl_addr   [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_bg          [b_i*2  +a_i] = tmp_hctrl_bg     [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_ba          [b_i*2  +a_i] = tmp_hctrl_ba     [a_i*8 + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) hctrl_act_n       [b_i*1  +a_i] = tmp_hctrl_act_n  [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_cs_n        [b_i*2  +a_i] = tmp_hctrl_cs_n   [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_odt         [b_i*2  +a_i] = tmp_hctrl_odt    [a_i*8 + b_i];
                for(a_i=0; a_i<2 ; a_i=a_i+1) hctrl_cke         [b_i*2  +a_i] = tmp_hctrl_cke    [a_i*8 + b_i];
                for(a_i=0; a_i<1 ; a_i=a_i+1) hctrl_parity      [b_i*1  +a_i] = tmp_hctrl_parity [a_i*8 + b_i];
*/
        end

        for(b_i = 0; b_i < 9; b_i = b_i+1)
//        for(b_i = 0; b_i<DQS_WIDTH; b_i=b_i+1)
        begin
            for(a_i = 0; a_i < 8; a_i = a_i+1) begin
                for(c_i=0; c_i<8; c_i = c_i+1)    tmp_hctrl2mem_dqout [a_i+8*(c_i+b_i*8)] = hctrl2mem_dqout_r [c_i+8*(a_i+b_i*8)];
                for(c_i=0; c_i<8; c_i = c_i+1)    hctrl_dqin          [c_i+8*(a_i+b_i*8)] = tmp_hctrl_dqin    [a_i+8*(c_i+b_i*8)];
            end
        end
end


integer n;
always @(*)
begin
    remap_wr_data    = 1152'd0;
    phy_wrdata_se    = 48'd0;
    wrlvl_qin        = 72'd0;

    phy_dqs_cnt      = 18'd0;
    tmp_hctrl_dqin   = 576'd0;
    hctrl_dmin       = 72'd0;

//-----------------------ddr_reset--------------------------------------------------------------------
 `ifdef USE_RESET
    if(RESET_MAP[3:0] < 4'hc) begin
        remap_wr_data[(384*RESET_MAP[11:8]+96*RESET_MAP[7:4]+8*RESET_MAP[3:0]) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end else if((RESET_MAP[3:0] == 4'hc) && (RESET_MAP[7:4] == 4'h0)) begin
        phy_wrdata_se[(16*RESET_MAP[11:8]) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end else begin
        phy_wrdata_se[(16*RESET_MAP[11:8] + 8) +: 8] = {8{hctrl2mem_ram_rst_n_r}};
    end
 `endif
//------------------------ddr_ck-----------------------------------------------------------------------
    for(n = 0; n < CK_WIDTH; n = n + 1) begin
        remap_wr_data[(384*CK_MAP[(12*(2*n+1)+8) +: 3]+96*CK_MAP[(12*(2*n+1)+4) +: 2]+8*CK_MAP[12*(2*n+1) +: 4]) +: 8] = ~tmp_hctrl2mem_ck[8*n +: 8];
        remap_wr_data[(384*CK_MAP[(12* 2*n   +8) +: 3]+96*CK_MAP[(12* 2*n   +4) +: 2]+8*CK_MAP[12* 2*n    +: 4]) +: 8] =  tmp_hctrl2mem_ck[8*n +: 8];
    end


    for(n = 0; n < CKE_WIDTH; n = n + 1) begin
        if(CKE_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*CKE_MAP[(12*n+8) +: 3]+96*CKE_MAP[(12*n+4) +: 2]+8*CKE_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cke[8*0 +: 8];
        `else
            remap_wr_data[(384*CKE_MAP[(12*n+8) +: 3]+96*CKE_MAP[(12*n+4) +: 2]+8*CKE_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cke[8*n +: 8];
        `endif
        end else if((CKE_MAP[12*n +: 4] == 4'hc) && (CKE_MAP[(12*n+4) +: 2] == 4'h0))  begin
            phy_wrdata_se[(16*CKE_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_cke[8*0 +: 8];
        end else begin
            phy_wrdata_se[(16*CKE_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_cke[8*n +: 8];
        end
    end
 `ifdef USE_CS
    for(n = 0; n < CS_WIDTH; n = n + 1) begin
        if(CS_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*CS_MAP[(12*n+8) +: 3]+96*CS_MAP[(12*n+4) +: 2]+8*CS_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cs_n[8*0 +: 8];
        `else
            remap_wr_data[(384*CS_MAP[(12*n+8) +: 3]+96*CS_MAP[(12*n+4) +: 2]+8*CS_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        `endif
        end else if((CS_MAP[12*n +: 4] == 4'hc) && (CS_MAP[(12*n+4) +: 2] == 4'h0)) begin
            phy_wrdata_se[(16*CS_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        end else begin
            phy_wrdata_se[(16*CS_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_cs_n[8*n +: 8];
        end
    end
 `endif
    for(n = 0; n < ODT_WIDTH; n = n + 1) begin
        if(ODT_MAP[12*n +: 4] < 4'hc) begin
        `ifdef USE_APC101_BOARD
            remap_wr_data[(384*ODT_MAP[(12*n+8) +: 3]+96*ODT_MAP[(12*n+4) +: 2]+8*ODT_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_odt[8*0 +: 8];
        `else
            remap_wr_data[(384*ODT_MAP[(12*n+8) +: 3]+96*ODT_MAP[(12*n+4) +: 2]+8*ODT_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        `endif
        end else if((ODT_MAP[12*n +: 4] == 4'hc) && (ODT_MAP[(12*n+4) +: 2] == 4'h0)) begin
            phy_wrdata_se[(16*ODT_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        end else begin
            phy_wrdata_se[(16*ODT_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_odt[8*n +: 8];
        end
    end

//------------------------------------address----------------------------------------------

    for(n = 0; n < ADDR_WIDTH; n = n + 1) begin
        if(ADDR_MAP[12*n +: 4] < 4'hc) begin
             remap_wr_data[(384*ADDR_MAP[(12*n+8) +: 3]+96*ADDR_MAP[(12*n+4) +: 2]+8*ADDR_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end else if((ADDR_MAP[12*n +: 4] == 4'hc) && (ADDR_MAP[(12*n+4) +: 2] == 4'h0)) begin
             phy_wrdata_se[(16*ADDR_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end else begin
             phy_wrdata_se[(16*ADDR_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_addr[8*n +: 8];
        end
    end

`ifdef DRAM_DDR4

    //-------------------------------------bank address--------------------------------------
    
        for(n = 0; n < BANK_WIDTH; n = n + 1) begin
            if(BANK_MAP[12*n +: 4] < 4'hc) begin
                remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end else begin
                phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
            end
        end
    
    
    //----------------------bank group---------------------------------------------------------
    
        for(n = 0; n < BG_WIDTH; n = n + 1) begin
            if(BANK_GROUP_MAP[12*n +: 4] < 4'hc) begin
                remap_wr_data[(384*BANK_GROUP_MAP[(12*n+8) +: 3]+96*BANK_GROUP_MAP[(12*n+4) +: 2]+8*BANK_GROUP_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end else if((BANK_GROUP_MAP[12*n +: 4] == 4'hc) && (BANK_GROUP_MAP[(12*n+4) +: 2] == 4'h0)) begin
                phy_wrdata_se[(16*BANK_GROUP_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end else begin
                phy_wrdata_se[(16*BANK_GROUP_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_bg[8*n +: 8];
            end
        end
    

    
    //----------------------------------parity---------------------------------------------
     `ifdef USE_PAR_ALERT
            if(PARITY_MAP[3:0] < 4'hc) begin
                 remap_wr_data[(384*PARITY_MAP[11:8]+96*PARITY_MAP[7:4]+8*PARITY_MAP[3:0]) +: 8] = tmp_hctrl2mem_parity;
            end else if((PARITY_MAP[3:0] == 4'hc) && (PARITY_MAP[7:4] == 4'h0)) begin
                 phy_wrdata_se[(16*PARITY_MAP[11:8]) +: 8] = tmp_hctrl2mem_parity;
            end else begin
                 phy_wrdata_se[(16*PARITY_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_parity;
            end
    
    //----------------------------alert----------------------------------------
    
            if(ALERT_MAP[3:0] < 4'hc) begin
                 hctrl_alert_n = remap_rd_data_r[(400*ALERT_MAP[11:8]+96*ALERT_MAP[7:4]+8*ALERT_MAP[3:0]) +: 8];
            end else if((ALERT_MAP[3:0] == 4'hc) && (ALERT_MAP[7:4] == 4'h0)) begin
                 hctrl_alert_n = remap_rd_data_r[(50*ALERT_MAP[11:8] + 48)*8 +: 8];
            end else begin
                 hctrl_alert_n = remap_rd_data_r[(50*ALERT_MAP[11:8] + 49)*8 +: 8];
            end
     `else
           hctrl_alert_n = 8'hff;
     `endif
    //------------------------------------ACT_N-----------------------------------------------
    
            if(ACT_MAP[3:0] < 4'hc) begin
                 remap_wr_data[(384*ACT_MAP[11:8]+96*ACT_MAP[7:4]+8*ACT_MAP[3:0]) +: 8] = tmp_hctrl2mem_act_n;
            end else if((ACT_MAP[3:0] == 4'hc) && (ACT_MAP[7:4] == 4'h0)) begin
                 phy_wrdata_se[(16*ACT_MAP[11:8]) +: 8] = tmp_hctrl2mem_act_n;
            end else begin
                 phy_wrdata_se[(16*ACT_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_act_n;
            end
//-------------------------------------------ddr_dm------------------------------------------------------
 `ifdef USE_DM
    for(n = 0; n < DM_WIDTH; n = n + 1) begin
         
    `ifdef USE_PING_PONG_PHY
        if(n < (DM_WIDTH/2)) begin
            remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
            hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8];
        end else begin
            remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*(4+n-(DM_WIDTH/2)) +: 8];
            hctrl_dmin[(4+n-(DM_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8];
        end
    `else
        hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8]; 
        remap_wr_data[(384*DM_DBI_MAP[(12*n+8) +: 3]+96*DM_DBI_MAP[(12*n+4) +: 2]+8*DM_DBI_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
    `endif
    end
 `endif 

`elsif DRAM_DDR3
    //-------------------------------------ras_n--------------------------------------
        if(RAS_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*RAS_MAP[11:8]+96*RAS_MAP[7:4]+8*RAS_MAP[3:0]) +: 8] = tmp_hctrl2mem_act_n;
        end else if((RAS_MAP[3:0] == 4'hc) && (RAS_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*RAS_MAP[11:8]) +: 8] = tmp_hctrl2mem_act_n;
        end else begin
             phy_wrdata_se[(16*RAS_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_act_n;
        end

    //-------------------------------------cas_n--------------------------------------

        if(CAS_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*CAS_MAP[11:8]+96*CAS_MAP[7:4]+8*CAS_MAP[3:0]) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end else if((CAS_MAP[3:0] == 4'hc) && (CAS_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*CAS_MAP[11:8]) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end else begin
             phy_wrdata_se[(16*CAS_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_addr[17*8 +: 8];
        end
    //-------------------------------------we_n--------------------------------------
        if(WE_MAP[3:0] < 4'hc) begin
             remap_wr_data[(384*WE_MAP[11:8]+96*WE_MAP[7:4]+8*WE_MAP[3:0]) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end else if((WE_MAP[3:0] == 4'hc) && (WE_MAP[7:4] == 4'h0)) begin
             phy_wrdata_se[(16*WE_MAP[11:8]) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end else begin
             phy_wrdata_se[(16*WE_MAP[11:8] + 8) +: 8] = tmp_hctrl2mem_addr[16*8 +: 8];
        end

    //-------------------------------------bank address--------------------------------------
    
        for(n = 0; n < BANK_WIDTH; n = n + 1) 
        begin
            if (n < 2) begin
                if(BANK_MAP[12*n +: 4] < 4'hc) begin
                    remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];        
                end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                    phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
                end else begin
                    phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_ba[8*n +: 8];
                end
            end else begin
                if(BANK_MAP[12*n +: 4] < 4'hc) begin
                     remap_wr_data[(384*BANK_MAP[(12*n+8) +: 3]+96*BANK_MAP[(12*n+4) +: 2]+8*BANK_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];       
                end else if((BANK_MAP[12*n +: 4] == 4'hc) && (BANK_MAP[(12*n+4) +: 2] == 4'h0)) begin
                     phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3]) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];
                end else begin
                     phy_wrdata_se[(16*BANK_MAP[(12*n+8) +: 3] + 8) +: 8] = tmp_hctrl2mem_bg[8*(n-2) +: 8];
                end
            end
        end
    //-------------------------------------------ddr_dm------------------------------------------------------
        `ifdef USE_DM
            for(n = 0; n < DM_WIDTH; n = n + 1) begin
                `ifdef USE_PING_PONG_PHY
                    if(n < (DM_WIDTH/2)) begin
                        remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
                        hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8];
                    end else begin
                        remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*(4+n-(DM_WIDTH/2)) +: 8];
                        hctrl_dmin[(4+n-(DM_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8];
                    end
                `else
                    hctrl_dmin[n*8 +: 8] = remap_rd_data_r[(400*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8]; 
                    remap_wr_data[(384*DM_MAP[(12*n+8) +: 3]+96*DM_MAP[(12*n+4) +: 2]+8*DM_MAP[12*n +: 4]) +: 8] = hctrl2mem_dmout_r[8*n +: 8];
                `endif
            end
        `endif    
    
`endif    



`ifdef USE_DQS_GATE

    for (n = 0; n < DQS_GATE_WIDTH; n = n + 1) begin
        `ifdef USE_PING_PONG_PHY
             if(n < (DQS_GATE_WIDTH/2))
                 remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
             else
                 remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*(4+n-(DQS_GATE_WIDTH/2)) +: 8];
        `else
             remap_wr_data[(384*DQS_GATE_MAP[(12*n+8) +: 3]+96*DQS_GATE_MAP[(12*n+4) +: 2]+8*DQS_GATE_MAP[12*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
        `endif
    end

`endif
//-----------------------------------------------------------------------------------------------
    for(n = 0; n < DQ_WIDTH; n = n + 1) begin
    `ifdef USE_PING_PONG_PHY
        if(n < (DQ_WIDTH/2)) begin
            remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*n +: 8];
            tmp_hctrl_dqin[n*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
            wrlvl_qin[n] = wrlvl_rdqout_r[n];
        end else begin
            remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*(4*8+n-(DQ_WIDTH/2)) +: 8];
            tmp_hctrl_dqin[(4*8+n-(DQ_WIDTH/2))*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
            wrlvl_qin[4*8+n-(DQ_WIDTH/2)] = wrlvl_rdqout_r[n];
        end
    `else
         remap_wr_data[(384*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8] = tmp_hctrl2mem_dqout[8*n +: 8];
         tmp_hctrl_dqin[n*8 +: 8] = remap_rd_data_r[(400*FULL_DATA_MAP[(12*n+8) +: 3]+96*FULL_DATA_MAP[(12*n+4) +: 2]+8*FULL_DATA_MAP[12*n +: 4]) +: 8];
         wrlvl_qin[n] = wrlvl_rdqout_r[n];
    `endif
    end

//----------------------------------------------ddr_dqs----------------------------------------------------------------
    for(n = 0; n < DQS_WIDTH; n = n + 1) begin
    `ifdef USE_PING_PONG_PHY
        if (n < (DQS_WIDTH/2))  begin
            remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
            remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*n +: 8];
            phy_dqs_cnt[2*n +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
        end else begin
            remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_dqs_cnt[2*(4+n-(DQS_WIDTH/2)) +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
        end
    `else
         remap_wr_data[(384*DQS_BYTE_MAP[(12*2*n+8) +: 3]+96*DQS_BYTE_MAP[(12*2*n+4) +: 2]+8*DQS_BYTE_MAP[12*2*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
         remap_wr_data[(384*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3]+96*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2]+8*DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8] = ~hctrl2mem_wdqsout_r[8*n +: 8];
         phy_dqs_cnt[2*n +:2] = remap_dqs_cnt_r [(8*DQS_BYTE_MAP[(12*2*n+8) +: 3] + 2*DQS_BYTE_MAP[(12*2*n+4) +: 2]) +: 2];
    `endif
    end

end

wire[55:0] vref_value_low_r_4ac = {vref_value_low_r[13:0], vref_value_low_r};
reg [ 3:0] delay_dti_low_4ac;
assign delay_dti_low = delay_dti_low_4ac[2:0];

integer x;
always @(*)
begin

    phy_wr_en                       = 96'd0;
    hctrl_datain_en_upp             = 18'd0;
    dqs_gate_in                     = 72'd0;
    wrlvl_wrqout                    = 96'd0;
    remap_delay_cal_mode            = 12'd0;
    remap_delay_cal_clk_en          = 84'd0;
    remap_delay_cal_en_out          = 84'd0;
    phy_status                      = 18'd0;
    remap_loopback_fifo_rstn_upp    = 12'hfff;
    delay_cal_in_upp                = 63'd0;
    delay_cal_en_in_upp             = 63'd0;
    remap_loopback_fifo_rstn_low    = 12'hfff;
    remap_dqs_rstn                  = 12'hfff;
    loopback_fifo_datain_low        = 12'd0;
    loopback_fifo_datain_upp        = 12'd0;
    remap_vref_ctrl_value           = 168'd0;
    remap_delay_gate                = 12'd0;
    delay_dti_upp                   = 9'd0;
    remap_delay_osc_wdq_ac_sel      = 24'd0;
    remap_wrlvl_mode                = 12'd0;
    remap_phy_rd_dqs_pdr            = 96'hffff_ffff_ffff_ffff_ffff_ffff;
    remap_phy_rd_dqs_te             = 96'hffff_ffff_ffff_ffff_ffff_ffff;
    remap_vref_rank_sel             = 12'd0;
    remap_apb_dly_sel               = 12'd0;
    remap_apb_dly_addr              = 72'd0;
    remap_apb_dly_data              = 108'd0;
    remap_apb_dly_gate              = 12'd0;
    mc0_phy_clk_wren_gt             = 12'hfff;
    mc0_phy_clk_rden_gt             = 12'd0;
    phy_ddr_clk_gate                = 12'hfff;
    phy_rstn_low                    = 12'hfff;
    phy_rstn_upp                    = 12'hfff;
    delay_dti_low_4ac               = 4'd0;
    delay_dti_upp                   = 9'd0;
    dqs_rd_gate_en                  = 96'd0;


    for(n = 0; n < DQS_WIDTH; n= n+1 ) begin
         remap_dqs_rstn            [ 4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]      = sys_rstn;
         remap_delay_osc_wdq_ac_sel[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2]= delay_osc_wdata_sel;
    end

    for(x = 0; x < AC_WIDTH; x = x + 1) begin
        phy_wr_en                   [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        wrlvl_wrqout                [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_delay_cal_mode        [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = delay_cal_mode_low_r;
        remap_delay_cal_clk_en      [(28*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  7*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  7] = {4'd0,delay_cal_clk_en_low_r[0],1'b0,delay_cal_clk_en_low_r[1]};
        remap_delay_cal_en_out      [(28*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  7*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  7] = {4'd0,delay_cal_en_out_low_r[0],1'b0,delay_cal_en_out_low_r[1]};
        remap_loopback_fifo_rstn_upp[  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_rstn_low_r;
        remap_loopback_fifo_rstn_low[  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_rstn_low_r;
        remap_dqs_rstn              [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = sys_rstn;
        loopback_fifo_datain_low    [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_dataout_low_r;
        loopback_fifo_datain_upp    [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = loopback_fifo_dataout_low_r;
        remap_vref_ctrl_value       [(56*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] + 14*LOC_AC_BYTELANE_MAP[8*x +: 4]) +: 14] = vref_value_low_r_4ac[14*x +: 14];
        remap_delay_gate            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = delay_gate_r[0];
        remap_delay_osc_wdq_ac_sel  [( 8*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  2*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  2] = delay_osc_sel_low;
        remap_wrlvl_mode            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = 1'b0;
        remap_phy_rd_dqs_pdr        [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_phy_rd_dqs_te         [(32*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  8*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  8] = {8'h00};
        remap_vref_rank_sel         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = 1'b0;
        remap_apb_dly_sel           [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = apb_dly_sel_r[3 - LOC_AC_BYTELANE_MAP[8*x +: 4]];
        remap_apb_dly_addr          [(24*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  6*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  6] = apb_dly_addr_r[5:0];
        remap_apb_dly_data          [(36*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +  9*LOC_AC_BYTELANE_MAP[8*x +: 4]) +:  9] = apb_dly_data_r[8:0];
        remap_apb_dly_gate          [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = apb_dly_gate_r[0];
        mc0_phy_clk_wren_gt         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = ctrlclk_en_gate_low;
        mc0_phy_clk_rden_gt         [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rdclk_en_gate_low;
        phy_ddr_clk_gate            [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = ddrclk_en_gate_low;
        phy_rstn_low                [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rstn_low_r;
        phy_rstn_upp                [  4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] +    LOC_AC_BYTELANE_MAP[8*x +: 4]]        = rstn_low_r;
        delay_dti_low_4ac[x] = remap_delay_dti[4*LOC_AC_BYTELANE_MAP[(8*x+4) +:4 ] + LOC_AC_BYTELANE_MAP[8*x +: 4]];
    end

    for(n = 0; n < DQS_WIDTH; n= n+1 ) begin
    `ifdef USE_PING_PONG_PHY

        if(n < (DQS_WIDTH/2)) begin
            hctrl_datain_en_upp[n*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
            dqs_gate_in        [n*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
            phy_status         [n*2 +: 2] = remap_phy_status   [( 8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
            delay_dti_upp      [n]        = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]];
            {delay_cal_en_in_upp[n*7 + 3],delay_cal_en_in_upp[n*7 + 6],delay_cal_en_in_upp[n*7 + 4],delay_cal_en_in_upp[n*7 + 2],delay_cal_en_in_upp[n*7 + 1],delay_cal_en_in_upp[n*7 + 0],delay_cal_en_in_upp[n*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            {delay_cal_in_upp   [n*7 + 3],delay_cal_in_upp   [n*7 + 6],delay_cal_in_upp   [n*7 + 4],delay_cal_in_upp   [n*7 + 2],delay_cal_in_upp   [n*7 + 1],delay_cal_in_upp   [n*7 + 0],delay_cal_in_upp   [n*7 + 5] }= remap_delay_cal_in_r   [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = ~hctrl2mem_dataout_en_r[8*n +: 8];
            dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +: 4] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
            phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
            phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
            remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
            remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
            remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r[8*n +: 8];
            phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp[n];
            mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp[n];
            mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp[n];
            wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
            remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r[8*n +: 8];
            remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r[n+1];
            remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r[n+4];
            remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r[(6*n+6) +: 6];
            remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r[(9*n+9) +: 9];
            remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r[n];
            remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r[n];
            remap_delay_cal_clk_en  [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7]  = {delay_cal_clk_en_upp_r[7*n + 3],delay_cal_clk_en_upp_r[7*n + 6],delay_cal_clk_en_upp_r[7*n + 4],delay_cal_clk_en_upp_r[7*n + 2],delay_cal_clk_en_upp_r[7*n + 1],delay_cal_clk_en_upp_r[7*n + 0],delay_cal_clk_en_upp_r[7*n + 5]};
            remap_delay_cal_en_out  [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7]  = {delay_cal_en_out_upp_r[7*n + 3],delay_cal_en_out_upp_r[7*n + 6],delay_cal_en_out_upp_r[7*n + 4],delay_cal_en_out_upp_r[7*n + 2],delay_cal_en_out_upp_r[7*n + 1],delay_cal_en_out_upp_r[7*n + 0],delay_cal_en_out_upp_r[7*n + 5]};
            remap_delay_gate        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = delay_gate_r[n];        
            remap_wrlvl_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = wrlvl_mode_r[n]; 
            remap_vref_ctrl_value   [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14] = vref_value_upp_r[14*n +: 14];       
            loopback_fifo_datain_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = loopback_fifo_dataout_upp_r[n];
            loopback_fifo_datain_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]        = loopback_fifo_dataout_upp_r[n];
        end else begin
            hctrl_datain_en_upp [  (4+n-(DQS_WIDTH/2))*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
            dqs_gate_in         [  (4+n-(DQS_WIDTH/2))*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
            delay_dti_upp       [   4+n-(DQS_WIDTH/2)]         = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]];
            phy_status          [2*(4+n-(DQS_WIDTH/2)) +: 2] = remap_phy_status[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
            {delay_cal_en_in_upp[  (4+n-(DQS_WIDTH/2))*7 + 3],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 6],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 4],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 2],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 1],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 0],delay_cal_en_in_upp[(4+n-(DQS_WIDTH/2))*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            {delay_cal_in_upp   [  (4+n-(DQS_WIDTH/2))*7 + 3],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 6],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 4],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 2],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 1],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 0],delay_cal_in_upp   [(4+n-(DQS_WIDTH/2))*7 + 5] }= remap_delay_cal_in_r   [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
            phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] =~hctrl2mem_dataout_en_r     [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r        [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r                 [   (4+n-(DQS_WIDTH/2))];
            phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r                 [   (4+n-(DQS_WIDTH/2))];
            remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r   [    4+n-(DQS_WIDTH/2)];
            remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r   [    4+n-(DQS_WIDTH/2)];
            remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r             [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp         [    4+n-(DQS_WIDTH/2)];
            mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp        [    4+n-(DQS_WIDTH/2)];
            mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp          [    4+n-(DQS_WIDTH/2)];
            wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r        [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r          [ 8*(4+n-(DQS_WIDTH/2)) +: 8];
            remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r             [   (4+n-(DQS_WIDTH/2))+1];
            remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r              [   (4+n-(DQS_WIDTH/2))+4];
            remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r             [(6*(4+n-(DQS_WIDTH/2))+6) +: 6];
            remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r             [(9*(4+n-(DQS_WIDTH/2))+9) +: 9];
            remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r  [   (4+n-(DQS_WIDTH/2))];
            remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r       [    4+n-(DQS_WIDTH/2)];
            remap_delay_cal_clk_en      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_clk_en_upp_r    [ 7*(4+n-(DQS_WIDTH/2)) + 3],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 6],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 4],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 2],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 1],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 0],delay_cal_clk_en_upp_r[7*(4+n-(DQS_WIDTH/2)) + 5]};
            remap_delay_cal_en_out      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_en_out_upp_r    [ 7*(4+n-(DQS_WIDTH/2)) + 3],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 6],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 4],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 2],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 1],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 0],delay_cal_en_out_upp_r[7*(4+n-(DQS_WIDTH/2)) + 5]};
            remap_delay_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_gate_r               [   (4+n-(DQS_WIDTH/2))];        
            remap_wrlvl_mode            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = wrlvl_mode_r               [   (4+n-(DQS_WIDTH/2))];  
            remap_vref_ctrl_value       [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14]= vref_value_upp_r           [14*(4+n-(DQS_WIDTH/2)) +: 14];  
            loopback_fifo_datain_low    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[    4+n-(DQS_WIDTH/2)];
            loopback_fifo_datain_upp    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[    4+n-(DQS_WIDTH/2)];
    end
 
    `else
         phy_status         [n*2 +: 2] = remap_phy_status[(8*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 2*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 2];
         hctrl_datain_en_upp[n*2 +: 2] = {2{phy_rd_en_r[4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + LOC_DX_BYTELANE_MAP[8*n +: 4]]}};
         dqs_gate_in        [n*8 +: 8] = remap_dqs_gate_in_r[(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8];
         delay_dti_upp      [n]        = remap_delay_dti_r  [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +   LOC_DX_BYTELANE_MAP[8*n +: 4]];
         {delay_cal_en_in_upp[n*7 + 3],delay_cal_en_in_upp[n*7 + 6],delay_cal_en_in_upp[n*7 + 4],delay_cal_en_in_upp[n*7 + 2],delay_cal_en_in_upp[n*7 + 1],delay_cal_en_in_upp[n*7 + 0],delay_cal_en_in_upp[n*7 + 5] }= remap_delay_cal_en_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
         {delay_cal_in_upp[n*7 + 3],delay_cal_in_upp[n*7 + 6],delay_cal_in_upp[n*7 + 4],delay_cal_in_upp[n*7 + 2],delay_cal_in_upp[n*7 + 1],delay_cal_in_upp[n*7 + 0],delay_cal_in_upp[n*7 + 5] }= remap_delay_cal_in_r[(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7 ];
         phy_wr_en                   [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] =~hctrl2mem_dataout_en_r[8*n +: 8];
         dqs_rd_gate_en              [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_rdqs_en_r[8*n +: 8];
         phy_rstn_low                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
         phy_rstn_upp                [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rstn_upp_r[n];
         remap_loopback_fifo_rstn_upp[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
         remap_loopback_fifo_rstn_low[  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_rstn_upp_r[n];
         remap_phy_rd_dqs_pdr        [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_pdr_r[8*n +: 8];
         phy_ddr_clk_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ddrclk_en_gate_upp[n];
         mc0_phy_clk_wren_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = ctrlclk_en_gate_upp[n];
         mc0_phy_clk_rden_gt         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = rdclk_en_gate_upp[n];
         wrlvl_wrqout                [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2mem_wdqsout_r[8*n +: 8];
         remap_phy_rd_dqs_te         [(32*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  8*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 8] = hctrl2io_odt_en_r[8*n +: 8];
         remap_apb_dly_gate          [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_gate_r[n+1];
         remap_apb_dly_sel           [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = apb_dly_sel_r[n+4];
         remap_apb_dly_addr          [(24*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  6*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 6] = apb_dly_addr_r[(6*n+6) +: 6];
         remap_apb_dly_data          [(36*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  9*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 9] = apb_dly_data_r[(9*n+9) +: 9];
         remap_vref_rank_sel         [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = hctrl_vref_rank_sel_upp_r[n];
         remap_delay_cal_mode        [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_cal_mode_upp_r[n];
         remap_delay_cal_clk_en      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_clk_en_upp_r[7*n + 3],delay_cal_clk_en_upp_r[7*n + 6],delay_cal_clk_en_upp_r[7*n + 4],delay_cal_clk_en_upp_r[7*n + 2],delay_cal_clk_en_upp_r[7*n + 1],delay_cal_clk_en_upp_r[7*n + 0],delay_cal_clk_en_upp_r[7*n + 5]};
         remap_delay_cal_en_out      [(28*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +  7*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 7] = {delay_cal_en_out_upp_r[7*n + 3],delay_cal_en_out_upp_r[7*n + 6],delay_cal_en_out_upp_r[7*n + 4],delay_cal_en_out_upp_r[7*n + 2],delay_cal_en_out_upp_r[7*n + 1],delay_cal_en_out_upp_r[7*n + 0],delay_cal_en_out_upp_r[7*n + 5]};
         remap_delay_gate            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = delay_gate_r[n];  
         remap_wrlvl_mode            [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = wrlvl_mode_r[n];  
         remap_vref_ctrl_value       [(56*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] + 14*LOC_DX_BYTELANE_MAP[8*n +: 4]) +: 14]= vref_value_upp_r[14*n +: 14];
         loopback_fifo_datain_low    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[n];
         loopback_fifo_datain_upp    [  4*LOC_DX_BYTELANE_MAP[(8*n+4) +:4 ] +    LOC_DX_BYTELANE_MAP[8*n +: 4]]       = loopback_fifo_dataout_upp_r[n];
    `endif

    end
end

assign hctrl_datain_en_low = phy_rd_en_r[4*LOC_AC_BYTELANE_MAP[7:4] + LOC_AC_BYTELANE_MAP[3:0]];


endmodule



`timescale 1ps / 1ps

module ph1_logic_ddrphy_streamlined #(

    parameter TCK            = 1250,         //memory tCK parameter, clock period in ps
    parameter NCK_PER_CLK    = 4,            //4,2. Fabric clk period : Memory clk period
    parameter DQS_GATE       = "Internal",   //Internal, External
    parameter LOOPBACK_CTRL  = "DISABLE",    //DISABLE, ENABLE
    parameter CTRL_INDEX     = 0,            //multi-controller, 0: ctrl0; 1: ctrl1.

// bank and pad position parameters about ddr bus
    parameter BYTE_LANE_0    = 4'b1111,      //[3:0]: bytelane_D/C/B/A; 1: used; 0: unused;
    parameter BYTE_LANE_1    = 4'b1111,
    parameter BYTE_LANE_2    = 4'b1111,
    parameter DATA_CTRL_0    = 4'b1000,      //[3:0]: bytelane_D/C/B/A; 1: dq/dqs/dm signals; 0: AC signals
    parameter DATA_CTRL_1    = 4'b1111,
    parameter DATA_CTRL_2    = 4'b1111,
    parameter ADDR_MAP       = 216'h000_018_016_017_014_015_012_013_010_011_008_009_006_007_002_003_000_001,
    parameter CK_MAP         = 48'h004_005,
    parameter BANK_MAP       = 36'h000_025_024,
    parameter CKE_MAP        = 24'h020,
    parameter ODT_MAP        = 24'h000_023,
    parameter CS_MAP         = 24'h000_022,

`ifdef DRAM_DDR4
    parameter BANK_GROUP_MAP = 24'h020_019,
    parameter PARITY_MAP     = 12'h028,
    parameter ACT_MAP        = 12'h026,
    parameter DM_DBI_MAP     = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
    parameter ALERT_MAP      = 12'h029,
`elsif DRAM_DDR3
    parameter RAS_MAP        = 12'h000,
    parameter CAS_MAP        = 12'h000,
    parameter WE_MAP         = 12'h000,
    parameter DM_MAP         = 108'h23a_22a_21a_20a_13a_12a_11a_10a_03a,
`endif

    parameter RESET_MAP      = 12'h027,
    parameter DQS_GATE_MAP   = 108'h101_214_201_224_23b_014_03b_001_02a,
    parameter DQS_BYTE_MAP   = 216'h235_234_225_224_215_214_205_204_135_134_125_124_115_114_105_104_035_034,
    parameter DATA0_MAP      = 96'h039_038_037_036_033_032_031_030,
    parameter DATA1_MAP      = 96'h109_108_107_106_103_102_101_100,
    parameter DATA2_MAP      = 96'h119_118_117_116_113_112_111_110,
    parameter DATA3_MAP      = 96'h129_128_127_126_123_122_121_120,
    parameter DATA4_MAP      = 96'h139_138_137_136_133_132_131_130,
    parameter DATA5_MAP      = 96'h209_208_207_206_203_202_201_200,
    parameter DATA6_MAP      = 96'h219_218_217_216_213_212_211_210,
    parameter DATA7_MAP      = 96'h229_228_227_226_223_222_221_220,
    parameter DATA8_MAP      = 96'h239_238_237_236_233_232_231_230,

//
    parameter DQS_GATE_WIDTH = 9,
    parameter ADDR_WIDTH     = 17,   //DRAM address bus width
    parameter ROW_WIDTH      = 17,   //DRAM address bus width
    parameter BANK_WIDTH     = 2,

`ifdef DRAM_DDR4
    parameter BG_WIDTH       = 2,
    parameter DM_DBI         = "NONE",   //"NONE", "DM_NODBI", "DM_DBIRD", "NODM_DBIWR", "NODM_DBIRD", "NODM_DBIWRRD", "NODM_NODBI"
`endif
    parameter ODT_WIDTH      = 1,
    parameter CK_WIDTH       = 1,    // # of CK/CK# outputs to memory
    parameter CKE_WIDTH      = 1,    // # of cke outputs
    parameter CS_WIDTH       = 1,    // # of unique CS outputs
    parameter DQS_WIDTH      = 9,    // # of DQS (strobe)
    parameter DQ_WIDTH       = 8 * DQS_WIDTH,
    parameter DM_WIDTH       = DQS_WIDTH ,
    parameter AC_WIDTH       = 3,
//DDR4 application,
    parameter OUTPUT_DRV     = 0,           // 0:RZQ/6, 1:RZQ/7
    parameter RTT_NOM        = 120,         //"120":RZQ/2, "60": RZQ/4, "40": RZQ/6
    parameter INTER_VREF     = "ENABLE",    //"ENABLE", "DISABLE"
    parameter DCI            = "ENABLE",    // "ENABLE", "DISABLE"
    parameter ZQ_VALUE       = 8'b10111101, //0-255,  different between DDR3 and DDR4; [7:4]: ODT, [3:0]: driver; upload and download: 2*RZQ/{N+1}, N=0~15;
    parameter ODTINIT_VALUE  = 0            //0-7;

)(
    input    [ 3:0]           ctl_rst_n_bank0     , 
    input    [ 3:0]           ctl_rst_n_bank1     , 
    input    [ 3:0]           ctl_rst_n_bank2     , 
    input    [ 2:0]           pzq_ctl_rst_n       , 
    input    [ 3:0]           A_ioclk_0           , 
    input    [ 3:0]           B_ioclk_0           , 
    input    [ 3:0]           C_ioclk_0           , 
    input    [ 3:0]           D_ioclk_0           , 
    input    [ 3:0]           A_ioclk_1           , 
    input    [ 3:0]           B_ioclk_1           , 
    input    [ 3:0]           C_ioclk_1           , 
    input    [ 3:0]           D_ioclk_1           , 
    input    [ 3:0]           A_ioclk_2           , 
    input    [ 3:0]           B_ioclk_2           , 
    input    [ 3:0]           C_ioclk_2           , 
    input    [ 3:0]           D_ioclk_2           , 
    input                     lclk_0              , 
    input                     lclk_1              , 
    input                     lclk_2              , 
    input    [ 3:0]           hctrl_clk0          , 
    input    [ 3:0]           hctrl_clk1          , 
    input    [ 3:0]           hctrl_clk2          , 
    input    [ 2:0]           pzq_user_clk        , 
    input    [11:0]           mc0_phy_clk_wren_gt , //clock gate signal of phy_clk in write operation ;
    input    [11:0]           mc0_phy_clk_rden_gt , //clock gate signal of phy_clk in read operation;
    input    [ 3:0]           phy_ddr_clk_gate0   , //phy_clk and ddr_clk gate signal
    input    [ 3:0]           phy_ddr_clk_gate1   , //phy_clk and ddr_clk gate signal
    input    [ 3:0]           phy_ddr_clk_gate2   , //phy_clk and ddr_clk gate signal
    input    [11:0]           phy_rstn_low        , 
    input    [11:0]           phy_rstn_upp        , 

//DRAM signals
`ifdef USE_DQS_GATE
    inout  [DQS_GATE_WIDTH-1 : 0]    dqs_gate    , 
`endif

    output [CK_WIDTH      -1 : 0]    ddr_ck_c    , 
    output [CK_WIDTH      -1 : 0]    ddr_ck_t    , 

    output [ADDR_WIDTH    -1 : 0]    ddr_addr    , 
    output [BANK_WIDTH    -1 : 0]    ddr_ba      , 

`ifdef DRAM_DDR4
    output [BG_WIDTH      -1 : 0]    ddr_bg      , 
`endif

`ifdef DRAM_DDR4
    output                           ddr_act_n   , 
`endif

`ifdef DRAM_DDR3
    output                           ddr_ras_n   , 
    output                           ddr_cas_n   , 
    output                           ddr_we_n    , 
`endif

    output [CKE_WIDTH     -1 : 0]    ddr_cke     , 
    output [ODT_WIDTH     -1 : 0]    ddr_odt     , 

`ifdef USE_CS
    output [CS_WIDTH      -1 : 0]    ddr_cs_n    , 
`endif

`ifdef USE_DM
    output [DM_WIDTH      -1 : 0]    ddr_dm      , 
`endif

`ifdef USE_RESET
    output                           ddr_reset_n , 
`endif

    inout  [DQS_WIDTH     -1 : 0]    ddr_dqs_c   , 
    inout  [DQS_WIDTH     -1 : 0]    ddr_dqs_t   , 
    inout  [DQ_WIDTH      -1 : 0]    ddr_dq      , 

`ifdef USE_PAR_ALERT
    output                           ddr_parity  , 
    input                            ddr_alert_n , 
`endif


    //debug signals
    input     [ 2:0]                        age_toggle_inv       , 
    input     [ 2:0]                        age_toggle_en        , 
    input     [11:0]                        dfi_io_pd            , 
    //dcc control
    output    [11:0]                        dcc_cfg_done         , 
    input                                   dcc_clrcfg           , 
    input                                   dcc_start            , 
    input                                   dcc_update_en_in     , 
    input                                   dcc_vt_update_en_in  , 
    output    [11:0]                        dcc_vt_update_en_out , 
    //delay control
    input     [27:0]                        delay_cal_clk_en0    , 
    input     [27:0]                        delay_cal_en_in0     , 
    output    [27:0]                        delay_cal_en_out0    , 
    input     [3:0]                         delay_cal_mode0      , 
    output    [27:0]                        delay_cal_value0     , 
    input     [27:0]                        delay_cal_clk_en1    , 
    input     [27:0]                        delay_cal_en_in1     , 
    output    [27:0]                        delay_cal_en_out1    , 
    input     [ 3:0]                        delay_cal_mode1      , 
    output    [27:0]                        delay_cal_value1     , 
    input     [27:0]                        delay_cal_clk_en2    , 
    input     [27:0]                        delay_cal_en_in2     , 
    output    [27:0]                        delay_cal_en_out2    , 
    input     [ 3:0]                        delay_cal_mode2      , 
    output    [27:0]                        delay_cal_value2     , 
    //delay ctrl signals, use phy_clk
    input     [23:0]                        delay_paddr0         , 
    input     [35:0]                        delay_data0          , 
    input     [ 3:0]                        delay_sel0           , 
    input     [ 3:0]                        delay_ranksel0       , 
    output    [ 3:0]                        delay_dto0           , 
    input     [ 3:0]                        delay_gate0          , 
    input     [15:0]                        delay_osc_div0       , 
    input     [ 3:0]                        delay_osc_en0        , 
    input     [ 7:0]                        delay_osc_wdq_sel0   , 
    input     [ 7:0]                        delay_osc_wrlvl_sel0 , 
    input     [ 3:0]                        delay_testmode_en0   , 

    input     [23:0]                        delay_paddr1         , 
    input     [35:0]                        delay_data1          , 
    input     [ 3:0]                        delay_sel1           , 
    input     [ 3:0]                        delay_ranksel1       , 
    output    [ 3:0]                        delay_dto1           , 
    input      [3:0]                        delay_gate1          , 
    input     [15:0]                        delay_osc_div1       , 
    input     [ 3:0]                        delay_osc_en1        , 
    input     [ 7:0]                        delay_osc_wdq_sel1   , 
    input     [ 7:0]                        delay_osc_wrlvl_sel1 , 
    input     [ 3:0]                        delay_testmode_en1   , 

    input     [23:0]                        delay_paddr2         , 
    input     [35:0]                        delay_data2          , 
    input     [ 3:0]                        delay_sel2           , 
    input     [ 3:0]                        delay_ranksel2       , 
    output    [ 3:0]                        delay_dto2           , 
    input     [ 3:0]                        delay_gate2          , 
    input     [15:0]                        delay_osc_div2       , 
    input     [ 3:0]                        delay_osc_en2        , 
    input     [ 7:0]                        delay_osc_wdq_sel2   , 
    input     [ 7:0]                        delay_osc_wrlvl_sel2 , 
    input     [ 3:0]                        delay_testmode_en2   , 

//APB bus signals
    input                                   apb_clk           , 
    input                                   apb_rst_n         , 
    input     [15:0]                        apb_addr          , 
    input                                   apb_enable        , 
    output                                  apb_error         , 
    output    [31:0]                        apb_rdata         , 
    output                                  apb_ready         , 
    input                                   apb_sync_path_sel , 
    input     [31:0]                        apb_wdata         , 
    input                                   apb_wr_rdn        , 
    input                                   apb_sel           , 

// data signals, need to use the bit width parameter
    output    [12* 8-1:0]                   phy_rd_dm,      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    output    [12*64-1:0]                   phy_rdata,      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    output    [     11:0]                   phy_rd_en,      //one bit per bytelanes,[11:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    output    [ 6* 8-1:0]                   phy_rdata_se,   //2 single pad per bank, 6 pairs pads in 3 banks;
    output    [12* 8-1:0]                   phy_rd_dqsn,
    output    [12* 8-1:0]                   phy_rd_dqsp,

    input     [12* 8-1:0]                   phy_wr_dm,      //64bits ddr_dq need 8bits ddr_dm; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    input     [12*64-1:0]                   phy_wdata,      //12 bytelanes, 64bits parallel datas per bytelane, can be used to AC and dq signals;
    input     [12* 8-1:0]                   phy_wr_en,      //8 bits per bytelanes,[12*8-1:0]: {bank2_bytelaneD/C/B/A, bank1_bytelaneD/C/B/A, bank0_bytelaneD/C/B/A};
    input     [ 6* 8-1:0]                   phy_wrdata_se,  //2 single pad per bank, 6 pads in 3 banks;
    input     [12* 8-1:0]                   phy_wr_dqsn,
    input     [12* 8-1:0]                   phy_wr_dqsp,


//dqs signals
    output    [     7:0]                    dqs_rd_gate_status0,  //bank0,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p0,//bank0,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    output    [     7:0]                    dqs_rd_gate_status1,  //bank1,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p1,//bank1,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    output    [     7:0]                    dqs_rd_gate_status2,  //bank2,[1:0]:A_bytelane;[ 3:2]:B_bytelane;[ 5: 4]:C_bytelane;[ 7: 6]:D_bytelane
    output    [    31:0]                    dqs_rd_gate_status_p2,//bank2,[7:0]:A_bytelane;[15:8]:B_bytelane;[23:16]:C_bytelane;[31:24]:D_bytelane
    input     [     3:0]                    dqs_rstn0,            //bank0,[3:0]:D/C/B/A
    input     [     3:0]                    dqs_rstn1,            //bank1,[3:0]:D/C/B/A
    input     [     3:0]                    dqs_rstn2,            //bank2,[3:0]:D/C/B/A
    output    [    23:0]                    dqs_cnt,              //[7:0]: bank0_bytelane_D/C/B/A; [15:8]: bank1_bytelane_D/C/B/A; [23:16]:bank2_bytelane_D/C/B/A
    output    [    95:0]                    dqs_iogate_rdata,     //[7:0]: bank0_bytelane_A;       [95:0]:{bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    input     [12*8-1:0]                    dqs_rd_gate_en,       //read dqs gate enable; [7:0]: bank0_bytelane_A; [95:0]: {bank2_bytelane_D/C/B/A,bank1_bytelane_D/C/B/A,bank0_bytelane_D/C/B/A};
    input     [12*8-1:0]                    dqs_rd_en_shadow,


// debug signals
    input     [  4:0]                       atpg_mode0,                 //bank0,[4:0]:pzq/D/C/B/A
    input     [  4:0]                       atpg_mode1,                 //bank1,[4:0]:pzq/D/C/B/A
    input     [  4:0]                       atpg_mode2,                 //bank2,[4:0]:pzq/D/C/B/A
    input     [ 23:0]                       loopback_clk_sel,           //[ 1:0]: bank0_bytelane_A;      [ 7: 0]: bank0_bytelane_D/C/B/A;
                                                                        //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    input     [ 23:0]                       loopback_clknum_sel,        //[ 1:0]: bank0_bytelane_A;      [ 7: 0]: bank0_bytelane_D/C/B/A;
                                                                        //[15:8]: bank1_bytelane_D/C/B/A;[23:16]: bank2_bytelane_D/C/B/A;
    input     [ 11:0]                       loopback_fifo_datain_low,   //[ 3:0]: bank0_bytelane_D/C/B/A;[ 7: 4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    input     [ 11:0]                       loopback_fifo_datain_upp,
    input     [ 11:0]                       loopback_fifo_resp_low,
    input     [ 11:0]                       loopback_fifo_resp_upp,
    input     [ 11:0]                       loopback_fifo_rstn_low,
    input     [ 11:0]                       loopback_fifo_rstn_upp,
    input     [ 11:0]                       loopback_mode,
    input     [ 95:0]                       loopback_en,                //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                        //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    input                                   offcal_clrcfg,              //[3:0]:bank0_bytelane_D/C/B/A; [7:4]: bank1_bytelane_D/C/B/A; [11:8] bank2_bytelane_D/C/B/A;
    output    [ 11:0]                       offcal_done,
    input                                   offcal_start,
    input                                   offcal_update_en,
    input                                   offcal_vt_update_en_in,
    output    [ 11:0]                       offcal_vt_update_en_out,

    input     [ 31:0]                       phy_rd_dqs_pdr0,            //IO power down receiver;
    input     [ 31:0]                       phy_rd_dqs_pdr1,
    input     [ 31:0]                       phy_rd_dqs_pdr2,
    input     [ 31:0]                       phy_rd_dqs_te0,             //IO termination enable;
    input     [ 31:0]                       phy_rd_dqs_te1,
    input     [ 31:0]                       phy_rd_dqs_te2,
    input     [ 11:0]                       wrlvl_en,                   //write leveling enable;
    input     [ 95:0]                       wrlvl_qin,                  //[7:0]: bank0_bytelane_A;[31:0]: bank0_bytelane_D/C/B/A;
                                                                        //[63:32]: bank1_bytelane_D/C/B/A;[95:64]: bank2_bytelane_D/C/B/A;
    output reg[ 71:0]                       wrlvl_qout,
    input     [ 11:0]                       dqs_pupd_en,                //dqs pull-up and pull-down enable when training
    input     [ 23:0]                       clb2phy_vref0,              //[7:0]: bank0_vref0; [15:8];bank1_vref0;[23:16]: bank2_vref0;
    input     [ 23:0]                       clb2phy_vref1,              //[7:0]: bank0_vref1; [15:8];bank1_vref1;[23:16]: bank2_vref1;
    input     [ 23:0]                       clb2phy_vref2,              //[7:0]: bank0_vref2; [15:8];bank1_vref2;[23:16]: bank2_vref2;
    input     [ 23:0]                       clb2phy_vref3,              //[7:0]: bank0_vref3; [15:8];bank1_vref3;[23:16]: bank2_vref3;
    input     [ 11:0]                       vref_value_sel,             //[3:0]: bank0; [7:4]: bank1; [11:8]: bank2;
    input     [  2:0]                       zqcal_clrcfg,
    input     [167:0]                       zqcal_code,
    output    [167:0]                       zqcal_code_o,
    output    [  2:0]                       zqcal_done,
    input     [  2:0]                       zqcal_start,
    input     [  2:0]                       zqcal_update_en,
    input     [  2:0]                       zqcal_vt_update_en_in,
    output    [  2:0]                       zqcal_vt_update_en_out,
    input     [167:0]                       vref_ctrl_value,
    output    [ 13:0]                       zqcal_debug_data0,
    output    [ 13:0]                       zqcal_debug_data1,
    output    [ 13:0]                       zqcal_debug_data2,
    output    [ 63:0]                       dqsgr_debug_data0,
    output    [ 63:0]                       dqsgr_debug_data1,
    output    [ 63:0]                       dqsgr_debug_data2
);

//local parameters
//depend on the pad used to AC signal or dqs signal;
localparam DISABLE_GSR            = "ENABLE";
localparam A_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";    //"AC";"DX": dq/dm/dqs signals in bytelane
localparam B_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE0     = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE1     = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE2     = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";
localparam DDR_RST_MODE           = "ASYNC"; //"SYNC","ASYNC"  ,default value: ASYNC, users can not change it.
localparam DATA_OUT_SYNC          = "SYNC_DISABLE"; //default value: enable
localparam DATA_WIDTH             = (NCK_PER_CLK == 4) ? "X8" : "X4" ; // "X8","X4"
localparam DQSN_PUPD              = "PD";  //"PU","PD"
localparam DQSP_PUPD              = "PU";  //"PU","PD"
localparam DQS_PUPD_STRENGTH      = "OFF";  //"WEAK", "MED", "STRONG", "OFF"
localparam VREF_SRC_SEL           = (INTER_VREF == "ENABLE") ? "DISABLE" : "ENABLE";     //NONE, INT, EXT
localparam LOOPBACK_EN            = LOOPBACK_CTRL;  // DISABLE, ENABLE
localparam CTL_CLK_SWI_SEL        = (CTRL_INDEX == 0) ? "IOCLK0" : "IOCLK2";      //LCLK0, LCLK1, LCLK2, LCLK3, IOCLK0, IOCLK1, IOCLK2, IOCLK3, GND
localparam DDR_CLK_SWI_SEL        = (CTRL_INDEX == 0) ? "IOCLK1" : "IOCLK3";      //IOCLK0, IOCLK1, IOCLK2, IOCLK3, GND
localparam IOCLK_D2S_EN           = "DISABLE";
localparam A_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam B_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam C_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam D_DQS_GATE_TYPE        = (DQS_GATE == "Internal") ? "DQS" : "IO";
localparam DLY_TEST_EN            = "ENABLE";    // DISABLE, ENABLE
localparam DLY_CAL_MODE           = "FULL";      // ( TCK > 2000 ) ? "HALF" : "FULL";
localparam A_DQS_BYTE_EN0         = (BYTE_LANE_0[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN0         = (BYTE_LANE_0[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN0         = (BYTE_LANE_0[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN0         = (BYTE_LANE_0[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DQS_BYTE_EN1         = (BYTE_LANE_1[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN1         = (BYTE_LANE_1[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN1         = (BYTE_LANE_1[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN1         = (BYTE_LANE_1[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DQS_BYTE_EN2         = (BYTE_LANE_2[0] == 1) ? "ENABLE" : "DISABLE";
localparam B_DQS_BYTE_EN2         = (BYTE_LANE_2[1] == 1) ? "ENABLE" : "DISABLE";
localparam C_DQS_BYTE_EN2         = (BYTE_LANE_2[2] == 1) ? "ENABLE" : "DISABLE";
localparam D_DQS_BYTE_EN2         = (BYTE_LANE_2[3] == 1) ? "ENABLE" : "DISABLE";
localparam A_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS0 = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS1 = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_DDR_SIGNAL_TYPE_DQS2 = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";
localparam DCC_EN                 = "ENABLE";    // DISABLE, ENABLE
localparam A_DCC_CLK_SEL0         = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "CLK_WL" : "CLK_IO";  // CLK_IO, CLK_WL, CLK_WDQ
localparam B_DCC_CLK_SEL0         = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL0         = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL0         = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_DCC_CLK_SEL1         = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "CLK_WL" : "CLK_IO";
localparam B_DCC_CLK_SEL1         = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL1         = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL1         = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_DCC_CLK_SEL2         = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "CLK_WL" : "CLK_IO";
localparam B_DCC_CLK_SEL2         = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "CLK_WL" : "CLK_IO";
localparam C_DCC_CLK_SEL2         = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "CLK_WL" : "CLK_IO";
localparam D_DCC_CLK_SEL2         = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "CLK_WL" : "CLK_IO";
localparam A_BYTE_TYPE0           = ((BYTE_LANE_0[0] == 1) && (DATA_CTRL_0[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE0           = ((BYTE_LANE_0[1] == 1) && (DATA_CTRL_0[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE0           = ((BYTE_LANE_0[2] == 1) && (DATA_CTRL_0[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE0           = ((BYTE_LANE_0[3] == 1) && (DATA_CTRL_0[3] == 1)) ? "DX" : "AC";
localparam A_BYTE_TYPE1           = ((BYTE_LANE_1[0] == 1) && (DATA_CTRL_1[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE1           = ((BYTE_LANE_1[1] == 1) && (DATA_CTRL_1[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE1           = ((BYTE_LANE_1[2] == 1) && (DATA_CTRL_1[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE1           = ((BYTE_LANE_1[3] == 1) && (DATA_CTRL_1[3] == 1)) ? "DX" : "AC";
localparam A_BYTE_TYPE2           = ((BYTE_LANE_2[0] == 1) && (DATA_CTRL_2[0] == 1)) ? "DX" : "AC";
localparam B_BYTE_TYPE2           = ((BYTE_LANE_2[1] == 1) && (DATA_CTRL_2[1] == 1)) ? "DX" : "AC";
localparam C_BYTE_TYPE2           = ((BYTE_LANE_2[2] == 1) && (DATA_CTRL_2[2] == 1)) ? "DX" : "AC";
localparam D_BYTE_TYPE2           = ((BYTE_LANE_2[3] == 1) && (DATA_CTRL_2[3] == 1)) ? "DX" : "AC";

localparam APPS_PZQ               = "DDR_DRAM"; //"GENERIC", "DDR_DRAM"
localparam VREF0_MODE             = "DDR_DRAM"; //10: VREF0_INT; 01: DDR, 00: DISABLE; 11: DISABLE
localparam VREF1_RANK0_MODE       = "DDR_DRAM"; //DISABLE, REG, DDR, SRAM
localparam VREF1_RANK1_MODE       = "DDR_DRAM";
localparam VREF2_RANK0_MODE       = "DDR_DRAM";
localparam VREF2_RANK1_MODE       = "DDR_DRAM";
localparam VREF3_RANK0_MODE       = "DDR_DRAM";
localparam VREF3_RANK1_MODE       = "DDR_DRAM";
localparam VREF4_RANK0_MODE       = "DDR_DRAM";
localparam VREF4_RANK1_MODE       = "DDR_DRAM";
localparam DCI_EN                 = DCI; //DISABLE, ENABLE
localparam AC_LOOPBACK_EN         = LOOPBACK_CTRL ;  // DISABLE, ENABLE
localparam OUTPUT_IMP             = 60; //  (RTT_NOM == 120) ? 40 : 34;
localparam ODT                    = (OUTPUT_DRV == 0) ? 120 : 60;
localparam WL_GATE_DIS_EN         = "ENABLE";
localparam OUTDEL                 = 0;//0-255
localparam OUTDELMUX              = "DDR_DRAM";//NODEL: 100; PROGDEL: 010; DDR_DRAM: 011; SRAM: 000
localparam INDEL                  = 0;//0-255
localparam INDELMUX               = "DDR_DRAM";//NODEL: 100; PROGDEL: 010; DDR_DRAM: 011; SRAM: 000

localparam VREF1_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF1_RANK0_VAL        = 0;
localparam VREF1_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF1_RANK1_VAL        = 0;
localparam VREF2_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF2_RANK0_VAL        = 0;
localparam VREF2_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF2_RANK1_VAL        = 0;
localparam VREF3_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF3_RANK0_VAL        = 0;
localparam VREF3_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF3_RANK1_VAL        = 0;
localparam VREF4_RANK0_RANG       = "RANG2";//RANG1, RANG2
localparam VREF4_RANK0_VAL        = 0;
localparam VREF4_RANK1_RANG       = "RANG2";//RANG1, RANG2
localparam VREF4_RANK1_VAL        = 0;

localparam FULL_DATA_MAP = {DATA8_MAP,DATA7_MAP,DATA6_MAP,DATA5_MAP,DATA4_MAP,DATA3_MAP,DATA2_MAP,DATA1_MAP,DATA0_MAP};

//internal signals
wire [DQS_GATE_WIDTH-1:0] dqs_gate_indd;
reg  [ 11:0] dqs_valid_sample_window ; //[3:0]:bank0_bytelane_D/C/B/A; [7:4]:bank1_bytelane_D/C/B/A; [11:8]:bank2_bytelane_D/C/B/A

wire [ 11:0] ctl_phy_clk;
wire [ 11:0] ctl_clk_ac;
wire [ 11:0] ctl_clk_dqs;
wire [ 11:0] ctl_clk_wdq;
wire [ 11:0] ddr_clk_ac;
wire [ 11:0] ddr_clk_dqs;
wire [ 11:0] ddr_clk_wdq;
wire [ 11:0] rdqs;
wire [ 11:0] rdqs_n_gated;
wire [ 11:0] wr_path_rstn_low;
wire [ 11:0] wr_path_rstn_upp;
wire [ 11:0] rd_path_rstn_low;
wire [ 11:0] rd_path_rstn_upp;
wire [ 11:0] ts_dq;
wire [ 11:0] ts_dqs;
wire [ 11:0] ts_dqsn;
wire [239:0] dq_ts_md;
wire [ 11:0] dq_se_ts_md;
wire [ 23:0] dqs_ts_md;
wire [311:0] remap_ts_md = {
    dq_se_ts_md[11:10],dq_ts_md[239:232],dqs_ts_md[23:22],dqs_ts_md[23:22],dq_ts_md[231:220],
    2'b00             ,dq_ts_md[219:212],dqs_ts_md[21:20],dqs_ts_md[21:20],dq_ts_md[211:200],
    2'b00             ,dq_ts_md[199:192],dqs_ts_md[19:18],dqs_ts_md[19:18],dq_ts_md[191:180],
    dq_se_ts_md[ 9: 8],dq_ts_md[179:172],dqs_ts_md[17:16],dqs_ts_md[17:16],dq_ts_md[171:160],
    dq_se_ts_md[ 7: 6],dq_ts_md[159:152],dqs_ts_md[15:14],dqs_ts_md[15:14],dq_ts_md[151:140],
    2'b00             ,dq_ts_md[139:132],dqs_ts_md[13:12],dqs_ts_md[13:12],dq_ts_md[131:120],
    2'b00             ,dq_ts_md[119:112],dqs_ts_md[11:10],dqs_ts_md[11:10],dq_ts_md[111:100],
    dq_se_ts_md[ 5: 4],dq_ts_md[ 99: 92],dqs_ts_md[ 9: 8],dqs_ts_md[ 9: 8],dq_ts_md[ 91: 80],
    dq_se_ts_md[ 3: 2],dq_ts_md[ 79: 72],dqs_ts_md[ 7: 6],dqs_ts_md[ 7: 6],dq_ts_md[ 71: 60],
    2'b00             ,dq_ts_md[ 59: 52],dqs_ts_md[ 5: 4],dqs_ts_md[ 5: 4],dq_ts_md[ 51: 40],
    2'b00             ,dq_ts_md[ 39: 32],dqs_ts_md[ 3: 2],dqs_ts_md[ 3: 2],dq_ts_md[ 31: 20],
    dq_se_ts_md[ 1: 0],dq_ts_md[ 19: 12],dqs_ts_md[ 1: 0],dqs_ts_md[ 1: 0],dq_ts_md[ 11:  0]
};


wire [ 959:0] doq              ; 
wire [  95:0] dosp             ; 
wire [  95:0] dosn             ; 

wire [  11:0] in_dqsp_bdl_byp  ; 
wire [  11:0] in_dqsn_bdl_byp  ; 
wire [ 119:0] in_bdl_byp       ; 
wire [  71:0] in_dqsp_bdl_dly  ; 
wire [  71:0] in_dqsn_bdl_dly  ; 
wire [ 719:0] in_bdl_dly       ; 
wire [  11:0] out_dqsp_bdl_byp ; 
wire [  11:0] out_dqsn_bdl_byp ; 
wire [ 119:0] out_bdl_byp      ; 
wire [  71:0] out_dqsp_bdl_dly ; 
wire [  71:0] out_dqsn_bdl_dly ; 
wire [ 719:0] out_bdl_dly      ; 
wire [  11:0] pdr              ; 
wire [  11:0] pdr_dqs          ; 
wire [  11:0] pdr_dqsn         ; 
wire [  47:0] doq_se           ; 
wire [   5:0] in_se_bdl_byp    ; 
wire [  35:0] in_se_bdl_dly    ; 
wire [   5:0] out_se_bdl_byp   ; 
wire [  35:0] out_se_bdl_dly   ; 
wire [ 239:0] dq_pdr_md        ; 
wire [  11:0] dq_se_pdr_md     ; 
wire [  23:0] dqs_pdr_md       ; 
wire [ 311:0] remap_pdr_md = {
    dq_se_pdr_md[11:10],dq_pdr_md[239:232],dqs_pdr_md[23:22],dqs_pdr_md[23:22],dq_pdr_md[231:220],
    2'b00              ,dq_pdr_md[219:212],dqs_pdr_md[21:20],dqs_pdr_md[21:20],dq_pdr_md[211:200],
    2'b00              ,dq_pdr_md[199:192],dqs_pdr_md[19:18],dqs_pdr_md[19:18],dq_pdr_md[191:180],
    dq_se_pdr_md[ 9: 8],dq_pdr_md[179:172],dqs_pdr_md[17:16],dqs_pdr_md[17:16],dq_pdr_md[171:160],
    dq_se_pdr_md[ 7: 6],dq_pdr_md[159:152],dqs_pdr_md[15:14],dqs_pdr_md[15:14],dq_pdr_md[151:140],
    2'b00              ,dq_pdr_md[139:132],dqs_pdr_md[13:12],dqs_pdr_md[13:12],dq_pdr_md[131:120],
    2'b00              ,dq_pdr_md[119:112],dqs_pdr_md[11:10],dqs_pdr_md[11:10],dq_pdr_md[111:100],
    dq_se_pdr_md[ 5: 4],dq_pdr_md[ 99: 92],dqs_pdr_md[ 9: 8],dqs_pdr_md[ 9: 8],dq_pdr_md[ 91: 80],
    dq_se_pdr_md[ 3: 2],dq_pdr_md[ 79: 72],dqs_pdr_md[ 7: 6],dqs_pdr_md[ 7: 6],dq_pdr_md[ 71: 60],
    2'b00              ,dq_pdr_md[ 59: 52],dqs_pdr_md[ 5: 4],dqs_pdr_md[ 5: 4],dq_pdr_md[ 51: 40],
    2'b00              ,dq_pdr_md[ 39: 32],dqs_pdr_md[ 3: 2],dqs_pdr_md[ 3: 2],dq_pdr_md[ 31: 20],
    dq_se_pdr_md[ 1: 0],dq_pdr_md[ 19: 12],dqs_pdr_md[ 1: 0],dqs_pdr_md[ 1: 0],dq_pdr_md[ 11:  0]
};

wire[ 11:0] te;
wire[ 11:0] te_dqs;
wire[ 11:0] te_dqsn;
wire[239:0] dq_te_md;
wire[ 11:0] dq_se_te_md;
wire[ 23:0] dqs_te_md;
wire[311:0] remap_te_md = {
    dq_se_te_md[11:10],dq_te_md[239:232],dqs_te_md[23:22],dqs_te_md[23:22],dq_te_md[231:220],
    2'b00             ,dq_te_md[219:212],dqs_te_md[21:20],dqs_te_md[21:20],dq_te_md[211:200],
    2'b00             ,dq_te_md[199:192],dqs_te_md[19:18],dqs_te_md[19:18],dq_te_md[191:180],
    dq_se_te_md[ 9: 8],dq_te_md[179:172],dqs_te_md[17:16],dqs_te_md[17:16],dq_te_md[171:160],
    dq_se_te_md[ 7: 6],dq_te_md[159:152],dqs_te_md[15:14],dqs_te_md[15:14],dq_te_md[151:140],
    2'b00             ,dq_te_md[139:132],dqs_te_md[13:12],dqs_te_md[13:12],dq_te_md[131:120],
    2'b00             ,dq_te_md[119:112],dqs_te_md[11:10],dqs_te_md[11:10],dq_te_md[111:100],
    dq_se_te_md[ 5: 4],dq_te_md[ 99: 92],dqs_te_md[ 9: 8],dqs_te_md[ 9: 8],dq_te_md[ 91: 80],
    dq_se_te_md[ 3: 2],dq_te_md[ 79: 72],dqs_te_md[ 7: 6],dqs_te_md[ 7: 6],dq_te_md[ 71: 60],
    2'b00             ,dq_te_md[ 59: 52],dqs_te_md[ 5: 4],dqs_te_md[ 5: 4],dq_te_md[ 51: 40],
    2'b00             ,dq_te_md[ 39: 32],dqs_te_md[ 3: 2],dqs_te_md[ 3: 2],dq_te_md[ 31: 20],
    dq_se_te_md[ 1: 0],dq_te_md[ 19: 12],dqs_te_md[ 1: 0],dqs_te_md[ 1: 0],dq_te_md[ 11:  0]
};

wire [3*52*8-1:0] diq      ; 
reg  [3*52*8-1:0] remap_diq;
wire [3*52*8-1:0] remap_doq = {
    doq_se[47:40], doq[959:928],dosn[95:88],dosp[95:88],doq[927:880],
    8'h00        , doq[879:848],dosn[87:80],dosp[87:80],doq[847:800],
    8'h00        , doq[799:768],dosn[79:72],dosp[79:72],doq[767:720],
    doq_se[39:32], doq[719:688],dosn[71:64],dosp[71:64],doq[687:640],
    doq_se[31:24], doq[639:608],dosn[63:56],dosp[63:56],doq[607:560],
    8'h00        , doq[559:528],dosn[55:48],dosp[55:48],doq[527:480],
    8'h00        , doq[479:448],dosn[47:40],dosp[47:40],doq[447:400],
    doq_se[23:16], doq[399:368],dosn[39:32],dosp[39:32],doq[367:320],
    doq_se[15: 8], doq[319:288],dosn[31:24],dosp[31:24],doq[287:240],
    8'h00        , doq[239:208],dosn[23:16],dosp[23:16],doq[207:160],
    8'h00        , doq[159:128],dosn[15: 8],dosp[15: 8],doq[127: 80],
    doq_se[ 7: 0], doq[ 79: 48],dosn[ 7: 0],dosp[ 7: 0],doq[ 47:  0]
};

assign diq[ 0*13*8 +: 13*8] = {remap_diq[ 0*13*8 +: 12*8], remap_diq[(0*13*8 + 12*8) +: 8]};
assign diq[ 1*13*8 +: 13*8] =  remap_diq[ 1*13*8 +: 13*8] ;
assign diq[ 2*13*8 +: 13*8] =  remap_diq[ 2*13*8 +: 13*8] ;
assign diq[ 3*13*8 +: 13*8] =  remap_diq[ 3*13*8 +: 13*8] ;
assign diq[ 4*13*8 +: 13*8] = {remap_diq[ 4*13*8 +: 12*8], remap_diq[(4*13*8 + 12*8) +: 8]};
assign diq[ 5*13*8 +: 13*8] =  remap_diq[ 5*13*8 +: 13*8] ;
assign diq[ 6*13*8 +: 13*8] =  remap_diq[ 6*13*8 +: 13*8] ;
assign diq[ 7*13*8 +: 13*8] =  remap_diq[ 7*13*8 +: 13*8] ;
assign diq[ 8*13*8 +: 13*8] = {remap_diq[ 8*13*8 +: 12*8], remap_diq[(8*13*8 + 12*8) +: 8]};
assign diq[ 9*13*8 +: 13*8] =  remap_diq[ 9*13*8 +: 13*8] ;
assign diq[10*13*8 +: 13*8] =  remap_diq[10*13*8 +: 13*8] ;
assign diq[11*13*8 +: 13*8] =  remap_diq[11*13*8 +: 13*8] ;

wire [3*52-1:0] remap_in_bdl_byp = { 
    in_se_bdl_byp[5],in_bdl_byp[119:116],in_dqsn_bdl_byp[11],in_dqsp_bdl_byp[11],in_bdl_byp[115:110],
    1'b0            ,in_bdl_byp[109:106],in_dqsn_bdl_byp[10],in_dqsp_bdl_byp[10],in_bdl_byp[105:100],
    1'b0            ,in_bdl_byp[ 99: 96],in_dqsn_bdl_byp[ 9],in_dqsp_bdl_byp[ 9],in_bdl_byp[ 95: 90],
    in_se_bdl_byp[4],in_bdl_byp[ 89: 86],in_dqsn_bdl_byp[ 8],in_dqsp_bdl_byp[ 8],in_bdl_byp[ 85: 80],
    in_se_bdl_byp[3],in_bdl_byp[ 79: 76],in_dqsn_bdl_byp[ 6],in_dqsp_bdl_byp[ 6],in_bdl_byp[ 75: 70],
    1'b0            ,in_bdl_byp[ 69: 66],in_dqsn_bdl_byp[ 6],in_dqsp_bdl_byp[ 6],in_bdl_byp[ 65: 60],
    1'b0            ,in_bdl_byp[ 59: 56],in_dqsn_bdl_byp[ 5],in_dqsp_bdl_byp[ 5],in_bdl_byp[ 55: 50],
    in_se_bdl_byp[2],in_bdl_byp[ 49: 46],in_dqsn_bdl_byp[ 4],in_dqsp_bdl_byp[ 4],in_bdl_byp[ 45: 40],
    in_se_bdl_byp[1],in_bdl_byp[ 39: 36],in_dqsn_bdl_byp[ 3],in_dqsp_bdl_byp[ 3],in_bdl_byp[ 35: 30],
    1'b0            ,in_bdl_byp[ 29: 26],in_dqsn_bdl_byp[ 2],in_dqsp_bdl_byp[ 2],in_bdl_byp[ 25: 20],
    1'b0            ,in_bdl_byp[ 19: 16],in_dqsn_bdl_byp[ 1],in_dqsp_bdl_byp[ 1],in_bdl_byp[ 15: 10],
    in_se_bdl_byp[0],in_bdl_byp[  9:  6],in_dqsn_bdl_byp[ 0],in_dqsp_bdl_byp[ 0],in_bdl_byp[  5:  0]
};

wire [3*52*6-1:0] remap_in_bdl_dly = { 
    in_se_bdl_dly[35:30],in_bdl_dly[719:696],in_dqsn_bdl_dly[71:66],in_dqsp_bdl_dly[71:66],in_bdl_dly[695:660],
    6'h00               ,in_bdl_dly[659:636],in_dqsn_bdl_dly[65:60],in_dqsp_bdl_dly[65:60],in_bdl_dly[635:600],
    6'h00               ,in_bdl_dly[599:576],in_dqsn_bdl_dly[59:54],in_dqsp_bdl_dly[59:54],in_bdl_dly[575:540],
    in_se_bdl_dly[29:24],in_bdl_dly[539:516],in_dqsn_bdl_dly[53:48],in_dqsp_bdl_dly[53:48],in_bdl_dly[515:480],
    in_se_bdl_dly[23:18],in_bdl_dly[479:456],in_dqsn_bdl_dly[47:42],in_dqsp_bdl_dly[47:42],in_bdl_dly[455:420],
    6'h00               ,in_bdl_dly[419:396],in_dqsn_bdl_dly[41:36],in_dqsp_bdl_dly[41:36],in_bdl_dly[395:360],
    6'h00               ,in_bdl_dly[359:336],in_dqsn_bdl_dly[35:30],in_dqsp_bdl_dly[35:30],in_bdl_dly[335:300],
    in_se_bdl_dly[17:12],in_bdl_dly[299:276],in_dqsn_bdl_dly[29:24],in_dqsp_bdl_dly[29:24],in_bdl_dly[275:240],
    in_se_bdl_dly[11: 6],in_bdl_dly[239:216],in_dqsn_bdl_dly[23:18],in_dqsp_bdl_dly[23:18],in_bdl_dly[215:180],
    6'h00               ,in_bdl_dly[179:156],in_dqsn_bdl_dly[17:12],in_dqsp_bdl_dly[17:12],in_bdl_dly[155:120],
    6'h00               ,in_bdl_dly[119: 96],in_dqsn_bdl_dly[11: 6],in_dqsp_bdl_dly[11: 6],in_bdl_dly[ 95: 60],
    in_se_bdl_dly[ 5: 0],in_bdl_dly[ 59: 36],in_dqsn_bdl_dly[ 5: 0],in_dqsp_bdl_dly[ 5: 0],in_bdl_dly[ 35:  0]
};

wire [3*52-1:0] remap_out_bdl_byp = {
    out_se_bdl_byp[5],out_bdl_byp[119:116],out_dqsn_bdl_byp[11],out_dqsp_bdl_byp[11],out_bdl_byp[115:110],
    1'b0             ,out_bdl_byp[109:106],out_dqsn_bdl_byp[10],out_dqsp_bdl_byp[10],out_bdl_byp[105:100],
    1'b0             ,out_bdl_byp[ 99: 96],out_dqsn_bdl_byp[ 9],out_dqsp_bdl_byp[ 9],out_bdl_byp[ 95: 90],
    out_se_bdl_byp[4],out_bdl_byp[ 89: 86],out_dqsn_bdl_byp[ 8],out_dqsp_bdl_byp[ 8],out_bdl_byp[ 85: 80],
    out_se_bdl_byp[3],out_bdl_byp[ 79: 76],out_dqsn_bdl_byp[ 6],out_dqsp_bdl_byp[ 6],out_bdl_byp[ 75: 70],
    1'b0             ,out_bdl_byp[ 69: 66],out_dqsn_bdl_byp[ 6],out_dqsp_bdl_byp[ 6],out_bdl_byp[ 65: 60],
    1'b0             ,out_bdl_byp[ 59: 56],out_dqsn_bdl_byp[ 5],out_dqsp_bdl_byp[ 5],out_bdl_byp[ 55: 50],
    out_se_bdl_byp[2],out_bdl_byp[ 49: 46],out_dqsn_bdl_byp[ 4],out_dqsp_bdl_byp[ 4],out_bdl_byp[ 45: 40],
    out_se_bdl_byp[1],out_bdl_byp[ 39: 36],out_dqsn_bdl_byp[ 3],out_dqsp_bdl_byp[ 3],out_bdl_byp[ 35: 30],
    1'b0             ,out_bdl_byp[ 29: 26],out_dqsn_bdl_byp[ 2],out_dqsp_bdl_byp[ 2],out_bdl_byp[ 25: 20],
    1'b0             ,out_bdl_byp[ 19: 16],out_dqsn_bdl_byp[ 1],out_dqsp_bdl_byp[ 1],out_bdl_byp[ 15: 10],
    out_se_bdl_byp[0],out_bdl_byp[  9:  6],out_dqsn_bdl_byp[ 0],out_dqsp_bdl_byp[ 0],out_bdl_byp[  5:  0]
};

wire [3*52*6-1:0] remap_out_bdl_dly = { 
    out_se_bdl_dly[35:30],out_bdl_dly[719:696],out_dqsn_bdl_dly[71:66],out_dqsp_bdl_dly[71:66],out_bdl_dly[695:660],
    6'h00                ,out_bdl_dly[659:636],out_dqsn_bdl_dly[65:60],out_dqsp_bdl_dly[65:60],out_bdl_dly[635:600],
    6'h00                ,out_bdl_dly[599:576],out_dqsn_bdl_dly[59:54],out_dqsp_bdl_dly[59:54],out_bdl_dly[575:540],
    out_se_bdl_dly[29:24],out_bdl_dly[539:516],out_dqsn_bdl_dly[53:48],out_dqsp_bdl_dly[53:48],out_bdl_dly[515:480],
    out_se_bdl_dly[23:18],out_bdl_dly[479:456],out_dqsn_bdl_dly[47:42],out_dqsp_bdl_dly[47:42],out_bdl_dly[455:420],
    6'h00                ,out_bdl_dly[419:396],out_dqsn_bdl_dly[41:36],out_dqsp_bdl_dly[41:36],out_bdl_dly[395:360],
    6'h00                ,out_bdl_dly[359:336],out_dqsn_bdl_dly[35:30],out_dqsp_bdl_dly[35:30],out_bdl_dly[335:300],
    out_se_bdl_dly[17:12],out_bdl_dly[299:276],out_dqsn_bdl_dly[29:24],out_dqsp_bdl_dly[29:24],out_bdl_dly[275:240],
    out_se_bdl_dly[11: 6],out_bdl_dly[239:216],out_dqsn_bdl_dly[23:18],out_dqsp_bdl_dly[23:18],out_bdl_dly[215:180],
    6'h00                ,out_bdl_dly[179:156],out_dqsn_bdl_dly[17:12],out_dqsp_bdl_dly[17:12],out_bdl_dly[155:120],
    6'h00                ,out_bdl_dly[119: 96],out_dqsn_bdl_dly[11: 6],out_dqsp_bdl_dly[11: 6],out_bdl_dly[ 95: 60],
    out_se_bdl_dly[ 5: 0],out_bdl_dly[ 59: 36],out_dqsn_bdl_dly[ 5: 0],out_dqsp_bdl_dly[ 5: 0],out_bdl_dly[ 35:  0]
};



// internal signals
wire    [      3:0]     ctrlclk_en_gt0 = mc0_phy_clk_wren_gt[3:0];
wire    [      3:0]     ctrlclk_en_gt1 = mc0_phy_clk_wren_gt[7:4];
wire    [      3:0]     ctrlclk_en_gt2 = mc0_phy_clk_wren_gt[11:8];
wire    [      3:0]     ctl_rdclk_gt0  = mc0_phy_clk_rden_gt[3:0];
wire    [      3:0]     ctl_rdclk_gt1  = mc0_phy_clk_rden_gt[7:4];
wire    [      3:0]     ctl_rdclk_gt2  = mc0_phy_clk_rden_gt[11:8];

wire    [     95:0]     remap_phy_rd_dm;
wire    [12*64-1:0]     remap_phy_rdata;
wire    [     47:0]     remap_phy_rdata_se;
wire    [     95:0]     remap_phy_rd_dqsn;
wire    [     95:0]     remap_phy_rd_dqsp;

assign phy_rd_dm    = remap_phy_rd_dm;
assign phy_rdata    = remap_phy_rdata;
assign phy_rdata_se = remap_phy_rdata_se;
assign phy_rd_dqsn  = remap_phy_rd_dqsn;
assign phy_rd_dqsp  = remap_phy_rd_dqsp;

wire    [     95:0]     remap_phy_wr_dm;
wire    [12*64-1:0]     remap_phy_wdata;
wire    [     47:0]     remap_phy_wrdata_se;
wire    [     95:0]     remap_phy_wr_dqsn;
wire    [     95:0]     remap_phy_wr_dqsp;

assign remap_phy_wr_dm     = phy_wr_dm;
assign remap_phy_wdata     = phy_wdata;
assign remap_phy_wrdata_se = phy_wrdata_se;
assign remap_phy_wr_dqsn   =  phy_wr_dqsn;
assign remap_phy_wr_dqsp   =  phy_wr_dqsp;

reg     [11:0]    rdqs_in;
reg     [11:0]    rdqs_n_in;



`ifdef USE_DQS_GATE
wire [DQS_GATE_WIDTH*8-1:0]             out_dqs_gate;
wire [DQS_GATE_WIDTH  -1:0]             out_dqs_gate_bdl_byp;
wire [DQS_GATE_WIDTH*6-1:0]             out_dqs_gate_bdl_dly;
`endif

wire [ADDR_WIDTH*8    -1:0]             out_addr;
wire [ADDR_WIDTH      -1:0]             out_addr_bdl_byp;
wire [ADDR_WIDTH*6    -1:0]             out_addr_bdl_dly;
wire [BANK_WIDTH*8    -1:0]             out_ba;
wire [BANK_WIDTH      -1:0]             out_ba_bdl_byp;
wire [BANK_WIDTH*6    -1:0]             out_ba_bdl_dly;

wire [CK_WIDTH*8      -1:0]             out_ck_n;
wire [CK_WIDTH*8      -1:0]             out_ck_p;
wire [CK_WIDTH*2      -1:0]             out_ck_bdl_byp;
wire [CK_WIDTH*2*6    -1:0]             out_ck_bdl_dly;

wire [CKE_WIDTH*8     -1:0]             out_cke;
wire [CKE_WIDTH       -1:0]             out_cke_bdl_byp;
wire [CKE_WIDTH*6     -1:0]             out_cke_bdl_dly;
wire [CS_WIDTH*8      -1:0]             out_cs_n;
wire [CS_WIDTH        -1:0]             out_cs_bdl_byp;
wire [CS_WIDTH*6      -1:0]             out_cs_bdl_dly;
wire [DM_WIDTH*8      -1:0]             out_dm;
wire [DM_WIDTH        -1:0]             out_dm_bdl_byp;
wire [DM_WIDTH*6      -1:0]             out_dm_bdl_dly;
wire [ODT_WIDTH*8     -1:0]             out_odt;
wire [ODT_WIDTH       -1:0]             out_odt_bdl_byp;
wire [ODT_WIDTH*6     -1:0]             out_odt_bdl_dly;
wire [DM_WIDTH*8      -1:0]             in_dm;
wire [         8      -1:0]             out_reset_n;
wire                                    out_reset_bdl_byp;
wire [         6      -1:0]             out_reset_bdl_dly;

`ifdef DRAM_DDR4
wire [BG_WIDTH*8      -1:0]             out_bg;
wire [BG_WIDTH        -1:0]             out_bg_bdl_byp;
wire [BG_WIDTH*6      -1:0]             out_bg_bdl_dly;
wire [         8      -1:0]             out_alert_n;
wire                                    in_alert_n;
wire                                    out_alert_bdl_byp;
wire [6-1:0]                            out_alert_bdl_dly;
wire                                    in_alert_bdl_byp;
wire [6-1:0]                            in_alert_bdl_dly;
wire [8-1:0]                            out_parity;
wire                                    out_parity_bdl_byp;
wire [6-1:0]                            out_parity_bdl_dly;
wire [8-1:0]                            out_act_n;
wire                                    out_actn_bdl_byp;
wire [6-1:0]                            out_actn_bdl_dly;
`elsif DRAM_DDR3
wire [8-1:0]                            out_cas_n;
wire                                    out_cas_bdl_byp;
wire [6-1:0]                            out_cas_bdl_dly;
wire [8-1:0]                            out_ras_n;
wire                                    out_ras_bdl_byp;
wire [6-1:0]                            out_ras_bdl_dly;
wire [8-1:0]                            out_we_n;
wire                                    out_we_bdl_byp;
wire [6-1:0]                            out_we_bdl_dly;
`endif

wire [DQ_WIDTH *8-1:0]                  out_dq;
wire [DQS_WIDTH*8-1:0]                  out_dqs_p;
wire [DQS_WIDTH*8-1:0]                  out_dqs_n;
wire [DQ_WIDTH *8-1:0]                  in_dq;
wire [DQ_WIDTH   -1:0]                  indd_dq;

wire [DQ_WIDTH   -1:0]                  out_dq_bdl_byp;
wire [DQ_WIDTH *6-1:0]                  out_dq_bdl_dly;
wire [DQS_WIDTH  -1:0]                  out_dqs_p_bdl_byp;
wire [DQS_WIDTH*6-1:0]                  out_dqs_p_bdl_dly;
wire [DQS_WIDTH  -1:0]                  out_dqs_n_bdl_byp;
wire [DQS_WIDTH*6-1:0]                  out_dqs_n_bdl_dly;
wire [DQ_WIDTH   -1:0]                  in_dq_bdl_byp;
wire [DQ_WIDTH *6-1:0]                  in_dq_bdl_dly;
wire [DQS_WIDTH  -1:0]                  in_dqs_p_bdl_byp;
wire [DQS_WIDTH*6-1:0]                  in_dqs_p_bdl_dly;
wire [DQS_WIDTH  -1:0]                  in_dqs_n_bdl_byp;
wire [DQS_WIDTH*6-1:0]                  in_dqs_n_bdl_dly;
wire [DQS_WIDTH  -1:0]                  inck_n;
wire [DQS_WIDTH  -1:0]                  inck_p;


integer aa;
always @ (*) begin
    wrlvl_qout = 72'd0;
    rdqs_in    = 12'd0;
    rdqs_n_in  = 12'd0;
    dqs_valid_sample_window = 12'd0;

    for(aa=0; aa<DQ_WIDTH; aa = aa + 1) begin
        wrlvl_qout[aa] = indd_dq[aa];
    end
//-----------------------------dqs_gate_external-----------------------------------------
`ifdef USE_DQS_GATE
    for(aa = 0; aa < DQS_GATE_WIDTH; aa = aa + 1) begin
        dqs_valid_sample_window[4*DQS_GATE_MAP[(12*aa+8) +: 3] + DQS_GATE_MAP[(12*aa+4) +: 2]] = dqs_gate_indd[aa];
    end
`endif

//-----------------------------in/out_dqs_p/n-----------------------------------------
    for(aa = 0; aa < DQS_WIDTH; aa = aa + 1)
    begin
        rdqs_in  [4*DQS_BYTE_MAP[(12*(2*aa  )+8) +: 3] + DQS_BYTE_MAP[(12*(2*aa  )+4) +: 2]] = inck_p[aa];
        rdqs_n_in[4*DQS_BYTE_MAP[(12*(2*aa+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*aa+1)+4) +: 2]] = inck_n[aa];
    end
end

genvar n;
generate
//-----------------------------dqs_gate_external-----------------------------------------
`ifdef USE_DQS_GATE
    for(n = 0; n < DQS_GATE_WIDTH; n = n + 1) begin:gen_dqs_gate_external
        assign out_dqs_gate        [8*n+:8] = remap_doq        [8*(52*DQS_GATE_MAP[(12*n+8) +: 3] + 13*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]) +: 8];
        assign out_dqs_gate_bdl_byp[n     ] = remap_out_bdl_byp[   52*DQS_GATE_MAP[(12*n+8) +: 3] + 13*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]];
        assign out_dqs_gate_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*DQS_GATE_MAP[(12*n+8) +: 3] + 13*DQS_GATE_MAP[(12*n+4) +: 2] + DQS_GATE_MAP[12*n +: 4]) +: 6];
    end
`endif

    //-----------------------------out_addr--------------------------------------
    for(n = 0; n < ADDR_WIDTH; n = n + 1) begin:gen_out_addr
        assign out_addr        [8*n+:8] = remap_doq        [8*(52*ADDR_MAP[(12*n+8) +: 3] + 13*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]) +: 8];
        assign out_addr_bdl_byp[     n] = remap_out_bdl_byp[   52*ADDR_MAP[(12*n+8) +: 3] + 13*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]];
        assign out_addr_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*ADDR_MAP[(12*n+8) +: 3] + 13*ADDR_MAP[(12*n+4) +: 2] + ADDR_MAP[12*n +: 4]) +: 6];
    end
    //-----------------------------out_ba-----------------------------------------
    for(n = 0; n < BANK_WIDTH; n = n + 1) begin:gen_out_ba
        assign out_ba        [8*n+:8] = remap_doq        [8*(52*BANK_MAP[(12*n+8) +: 3] + 13*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]) +: 8];
        assign out_ba_bdl_byp[     n] = remap_out_bdl_byp[   52*BANK_MAP[(12*n+8) +: 3] + 13*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]];
        assign out_ba_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*BANK_MAP[(12*n+8) +: 3] + 13*BANK_MAP[(12*n+4) +: 2] + BANK_MAP[12*n +: 4]) +: 6];
    end

    //-----------------------------out_odt-----------------------------------------
    for(n = 0; n < ODT_WIDTH; n = n + 1) begin:gen_out_odt
        assign out_odt        [8*n+:8] = remap_doq        [8*(52*ODT_MAP[(12*n+8) +: 3] + 13*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]) +: 8];
        assign out_odt_bdl_byp[     n] = remap_out_bdl_byp[   52*ODT_MAP[(12*n+8) +: 3] + 13*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]];
        assign out_odt_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*ODT_MAP[(12*n+8) +: 3] + 13*ODT_MAP[(12*n+4) +: 2] + ODT_MAP[12*n +: 4]) +: 6];
    end

   //-----------------------------out_cke-----------------------------------------
    for(n = 0; n < CKE_WIDTH; n = n + 1) begin:gen_out_cke
        assign out_cke        [8*n+:8] = remap_doq        [8*(52*CKE_MAP[(12*n+8) +: 3] + 13*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]) +: 8];
        assign out_cke_bdl_byp[     n] = remap_out_bdl_byp[   52*CKE_MAP[(12*n+8) +: 3] + 13*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]];
        assign out_cke_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*CKE_MAP[(12*n+8) +: 3] + 13*CKE_MAP[(12*n+4) +: 2] + CKE_MAP[12*n +: 4]) +: 6];
    end

    //-----------------------------out_ck-----------------------------------------
    for(n = 0; n < CK_WIDTH; n = n + 1) begin:gen_out_ck
        assign out_ck_p      [8*n      +:8] = remap_doq        [8*(52*CK_MAP[(12*(2*n  )+8) +: 3] + 13*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]) +: 8];
        assign out_ck_bdl_byp[2*n         ] = remap_out_bdl_byp[   52*CK_MAP[(12*(2*n  )+8) +: 3] + 13*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]];
        assign out_ck_bdl_dly[6*2*n    +:6] = remap_out_bdl_dly[6*(52*CK_MAP[(12*(2*n  )+8) +: 3] + 13*CK_MAP[(12*(2*n  )+4) +: 2] + CK_MAP[12*(2*n  ) +: 4]) +: 6];
        assign out_ck_n      [8*n      +:8] = remap_doq        [8*(52*CK_MAP[(12*(2*n+1)+8) +: 3] + 13*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]) +: 8];
        assign out_ck_bdl_byp[2*n+1       ] = remap_out_bdl_byp[   52*CK_MAP[(12*(2*n+1)+8) +: 3] + 13*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]];
        assign out_ck_bdl_dly[6*(2*n+1)+:6] = remap_out_bdl_dly[6*(52*CK_MAP[(12*(2*n+1)+8) +: 3] + 13*CK_MAP[(12*(2*n+1)+4) +: 2] + CK_MAP[12*(2*n+1) +: 4]) +: 6];
    end

    //-----------------------------out_cs-----------------------------------------
    for(n = 0; n < CS_WIDTH; n = n + 1) begin:gen_out_cs
        assign out_cs_n      [8*n+:8] = remap_doq        [8*(52*CS_MAP[(12*n+8) +: 3] + 13*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]) +: 8];
        assign out_cs_bdl_byp[n     ] = remap_out_bdl_byp[   52*CS_MAP[(12*n+8) +: 3] + 13*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]];
        assign out_cs_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*CS_MAP[(12*n+8) +: 3] + 13*CS_MAP[(12*n+4) +: 2] + CS_MAP[12*n +: 4]) +: 6];
    end

    //-----------------------------in/out_dqs_p/n-----------------------------------------
    for(n = 0; n < DQS_WIDTH; n = n + 1) begin:gen_inout_dqs
        assign out_dqs_p        [8*n+:8] = remap_doq        [8*(52*DQS_BYTE_MAP[(12*(2*n  )+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n  )+4) +: 2] + DQS_BYTE_MAP[12*(2*n  ) +: 4]) +: 8];
        assign out_dqs_p_bdl_byp[n     ] = remap_out_bdl_byp[   52*DQS_BYTE_MAP[(12*(2*n  )+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n  )+4) +: 2] + DQS_BYTE_MAP[12*(2*n  ) +: 4]];
        assign out_dqs_p_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*DQS_BYTE_MAP[(12*(2*n  )+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n  )+4) +: 2] + DQS_BYTE_MAP[12*(2*n  ) +: 4]) +: 6];
        assign in_dqs_p_bdl_byp [n     ] = remap_in_bdl_byp [   52*DQS_BYTE_MAP[(12*(2*n  )+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n  )+4) +: 2] + DQS_BYTE_MAP[12*(2*n  ) +: 4]];
        assign in_dqs_p_bdl_dly [6*n+:6] = remap_in_bdl_dly [6*(52*DQS_BYTE_MAP[(12*(2*n  )+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n  )+4) +: 2] + DQS_BYTE_MAP[12*(2*n  ) +: 4]) +: 6];
        assign out_dqs_n        [8*n+:8] = remap_doq        [8*(52*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 8];
        assign out_dqs_n_bdl_byp[n     ] = remap_out_bdl_byp[   52*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]];
        assign out_dqs_n_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 6];
        assign in_dqs_n_bdl_byp [n     ] = remap_in_bdl_byp [   52*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]];
        assign in_dqs_n_bdl_dly [6*n+:6] = remap_in_bdl_dly [6*(52*DQS_BYTE_MAP[(12*(2*n+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*n+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*n+1) +: 4]) +: 6];
    end

    //-----------------------------in/out_dq-----------------------------------------
    for(n = 0; n < DQ_WIDTH; n = n + 1) begin:gen_inout_dq
        assign out_dq        [8*n+:8] = remap_doq        [8*(52*FULL_DATA_MAP[(12*n+8) +: 3] + 13*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 8];
        assign out_dq_bdl_byp[n     ] = remap_out_bdl_byp[   52*FULL_DATA_MAP[(12*n+8) +: 3] + 13*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]];
        assign out_dq_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*FULL_DATA_MAP[(12*n+8) +: 3] + 13*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 6];
        assign in_dq_bdl_byp [n     ] = remap_in_bdl_byp [   52*FULL_DATA_MAP[(12*n+8) +: 3] + 13*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]];
        assign in_dq_bdl_dly [6*n+:6] = remap_in_bdl_dly [6*(52*FULL_DATA_MAP[(12*n+8) +: 3] + 13*FULL_DATA_MAP[(12*n+4) +: 2] + FULL_DATA_MAP[12*n +: 4]) +: 6];
    end

endgenerate

//-----------------------------out_reset-----------------------------------------
assign out_reset_n      [7 : 0] = remap_doq        [8*(52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 8];
assign out_reset_bdl_byp        = remap_out_bdl_byp[   52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]];
assign out_reset_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 6];

`ifdef DRAM_DDR4
    //-----------------------------out_bg-----------------------------------------
generate
    for(n = 0; n < BG_WIDTH; n = n + 1) begin:gen_out_bg
        assign out_bg        [8*n+:8] = remap_doq        [8*(52*BANK_GROUP_MAP[(12*n+8) +: 3] + 13*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]) +: 8];
        assign out_bg_bdl_byp[n     ] = remap_out_bdl_byp[   52*BANK_GROUP_MAP[(12*n+8) +: 3] + 13*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]];
        assign out_bg_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*BANK_GROUP_MAP[(12*n+8) +: 3] + 13*BANK_GROUP_MAP[(12*n+4) +: 2] + BANK_GROUP_MAP[12*n +: 4]) +: 6];
    end
endgenerate

//-----------------------------out_parity-----------------------------------------
assign out_parity        [7 : 0] = remap_doq        [8*(52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 8];
assign out_parity_bdl_byp        = remap_out_bdl_byp[   52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]];
assign out_parity_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 6];
//-----------------------------out_act_n-----------------------------------------
assign out_act_n       [7 : 0] = remap_doq        [8*(52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 8];
assign out_actn_bdl_byp        = remap_out_bdl_byp[   52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]];
assign out_actn_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 6];
//-----------------------------in/out_alert_n-----------------------------------------
assign out_alert_n      [7 : 0] = remap_doq        [8*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8];
assign out_alert_bdl_byp        = remap_out_bdl_byp[   52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]];
assign out_alert_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 6];
assign in_alert_bdl_byp         = remap_in_bdl_byp [   52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]];
assign in_alert_bdl_dly [5 : 0] = remap_in_bdl_dly [6*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 6];

//-----------------------------out_dm-----------------------------------------
generate
    for(n = 0; n < DM_WIDTH; n = n + 1) begin:gen_out_dm
        assign out_dm        [8*n+:8] = remap_doq        [8*(52*DM_DBI_MAP[(12*n+8) +: 3] + 13*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]) +: 8];
        assign out_dm_bdl_byp[n     ] = remap_out_bdl_byp[   52*DM_DBI_MAP[(12*n+8) +: 3] + 13*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]];
        assign out_dm_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*DM_DBI_MAP[(12*n+8) +: 3] + 13*DM_DBI_MAP[(12*n+4) +: 2] + DM_DBI_MAP[12*n +: 4]) +: 6];
    end
endgenerate
`elsif DRAM_DDR3

//-----------------------------out_ras-----------------------------------------
assign out_ras_n      [7 : 0] = remap_doq        [8*(52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 8];
assign out_ras_bdl_byp        = remap_out_bdl_byp[   52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]];
assign out_ras_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 6];

//-----------------------------out_cas-----------------------------------------
assign out_cas_n      [7 : 0] = remap_doq        [8*(52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 8];
assign out_cas_bdl_byp        = remap_out_bdl_byp[   52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]];
assign out_cas_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 6];

//-----------------------------out_we-----------------------------------------
assign out_we_n      [7 : 0] = remap_doq        [8*(52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]) +: 8];
assign out_we_bdl_byp        = remap_out_bdl_byp[   52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]];
assign out_we_bdl_dly[5 : 0] = remap_out_bdl_dly[6*(52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]) +: 6];
//-----------------------------out_dm-----------------------------------------
generate
    for(n = 0; n < DM_WIDTH; n = n + 1) begin:gen_out_dm
        assign out_dm        [8*n+:8] = remap_doq        [8*(52*DM_MAP[(12*n+8) +: 3] + 13*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]) +: 8];
        assign out_dm_bdl_byp[n     ] = remap_out_bdl_byp[   52*DM_MAP[(12*n+8) +: 3] + 13*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]];
        assign out_dm_bdl_dly[6*n+:6] = remap_out_bdl_dly[6*(52*DM_MAP[(12*n+8) +: 3] + 13*DM_MAP[(12*n+4) +: 2] + DM_MAP[12*n +: 4]) +: 6];
    end
endgenerate
`endif


always @ (*) begin
    remap_diq = 'b0;
`ifdef DRAM_DDR4
    //-----------------------------out_dm-----------------------------------------
    `ifdef USE_DM
        for(aa = 0; aa < DM_WIDTH; aa = aa + 1) begin
            remap_diq[8*(52*DM_DBI_MAP[(12*aa+8) +: 3] + 13*DM_DBI_MAP[(12*aa+4) +: 2] + DM_DBI_MAP[12*aa +: 4]) +: 8] = in_dm[aa*8 +: 8];
        end
    `endif

    //-----------------------------in_alert_n-----------------------------------------
    `ifdef USE_PAR_ALERT
        remap_diq[8*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 8] = {8{in_alert_n}};
    `endif
`elsif DRAM_DDR3
        //-----------------------------out_dm-----------------------------------------
        `ifdef USE_DM
            for(aa = 0; aa < DM_WIDTH; aa = aa + 1) begin
                remap_diq[8*(52*DM_MAP[(12*aa+8) +: 3] + 13*DM_MAP[(12*aa+4) +: 2] + DM_MAP[12*aa +: 4]) +: 8] = in_dm[aa*8 +: 8];
            end
        `endif
`endif
//-----------------------------in/out_dq-----------------------------------------
    for(aa = 0; aa < DQ_WIDTH; aa = aa + 1) begin
        remap_diq[8*(52*FULL_DATA_MAP[(12*aa+8) +: 3] + 13*FULL_DATA_MAP[(12*aa+4) +: 2] + FULL_DATA_MAP[12*aa +: 4]) +: 8] = in_dq[aa*8 +: 8];
    end

end


genvar m;
generate
`ifdef USE_DQS_GATE
//------------------------dqs_gate_indd signals---------------------------------------------
    for (m = 0; m < DQS_GATE_WIDTH; m = m + 1) begin: gen_dqs_gate
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "PIB"                                                            ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

            ) u_ddr_hpio(
             .doq                     (  out_dqs_gate            [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_dqs_gate_bdl_byp    [m]                                      ),
             .out_bdl_dly             (  out_dqs_gate_bdl_dly    [m*6 +: 6]                               ),
     //      .qs_n_div                (                                                                   ),
     //      .diq                     (                                                                   ),
             .pad                     (  dqs_gate                [m]                                      ),
             .indd                    (  dqs_gate_indd           [m]                                      ),
     //      .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  1'b0),// ts_dq          [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DQS_GATE_MAP[(12*m+8) +: 3] + DQS_GATE_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*DQS_GATE_MAP[(12*m+8) +: 3] + 13*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*DQS_GATE_MAP[(12*m+8) +: 3] + 13*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*DQS_GATE_MAP[(12*m+8) +: 3] + 13*DQS_GATE_MAP[(12*m+4) +: 2] + DQS_GATE_MAP[12*m +: 4]) +: 2] )
        );
    end
`endif
    //------------------------address signals---------------------------------------------
    for (m = 0; m < ADDR_WIDTH; m = m + 1) begin: gen_ddr_addr
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_addr                [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_addr_bdl_byp        [m]                                      ),
             .out_bdl_dly             (  out_addr_bdl_dly        [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_addr                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*ADDR_MAP[(12*m+8) +: 3] + ADDR_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*ADDR_MAP[(12*m+8) +: 3] + 13*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*ADDR_MAP[(12*m+8) +: 3] + 13*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*ADDR_MAP[(12*m+8) +: 3] + 13*ADDR_MAP[(12*m+4) +: 2] + ADDR_MAP[12*m +: 4]) +: 2] )
        );
    end
    //------------------------ bank address -----------------------
    for (m = 0; m < BANK_WIDTH; m = m + 1) begin: gen_ddr_ba
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_ba                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_ba_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_ba_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ba                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*BANK_MAP[(12*m+8) +: 3] + BANK_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*BANK_MAP[(12*m+8) +: 3] + 13*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*BANK_MAP[(12*m+8) +: 3] + 13*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*BANK_MAP[(12*m+8) +: 3] + 13*BANK_MAP[(12*m+4) +: 2] + BANK_MAP[12*m +: 4]) +: 2] )
        );
    end

    //------------------------ odt mapping -----------------------
    for (m = 0; m < ODT_WIDTH; m = m + 1) begin: gen_ddr_odt
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_odt                 [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_odt_bdl_byp         [m]                                      ),
             .out_bdl_dly             (  out_odt_bdl_dly         [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_odt                 [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*ODT_MAP[(12*m+8) +: 3] + ODT_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*ODT_MAP[(12*m+8) +: 3] + 13*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*ODT_MAP[(12*m+8) +: 3] + 13*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*ODT_MAP[(12*m+8) +: 3] + 13*ODT_MAP[(12*m+4) +: 2] + ODT_MAP[12*m +: 4]) +: 2] )
        );
    end
    //------------------------ cke mapping -----------------------
    for (m = 0; m < CKE_WIDTH; m = m + 1) begin: gen_ddr_cke
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_cke                 [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_cke_bdl_byp         [m]                                      ),
             .out_bdl_dly             (  out_cke_bdl_dly         [6*m +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cke                 [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CKE_MAP[(12*m+8) +: 3] + CKE_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*CKE_MAP[(12*m+8) +: 3] + 13*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*CKE_MAP[(12*m+8) +: 3] + 13*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*CKE_MAP[(12*m+8) +: 3] + 13*CKE_MAP[(12*m+4) +: 2] + CKE_MAP[12*m +: 4]) +: 2] )
        );
    end

    //------------------------ cs_n mapping -----------------------
    `ifdef USE_CS
    for (m = 0; m < CS_WIDTH; m = m + 1) begin:gen_ddr_cs_n
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_cs_n                [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_cs_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_cs_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cs_n                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CS_MAP[(12*m+8) +: 3] + CS_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*CS_MAP[(12*m+8) +: 3] + 13*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*CS_MAP[(12*m+8) +: 3] + 13*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*CS_MAP[(12*m+8) +: 3] + 13*CS_MAP[(12*m+4) +: 2] + CS_MAP[12*m +: 4]) +: 2] )
        );
    end
    `endif

`ifdef DRAM_DDR4
    //------------------------ bank group address -----------------------
    for (m = 0; m < BG_WIDTH; m = m + 1) begin: gen_ddr_bg
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_bg                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_bg_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_bg_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_bg                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*BANK_GROUP_MAP[(12*m+8) +: 3] + BANK_GROUP_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*BANK_GROUP_MAP[(12*m+8) +: 3] + 13*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*BANK_GROUP_MAP[(12*m+8) +: 3] + 13*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*BANK_GROUP_MAP[(12*m+8) +: 3] + 13*BANK_GROUP_MAP[(12*m+4) +: 2] + BANK_GROUP_MAP[12*m +: 4]) +: 2] )
        );
    end

    `ifdef USE_PAR_ALERT
    //------------------------ parity mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_io_parity(
             .doq                     (  out_parity              [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_parity_bdl_byp                                               ),
             .out_bdl_dly             (  out_parity_bdl_dly      [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_parity                                                       ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rdqs                    (  rdqs                    [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dq                   (  ts_dq                   [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dqs                  (  ts_dqs                  [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_dqsn                 (  ts_dqsn                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .pdr                     (  pdr                     [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .pdr_dqsn                (  pdr_dqsn                [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .te                      (  te                      [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .te_dqsn                 (  te_dqsn                 [4*PARITY_MAP[11:8] + PARITY_MAP[7:4]]   ),
             .ts_md                   (  remap_ts_md             [2*(52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*PARITY_MAP[11:8] + 13*PARITY_MAP[7:4] + PARITY_MAP[3:0]) +: 2] )
        );
    //------------------------ alert_n mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "IN"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_io_alert_n(
             .doq                     (  out_alert_n                                                      ),
             .in_bdl_byp              (  in_alert_bdl_byp                                                 ),
             .in_bdl_dly              (  in_alert_bdl_dly                                                 ),
             .out_bdl_byp             (  out_alert_bdl_byp                                                ),
             .out_bdl_dly             (  out_alert_bdl_dly                                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_alert_n                                                       ),
             .pad                     (  ddr_alert_n                                                      ),
             .indd                    (  ),//in_alert_n ),//dqs_valid_sample_window[4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rdqs                    (  rdqs                    [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dq                   (  ts_dq                   [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dqs                  (  ts_dqs                  [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_dqsn                 (  ts_dqsn                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .pdr                     (  pdr                     [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .pdr_dqsn                (  pdr_dqsn                [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .te                      (  te                      [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .te_dqsn                 (  te_dqsn                 [4*ALERT_MAP[11:8] + ALERT_MAP[7:4]]     ),
             .ts_md                   (  remap_ts_md             [2*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*ALERT_MAP[11:8] + 13*ALERT_MAP[7:4] + ALERT_MAP[3:0]) +: 2] )
        );
    `endif
    //------------------------ act_n mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_io_act(
             .doq                     (  out_act_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_actn_bdl_byp                                                 ),
             .out_bdl_dly             (  out_actn_bdl_dly        [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_act_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dq                   (  ts_dq                   [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .pdr                     (  pdr                     [4*ACT_MAP[11:8] + ACT_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .te                      (  te                      [4*ACT_MAP[11:8] + ACT_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*ACT_MAP[11:8] + ACT_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*ACT_MAP[11:8] + 13*ACT_MAP[7:4] + ACT_MAP[3:0]) +: 2] )
        );

    //------------------------ dm mapping -----------------------
    `ifdef USE_DM
    for (m = 0; m < DM_WIDTH; m = m + 1) begin:gen_ddr_dm
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_dm                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_dm_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dm_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dm                   [8*m +:8]                                ),
             .pad                     (  ddr_dm                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DM_DBI_MAP[(12*m+8) +: 3] + DM_DBI_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*DM_DBI_MAP[(12*m+8) +: 3] + 13*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*DM_DBI_MAP[(12*m+8) +: 3] + 13*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*DM_DBI_MAP[(12*m+8) +: 3] + 13*DM_DBI_MAP[(12*m+4) +: 2] + DM_DBI_MAP[12*m +: 4]) +: 2] )
        );
    end
    `endif

`elsif DRAM_DDR3

    //------------------------ ras mapping -----------------------
    begin:gen_ddr_ras_n
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_ras_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_ras_bdl_byp                                                  ),
             .out_bdl_dly             (  out_ras_bdl_dly         [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ras_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dq                   (  ts_dq                   [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .pdr                     (  pdr                     [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .pdr_dqs                 (  pdr_dqs                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .te                      (  te                      [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .te_dqs                  (  te_dqs                  [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*RAS_MAP[11:8] + RAS_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*RAS_MAP[11:8] + 13*RAS_MAP[7:4] + RAS_MAP[3:0]) +: 2] )
        );
    end
    //------------------------ cas mapping -----------------------
    begin:gen_ddr_cas_n
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_cas_n               [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_cas_bdl_byp                                                  ),
             .out_bdl_dly             (  out_cas_bdl_dly         [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_cas_n                                                        ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rdqs                    (  rdqs                    [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dq                   (  ts_dq                   [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dqs                  (  ts_dqs                  [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_dqsn                 (  ts_dqsn                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .pdr                     (  pdr                     [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .pdr_dqs                 (  pdr_dqs                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .pdr_dqsn                (  pdr_dqsn                [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .te                      (  te                      [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .te_dqs                  (  te_dqs                  [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .te_dqsn                 (  te_dqsn                 [4*CAS_MAP[11:8] + CAS_MAP[7:4]]         ),
             .ts_md                   (  remap_ts_md             [2*(52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*CAS_MAP[11:8] + 13*CAS_MAP[7:4] + CAS_MAP[3:0]) +: 2] )

        );
    end

    //------------------------ we mapping -----------------------
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_we_n                [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_we_bdl_byp                                                   ),
             .out_bdl_dly             (  out_we_bdl_dly          [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_we_n                                                         ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rdqs                    (  rdqs                    [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dq                   (  ts_dq                   [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dqs                  (  ts_dqs                  [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_dqsn                 (  ts_dqsn                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .pdr                     (  pdr                     [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .pdr_dqs                 (  pdr_dqs                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .pdr_dqsn                (  pdr_dqsn                [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .te                      (  te                      [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .te_dqs                  (  te_dqs                  [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .te_dqsn                 (  te_dqsn                 [4*WE_MAP[11:8] + WE_MAP[7:4]]           ),
             .ts_md                   (  remap_ts_md             [2*(52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*WE_MAP[11:8] + 13*WE_MAP[7:4] + WE_MAP[3:0]) +: 2] )
        );



    //------------------------ dm mapping -----------------------
    `ifdef USE_DM
    for (m = 0; m < DM_WIDTH; m = m + 1) begin:gen_ddr_dm
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_dm                  [8*m +:8]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_dm_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dm_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dm                   [8*m +:8]                                ),
             .pad                     (  ddr_dm                  [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  1'b0                                                             ),
             .rdqs_n_gated            (  1'b0                                                             ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DM_MAP[(12*m+8) +: 3] + DM_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*DM_MAP[(12*m+8) +: 3] + 13*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*DM_MAP[(12*m+8) +: 3] + 13*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*DM_MAP[(12*m+8) +: 3] + 13*DM_MAP[(12*m+4) +: 2] + DM_MAP[12*m +: 4]) +: 2] )
        );
    end
    `endif

`endif

    //------------------------ dq mapping -----------------------
    for (m = 0; m < DQ_WIDTH; m = m + 1) begin: gen_ddr_dq
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WDQ"                                                    ),
             .OPCLK_SEL               (  "CTL_CLK_WDQ"                                                    ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_dq                  [8*m +:8]                                ),
             .in_bdl_byp              (  in_dq_bdl_byp           [m]                                      ),
             .in_bdl_dly              (  in_dq_bdl_dly           [m*6 +: 6]                               ),
             .out_bdl_byp             (  out_dq_bdl_byp          [m]                                      ),
             .out_bdl_dly             (  out_dq_bdl_dly          [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  in_dq                   [8*m +:8]                                ),
             .pad                     (  ddr_dq                  [m]                                      ),
             .indd                    (  indd_dq                 [m]                                      ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr                     (  pdr                     [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te                      (  te                      [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*FULL_DATA_MAP[(12*m+8) +: 3] + FULL_DATA_MAP[(12*m+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*FULL_DATA_MAP[(12*m+8) +: 3] + 13*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*FULL_DATA_MAP[(12*m+8) +: 3] + 13*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*FULL_DATA_MAP[(12*m+8) +: 3] + 13*FULL_DATA_MAP[(12*m+4) +: 2] + FULL_DATA_MAP[12*m +: 4]) +: 2] )
        );
    end
    //------------------------ dqs_p mapping -----------------------
    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_ddr_dqs_t
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WL"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_WL"                                                     ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQS"                                                            ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQS"                                                            ),
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQS"                                                            ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )

        ) u_ddr_hpio(
             .doq                     (  out_dqs_p               [8*m +:8]                                ),
             .in_bdl_byp              (  in_dqs_p_bdl_byp        [m]                                      ),
             .in_bdl_dly              (  in_dqs_p_bdl_dly        [m*6 +: 6]                               ),
             .out_bdl_byp             (  out_dqs_p_bdl_byp       [m]                                      ),
             .out_bdl_dly             (  out_dqs_p_bdl_dly       [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  ),//in_dqs_p            [8*m +:8]                                ),
             .pad                     (  ddr_dqs_t               [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (  inck_p                  [m]                                      ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr                     (  pdr                     [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te                      (  te                      [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DQS_BYTE_MAP[(12*m*2+8) +: 3] + DQS_BYTE_MAP[(12*m*2+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 13*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 13*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*DQS_BYTE_MAP[(12*m*2+8) +: 3] + 13*DQS_BYTE_MAP[(12*m*2+4) +: 2] + DQS_BYTE_MAP[12*m*2 +: 4]) +: 2] )
        );
    end
    //------------------------ dqs_n mapping -----------------------
    for (m = 0; m < DQS_WIDTH; m = m + 1) begin: gen_ddr_dqs_c
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_WL"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_WL"                                                     ),
             .DDR_SIGNAL_TYPE         (  "DX"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQSN"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQSN"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "BI"                                                             ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQSN"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "DX"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_dqs_n               [8*m +:8]                                ),
             .in_bdl_byp              (  in_dqs_n_bdl_byp        [m]                                      ),
             .in_bdl_dly              (  in_dqs_n_bdl_dly        [m*6 +: 6]                               ),
             .out_bdl_byp             (  out_dqs_n_bdl_byp       [m]                                      ),
             .out_bdl_dly             (  out_dqs_n_bdl_dly       [m*6 +: 6]                               ),
             .qs_n_div                (                                                                   ),
             .diq                     (  ),//in_dqs_n            [8*m +:8]                                ),
             .pad                     (  ddr_dqs_c               [m]                                      ),

             .indd                    (                                                                   ),
             .indqs                   (  inck_n                  [m]                                      ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr                     (  pdr                     [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te                      (  te                      [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*DQS_BYTE_MAP[(12*(2*m+1)+8) +: 3] + 13*DQS_BYTE_MAP[(12*(2*m+1)+4) +: 2] + DQS_BYTE_MAP[12*(2*m+1) +: 4]) +: 2] )
        );
    end

    //------------------------ ck_p mapping -----------------------
    for (m = 0; m < CK_WIDTH; m = m + 1) begin: gen_ddr_ck_t
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_ck_p                [8*m +: 8]                               ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_ck_bdl_byp          [2*m]                                    ),
             .out_bdl_dly             (  out_ck_bdl_dly          [6*2*m +: 6]                             ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ck_t                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dq                   (  ts_dq                   [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr                     (  pdr                     [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te                      (  te                      [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CK_MAP[(12*m*2+8) +: 3] + CK_MAP[(12*m*2+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*CK_MAP[(12*m*2+8) +: 3] + 13*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*CK_MAP[(12*m*2+8) +: 3] + 13*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*CK_MAP[(12*m*2+8) +: 3] + 13*CK_MAP[(12*m*2+4) +: 2] + CK_MAP[12*m*2 +: 4]) +: 2] )
        );
    end
    //------------------------ ck_n mapping -----------------------
    for (m = 0; m < CK_WIDTH; m = m + 1) begin: gen_ddr_ck_c
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_hpio(
             .doq                     (  out_ck_n                [8*m +: 8]                               ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_ck_bdl_byp          [2*m+1]                                  ),
             .out_bdl_dly             (  out_ck_bdl_dly          [6*(2*m+1) +: 6]                         ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_ck_c                [m]                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs                    (  rdqs                    [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .wr_path_rstn_upp        (                                                                   ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .rd_path_rstn_upp        (                                                                   ),
             .ts_dq                   (  ts_dq                   [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqs                  (  ts_dqs                  [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_dqsn                 (  ts_dqsn                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr                     (  pdr                     [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .pdr_dqsn                (  pdr_dqsn                [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te                      (  te                      [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqs                  (  te_dqs                  [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .te_dqsn                 (  te_dqsn                 [4*CK_MAP[(12*(2*m+1)+8) +: 3] + CK_MAP[(12*(2*m+1)+4) +: 2]] ),
             .ts_md                   (  remap_ts_md             [2*(52*CK_MAP[(12*(2*m+1)+8) +: 3] + 13*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*CK_MAP[(12*(2*m+1)+8) +: 3] + 13*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*CK_MAP[(12*(2*m+1)+8) +: 3] + 13*CK_MAP[(12*(2*m+1)+4) +: 2] + CK_MAP[12*(2*m+1) +: 4]) +: 2] )
        );
    end

    //------------------------ reset_n mapping -----------------------
    `ifdef USE_RESET
        PH1_PHY_DDR_PAD  #(
             .OSCLK_SEL               (  "DDR_CLK_IO"                                                     ),
             .OPCLK_SEL               (  "CTL_CLK_IO"                                                     ),
             .DDR_SIGNAL_TYPE         (  "AC"                                                             ),
             .DDR_RST_TYPE            (  DDR_RST_MODE                                                     ),
             .DATA_OUT_SYNC           (  DATA_OUT_SYNC                                                    ),
             .TS_SEL                  (  "DQAC"                                                           ),
             .DLY_TEST_EN             (  DLY_TEST_EN                                                      ),
             .DATA_WIDTH              (  DATA_WIDTH                                                       ),
             .ODT_SRC_SEL             (  "DQAC"                                                           ),
        `ifdef DRAM_DDR4
             .DQS_PUPD                (  DQSP_PUPD                                                        ),
        `elsif DRAM_DDR3
             .DQS_PUPD                (  DQSN_PUPD                                                        ),
        `endif
             .DQS_PUPD_STRENGTH       (  DQS_PUPD_STRENGTH                                                ),
             .MODE                    (  "OUT"                                                            ),
             .VREF_EXT_IN             (  VREF_SRC_SEL                                                     ),
             .LOOPBACK_EN             (  LOOPBACK_EN                                                      ),
             .PDR_MODE_SEL            (  "DQAC"                                                           ),
             .DISABLE_GSR             (  DISABLE_GSR                                                      ),
             .OUTPUT_IMP              (  OUTPUT_IMP                                                       ),
             .ODT                     (  ODT                                                              ),
             .SIGTYPE                 (  (DCI == "DISABLE") ? "DCI_DISABLE" : "AC"                        ),
             .APPS                    (  "DDR_DRAM"                                                       ),
             .OUTDEL                  (  OUTDEL                                                           ),
             .OUTDELMUX               (  OUTDELMUX                                                        ),
             .INDEL                   (  INDEL                                                            ),
             .INDELMUX                (  INDELMUX                                                         )
        ) u_ddr_io_rst(
             .doq                     (  out_reset_n             [8-1 : 0]                                ),
             .in_bdl_byp              (  1'b0                                                             ),
             .in_bdl_dly              (  6'd0                                                             ),
             .out_bdl_byp             (  out_reset_bdl_byp                                                ),
             .out_bdl_dly             (  out_reset_bdl_dly       [6-1 : 0]                                ),
             .qs_n_div                (                                                                   ),
             .diq                     (                                                                   ),
             .pad                     (  ddr_reset_n                                                      ),
             .indd                    (                                                                   ),
             .indqs                   (                                                                   ),
             .ctl_phy_clk             (  ctl_phy_clk             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_ac              (  ctl_clk_ac              [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_dqs             (  ctl_clk_dqs             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ctl_clk_wdq             (  ctl_clk_wdq             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_ac              (  ddr_clk_ac              [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_dqs             (  ddr_clk_dqs             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ddr_clk_wdq             (  ddr_clk_wdq             [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rdqs                    (  rdqs                    [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rdqs_n_gated            (  rdqs_n_gated            [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .wr_path_rstn_low        (  wr_path_rstn_low        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .wr_path_rstn_upp        (  wr_path_rstn_upp        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rd_path_rstn_low        (  rd_path_rstn_low        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .rd_path_rstn_upp        (  rd_path_rstn_upp        [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dq                   (  ts_dq                   [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dqs                  (  ts_dqs                  [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_dqsn                 (  ts_dqsn                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .pdr                     (  pdr                     [4*RESET_MAP[11:8] + RESET_MAP[7:4]] ),
             .pdr_dqs                 (  pdr_dqs                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .pdr_dqsn                (  pdr_dqsn                [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .te                      (  te                      [4*RESET_MAP[11:8] + RESET_MAP[7:4]] ),
             .te_dqs                  (  te_dqs                  [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .te_dqsn                 (  te_dqsn                 [4*RESET_MAP[11:8] + RESET_MAP[7:4]]     ),
             .ts_md                   (  remap_ts_md             [2*(52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] ),
             .pdr_md                  (  remap_pdr_md            [2*(52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] ),
             .te_md                   (  remap_te_md             [2*(52*RESET_MAP[11:8] + 13*RESET_MAP[7:4] + RESET_MAP[3:0]) +: 2] )
        );
    `endif
endgenerate


wire[ 9:0] A_dqsgr_apb_addr0          = apb_addr[9:0]                           ; 
wire       A_dqsgr_apb_clk0           = apb_clk                                 ; 
wire       A_dqsgr_apb_enable0        = apb_enable                              ; 
wire       A_dqsgr_apb_error0                                                   ; 
wire[31:0] A_dqsgr_apb_rdata0                                                   ; 
wire       A_dqsgr_apb_ready0                                                   ; 
wire       A_dqsgr_apb_rst_n0         = apb_rst_n                               ; 
wire       A_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel                       ; 
wire[31:0] A_dqsgr_apb_wdata0         = apb_wdata                               ; 
wire       A_dqsgr_apb_wr_rdn0        = apb_wr_rdn                              ; 
wire       A_offcal_psel0             =(apb_addr[15:11] == 15) ? apb_sel :1'b0  ; 

wire[ 9:0] B_dqsgr_apb_addr0          = apb_addr[9:0]                           ; 
wire       B_dqsgr_apb_clk0           = apb_clk                                 ; 
wire       B_dqsgr_apb_enable0        = apb_enable                              ; 
wire       B_dqsgr_apb_error0                                                   ; 
wire[31:0] B_dqsgr_apb_rdata0                                                   ; 
wire       B_dqsgr_apb_ready0                                                   ; 
wire       B_dqsgr_apb_rst_n0         = apb_rst_n                               ; 
wire       B_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel                       ; 
wire[31:0] B_dqsgr_apb_wdata0         = apb_wdata                               ; 
wire       B_dqsgr_apb_wr_rdn0        = apb_wr_rdn                              ; 
wire       B_offcal_psel0             = (apb_addr[15:11] == 14) ? apb_sel :1'b0 ; 

wire[ 9:0] C_dqsgr_apb_addr0          = apb_addr[9:0]                           ; 
wire       C_dqsgr_apb_clk0           = apb_clk                                 ; 
wire       C_dqsgr_apb_enable0        = apb_enable                              ; 
wire       C_dqsgr_apb_error0                                                   ; 
wire[31:0] C_dqsgr_apb_rdata0                                                   ; 
wire       C_dqsgr_apb_ready0                                                   ; 
wire       C_dqsgr_apb_rst_n0         = apb_rst_n                               ; 
wire       C_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel                       ; 
wire[31:0] C_dqsgr_apb_wdata0         = apb_wdata                               ; 
wire       C_dqsgr_apb_wr_rdn0        = apb_wr_rdn                              ; 
wire       C_offcal_psel0             = (apb_addr[15:11] == 13) ? apb_sel :1'b0 ; 

wire[ 9:0] D_dqsgr_apb_addr0          = apb_addr[9:0]                           ; 
wire       D_dqsgr_apb_clk0           = apb_clk                                 ; 
wire       D_dqsgr_apb_enable0        = apb_enable                              ; 
wire       D_dqsgr_apb_error0                                                   ; 
wire[31:0] D_dqsgr_apb_rdata0                                                   ; 
wire       D_dqsgr_apb_ready0                                                   ; 
wire       D_dqsgr_apb_rst_n0         = apb_rst_n                               ; 
wire       D_dqsgr_apb_sync_path_sel0 = apb_sync_path_sel                       ; 
wire[31:0] D_dqsgr_apb_wdata0         = apb_wdata                               ; 
wire       D_dqsgr_apb_wr_rdn0        = apb_wr_rdn                              ; 
wire       D_offcal_psel0             = (apb_addr[15:11] == 12) ? apb_sel :1'b0 ; 

wire[10:0] pzq_apb_addr0              = apb_addr[10:0]                          ; 
wire       pzq_apb_clk0               = apb_clk                                 ; 
wire       pzq_apb_enable0            = apb_enable                              ; 
wire       pzq_apb_error0                                                       ; 
wire[31:0] pzq_apb_rdata0                                                       ; 
wire       pzq_apb_rdy0                                                         ; 
wire       pzq_apb_rst_n0             = apb_rst_n                               ; 
wire       pzq_apb_sel0               = (apb_addr[15:11] == 3) ? apb_sel :1'b0  ; 
wire       pzq_apb_sync_path_sel0     = apb_sync_path_sel                       ; 
wire[31:0] pzq_apb_wdata0             = apb_wdata                               ; 
wire       pzq_apb_wr_rdn0            = apb_wr_rdn                              ; 

wire[ 9:0] A_dqsgr_apb_addr1          = apb_addr[9:0]                           ; 
wire       A_dqsgr_apb_clk1           = apb_clk                                 ; 
wire       A_dqsgr_apb_enable1        = apb_enable                              ; 
wire       A_dqsgr_apb_error1                                                   ; 
wire[31:0] A_dqsgr_apb_rdata1                                                   ; 
wire       A_dqsgr_apb_ready1                                                   ; 
wire       A_dqsgr_apb_rst_n1         = apb_rst_n                               ; 
wire       A_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel                       ; 
wire[31:0] A_dqsgr_apb_wdata1         = apb_wdata                               ; 
wire       A_dqsgr_apb_wr_rdn1        = apb_wr_rdn                              ; 
wire       A_offcal_psel1             = (apb_addr[15:11] == 11) ? apb_sel :1'b0 ; 

wire[ 9:0] B_dqsgr_apb_addr1          = apb_addr[9:0]                           ; 
wire       B_dqsgr_apb_clk1           = apb_clk                                 ; 
wire       B_dqsgr_apb_enable1        = apb_enable                              ; 
wire       B_dqsgr_apb_error1                                                   ; 
wire[31:0] B_dqsgr_apb_rdata1                                                   ; 
wire       B_dqsgr_apb_ready1                                                   ; 
wire       B_dqsgr_apb_rst_n1         = apb_rst_n                               ; 
wire       B_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel                       ; 
wire[31:0] B_dqsgr_apb_wdata1         = apb_wdata                               ; 
wire       B_dqsgr_apb_wr_rdn1        = apb_wr_rdn                              ; 
wire       B_offcal_psel1             = (apb_addr[15:11] == 10) ? apb_sel :1'b0 ; 

wire[ 9:0] C_dqsgr_apb_addr1          = apb_addr[9:0]                           ; 
wire       C_dqsgr_apb_clk1           = apb_clk                                 ; 
wire       C_dqsgr_apb_enable1        = apb_enable                              ; 
wire       C_dqsgr_apb_error1                                                   ; 
wire[31:0] C_dqsgr_apb_rdata1                                                   ; 
wire       C_dqsgr_apb_ready1                                                   ; 
wire       C_dqsgr_apb_rst_n1         = apb_rst_n                               ; 
wire       C_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel                       ; 
wire[31:0] C_dqsgr_apb_wdata1         = apb_wdata                               ; 
wire       C_dqsgr_apb_wr_rdn1        = apb_wr_rdn                              ; 
wire       C_offcal_psel1             = (apb_addr[15:11] == 9) ? apb_sel :1'b0  ; 

wire[ 9:0] D_dqsgr_apb_addr1          = apb_addr[9:0]                           ; 
wire       D_dqsgr_apb_clk1           = apb_clk                                 ; 
wire       D_dqsgr_apb_enable1        = apb_enable                              ; 
wire       D_dqsgr_apb_error1                                                   ; 
wire[31:0] D_dqsgr_apb_rdata1                                                   ; 
wire       D_dqsgr_apb_ready1                                                   ; 
wire       D_dqsgr_apb_rst_n1         = apb_rst_n                               ; 
wire       D_dqsgr_apb_sync_path_sel1 = apb_sync_path_sel                       ; 
wire[31:0] D_dqsgr_apb_wdata1         = apb_wdata                               ; 
wire       D_dqsgr_apb_wr_rdn1        = apb_wr_rdn                              ; 
wire       D_offcal_psel1             = (apb_addr[15:11] == 8) ? apb_sel :1'b0  ; 

wire[10:0] pzq_apb_addr1              = apb_addr[10:0]                          ; 
wire       pzq_apb_clk1               = apb_clk                                 ; 
wire       pzq_apb_enable1            = apb_enable                              ; 
wire       pzq_apb_error1                                                       ; 
wire[31:0] pzq_apb_rdata1                                                       ; 
wire       pzq_apb_rdy1                                                         ; 
wire       pzq_apb_rst_n1             = apb_rst_n                               ; 
wire       pzq_apb_sel1               = (apb_addr[15:11] == 2) ? apb_sel :1'b0  ; 
wire       pzq_apb_sync_path_sel1     = apb_sync_path_sel                       ; 
wire[31:0] pzq_apb_wdata1             = apb_wdata                               ; 
wire       pzq_apb_wr_rdn1            = apb_wr_rdn                              ; 

wire[ 9:0] A_dqsgr_apb_addr2          = apb_addr[9:0]                           ; 
wire       A_dqsgr_apb_clk2           = apb_clk                                 ; 
wire       A_dqsgr_apb_enable2        = apb_enable                              ; 
wire       A_dqsgr_apb_error2                                                   ; 
wire[31:0] A_dqsgr_apb_rdata2                                                   ; 
wire       A_dqsgr_apb_ready2                                                   ; 
wire       A_dqsgr_apb_rst_n2         = apb_rst_n                               ; 
wire       A_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel                       ; 
wire[31:0] A_dqsgr_apb_wdata2         = apb_wdata                               ; 
wire       A_dqsgr_apb_wr_rdn2        = apb_wr_rdn                              ; 
wire       A_offcal_psel2             = (apb_addr[15:11] == 7) ? apb_sel :1'b0  ; 

wire[ 9:0] B_dqsgr_apb_addr2          = apb_addr[9:0]                           ; 
wire       B_dqsgr_apb_clk2           = apb_clk                                 ; 
wire       B_dqsgr_apb_enable2        = apb_enable                              ; 
wire       B_dqsgr_apb_error2                                                   ; 
wire[31:0] B_dqsgr_apb_rdata2                                                   ; 
wire       B_dqsgr_apb_ready2                                                   ; 
wire       B_dqsgr_apb_rst_n2         = apb_rst_n                               ; 
wire       B_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel                       ; 
wire[31:0] B_dqsgr_apb_wdata2         = apb_wdata                               ; 
wire       B_dqsgr_apb_wr_rdn2        = apb_wr_rdn                              ; 
wire       B_offcal_psel2             = (apb_addr[15:11] == 6) ? apb_sel :1'b0  ; 

wire[ 9:0] C_dqsgr_apb_addr2          = apb_addr[9:0]                           ; 
wire       C_dqsgr_apb_clk2           = apb_clk                                 ; 
wire       C_dqsgr_apb_enable2        = apb_enable                              ; 
wire       C_dqsgr_apb_error2                                                   ; 
wire[31:0] C_dqsgr_apb_rdata2                                                   ; 
wire       C_dqsgr_apb_ready2                                                   ; 
wire       C_dqsgr_apb_rst_n2         = apb_rst_n                               ; 
wire       C_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel                       ; 
wire[31:0] C_dqsgr_apb_wdata2         = apb_wdata                               ; 
wire       C_dqsgr_apb_wr_rdn2        = apb_wr_rdn                              ; 
wire       C_offcal_psel2             = (apb_addr[15:11] == 5) ? apb_sel :1'b0  ; 

wire[ 9:0] D_dqsgr_apb_addr2          = apb_addr[9:0]                           ; 
wire       D_dqsgr_apb_clk2           = apb_clk                                 ; 
wire       D_dqsgr_apb_enable2        = apb_enable                              ; 
wire       D_dqsgr_apb_error2                                                   ; 
wire[31:0] D_dqsgr_apb_rdata2                                                   ; 
wire       D_dqsgr_apb_ready2                                                   ; 
wire       D_dqsgr_apb_rst_n2         = apb_rst_n                               ; 
wire       D_dqsgr_apb_sync_path_sel2 = apb_sync_path_sel                       ; 
wire[31:0] D_dqsgr_apb_wdata2         = apb_wdata                               ; 
wire       D_dqsgr_apb_wr_rdn2        = apb_wr_rdn                              ; 
wire       D_offcal_psel2             = (apb_addr[15:11] == 4) ? apb_sel :1'b0  ; 

wire[10:0] pzq_apb_addr2              = apb_addr[10:0]                          ; 
wire       pzq_apb_clk2               = apb_clk                                 ; 
wire       pzq_apb_enable2            = apb_enable                              ; 
wire       pzq_apb_error2                                                       ; 
wire[31:0] pzq_apb_rdata2                                                       ; 
wire       pzq_apb_rdy2                                                         ; 
wire       pzq_apb_rst_n2             = apb_rst_n                               ; 
wire       pzq_apb_sel2               = (apb_addr[15:11] == 1) ? apb_sel :1'b0  ; 
wire[31:0] pzq_apb_wdata2             = apb_wdata                               ; 
wire       pzq_apb_wr_rdn2            = apb_wr_rdn                              ; 
wire       pzq_apb_sync_path_sel2     = apb_sync_path_sel                       ; 


generate
if(BYTE_LANE_0 != 0) begin: ddr_phy_4lanes_0
PH1_PHY_DDR_BANK #
(
     .ATO                             (  5                                ),
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE0               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE0               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE0               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE0               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN0                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN0                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN0                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN0                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS0           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS0           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS0           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS0           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL0                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL0                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL0                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL0                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE0                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE0                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE0                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE0                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes ( // ddr_bank_33
//outputs
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error0                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy0                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata0                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[0]        ),
     .zqcal_debug_data                (  zqcal_debug_data0[13:0]          ),
     .zqcal_done                      (  zqcal_done      [0]              ),
     .zqcal_code_o                    (  zqcal_code_o    [55:0]           ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [31:24]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [3]              ),
     .D_phy_rdata                     (  remap_phy_rdata [4*64-1:3*64]    ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status0[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[31:24]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[31:24]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[31:24]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[15:8]         ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [31:24]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[3]       ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error0               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready0               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata0               ),
     .D_debug_data                    (  dqsgr_debug_data1[63:48]         ),
     .D_delay_dto                     (  delay_dto0      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[3]          ),
     .D_offcal_done                   (  offcal_done     [3]              ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [3]              ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [7:6]            ),
     .D_delay_cal_value               (  delay_cal_value0[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out0[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [7:0]            ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [0]              ),
     .A_phy_rdata                     (  remap_phy_rdata [1*64-1:0]       ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status0[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[7:0]            ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[7:0]           ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[7:0]           ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[7:0]          ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [7:0]            ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[0]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error0               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready0               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata0               ),
     .A_debug_data                    (  dqsgr_debug_data1[15:0]          ),
     .A_delay_dto                     (  delay_dto0      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[0]          ),
     .A_offcal_done                   (  offcal_done     [0]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [0]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [1:0]            ),
     .A_delay_cal_value               (  delay_cal_value0[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out0[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [15:8]           ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [1]              ),
     .B_phy_rdata                     (  remap_phy_rdata [2*64-1:1*64]    ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status0[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[15:8]           ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[15:8]          ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[15:8]          ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [15:8]           ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[1]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error0               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready0               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata0               ),
     .B_debug_data                    (  dqsgr_debug_data0[31:16]         ),
     .B_delay_dto                     (  delay_dto0      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[1]          ),
     .B_offcal_done                   (  offcal_done     [1]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [1]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [3:2]            ),
     .B_delay_cal_value               (  delay_cal_value0[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out0[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [23:16]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [2]              ),
     .C_phy_rdata                     (  remap_phy_rdata [3*64-1:2*64]    ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p0[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status0[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[23:16]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[23:16]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[23:16]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [23:16]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[2]       ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error0               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready0               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata0               ),
     .C_debug_data                    (  dqsgr_debug_data0[47:32]         ),
     .C_delay_dto                     (  delay_dto0      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[2]          ),
     .C_offcal_done                   (  offcal_done     [2]              ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [2]              ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [5:4]            ),
     .C_delay_cal_value               (  delay_cal_value0[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out0[20:14]         ),

   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [0]              ),
     .zqcal_start                     (  zqcal_start     [0]              ),
     .zqcal_code                      (  zqcal_code      [55:0]           ),
     .pzq_vref_value_sel              (  vref_value_sel  [3:0]            ),
     .vref_ctrl_value                 (  vref_ctrl_value [55:0]           ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn0                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata0                   ),
     .pzq_apb_sel                     (  pzq_apb_sel0                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n0                   ),
     .pzq_apb_enable                  (  pzq_apb_enable0                  ),
     .pzq_apb_clk                     (  pzq_apb_clk0                     ),
     .pzq_apb_addr                    (  pzq_apb_addr0                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[0]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [0]              ),
     .pzq_atpg_mode                   (  atpg_mode0      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel0           ),
     .D_wrlvl_mode                    (  wrlvl_en        [3]              ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[3]       ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [3]              ),
     .D_delay_sel                     (  delay_sel0      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn0       [3]              ),
     .D_delay_data                    (  delay_data0     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr0    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn0              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata0               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n0               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable0              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk0                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr0                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel0                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[7:6]         ),
     .D_loopback_mode                 (  loopback_mode   [3]              ),
     .D_loopback_clk_sel              (  loopback_clk_sel[7:6]            ),
     .D_wrlvl_qin                     (  wrlvl_qin       [31:24]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [3]              ),
     .D_delay_testmode_en             (  delay_testmode_en0[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en0   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div0  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode0      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel0       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[3]        ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [3]              ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[3]        ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[3]      ),
     .D_delay_ranksel                 (  delay_ranksel0  [3]              ),
     .D_delay_gate                    (  delay_gate0     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [3]              ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank0 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[31:24]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [31:24]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [31:24]          ),
     .D_phy_loopback_en               (  loopback_en     [31:24]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[31:24]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[31:24]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [31:24]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[15:8]        ),
     .D_phy_wdata                     (  remap_phy_wdata [4*64-1:3*64]    ),
     .D_delay_cal_mode                (  delay_cal_mode0 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in0[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en0[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[3]        ),
     .D_phy_rstn_low                  (  phy_rstn_low    [3]              ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[3]        ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[3]      ),
     .D_age_toggle_en                 (  age_toggle_en   [0]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [0]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[0]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [0]              ),
     .A_delay_sel                     (  delay_sel0      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn0       [0]              ),
     .A_delay_data                    (  delay_data0     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr0    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn0              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata0               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n0               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable0              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk0                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr0                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel0                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[1:0]         ),
     .A_loopback_mode                 (  loopback_mode   [0]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[1:0]            ),
     .A_wrlvl_qin                     (  wrlvl_qin       [7:0]            ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [0]              ),
     .A_delay_testmode_en             (  delay_testmode_en0[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en0   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div0  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode0      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel0       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[0]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [0]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[0]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[0]      ),
     .A_delay_ranksel                 (  delay_ranksel0  [0]              ),
     .A_delay_gate                    (  delay_gate0     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [0]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank0 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[7:0]            ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [7:0]            ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [7:0]            ),
     .A_phy_loopback_en               (  loopback_en     [7:0]            ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[7:0]           ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[7:0]           ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [7:0]            ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[7:0]         ),
     .A_phy_wdata                     (  remap_phy_wdata [1*64-1:0]       ),
     .A_delay_cal_mode                (  delay_cal_mode0 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in0[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en0[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[0]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [0]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[0]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[0]      ),
     .A_age_toggle_en                 (  age_toggle_en   [0]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [1]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[1]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [1]              ),
     .B_delay_sel                     (  delay_sel0      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn0       [1]              ),
     .B_delay_data                    (  delay_data0     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr0    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn0              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata0               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n0               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable0              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk0                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr0                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel0                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[3:2]         ),
     .B_loopback_mode                 (  loopback_mode   [1]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[3:2]            ),
     .B_wrlvl_qin                     (  wrlvl_qin       [15:8]           ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [1]              ),
     .B_delay_testmode_en             (  delay_testmode_en0[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en0   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div0  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode0      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel0       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[1]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [1]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[1]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[1]      ),
     .B_delay_ranksel                 (  delay_ranksel0  [1]              ),
     .B_delay_gate                    (  delay_gate0     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [1]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank0 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[15:8]           ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [15:8]           ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [15:8]           ),
     .B_phy_loopback_en               (  loopback_en     [15:8]           ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[15:8]          ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[15:8]          ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [15:8]           ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [2*64-1:1*64]    ),
     .B_delay_cal_mode                (  delay_cal_mode0 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in0[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en0[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[1]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [1]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[1]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[1]      ),
     .B_age_toggle_en                 (  age_toggle_en   [0]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [2]              ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[2]       ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt0   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt0  [2]              ),
     .C_delay_sel                     (  delay_sel0      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn0       [2]              ),
     .C_delay_data                    (  delay_data0     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr0    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn0              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata0               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n0               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable0              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk0                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr0                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel0                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[5:4]         ),
     .C_loopback_mode                 (  loopback_mode   [2]              ),
     .C_loopback_clk_sel              (  loopback_clk_sel[5:4]            ),
     .C_wrlvl_qin                     (  wrlvl_qin       [23:16]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [2]              ),
     .C_delay_testmode_en             (  delay_testmode_en0[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel0[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel0[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en0   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div0  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode0      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel0       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[2]        ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [2]              ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[2]        ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[2]      ),
     .C_delay_ranksel                 (  delay_ranksel0  [2]              ),
     .C_delay_gate                    (  delay_gate0     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [2]              ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank0 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te0  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr0 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[23:16]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [23:16]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate0[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [23:16]          ),
     .C_phy_loopback_en               (  loopback_en     [23:16]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[23:16]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[23:16]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [23:16]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [3*64-1:2*64]    ),
     .C_delay_cal_mode                (  delay_cal_mode0 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in0[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en0[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[2]        ),
     .C_phy_rstn_low                  (  phy_rstn_low    [2]              ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[2]        ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[2]      ),
     .C_age_toggle_en                 (  age_toggle_en   [0]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [0]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [0]              ),
     .pzq_user_clk                    (  pzq_user_clk    [0]              ),
     .A_ioclk                         (  A_ioclk_0                        ),
     .B_ioclk                         (  B_ioclk_0                        ),
     .C_ioclk                         (  C_ioclk_0                        ),
     .D_ioclk                         (  D_ioclk_0                        ),
     .A_user_clk                      (  hctrl_clk0      [0]              ),
     .B_user_clk                      (  hctrl_clk0      [1]              ),
     .C_user_clk                      (  hctrl_clk0      [2]              ),
     .D_user_clk                      (  hctrl_clk0      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [7:0]            ),
     .clb2phy_vref2                   (  clb2phy_vref1   [7:0]            ),
     .clb2phy_vref3                   (  clb2phy_vref2   [7:0]            ),
     .clb2phy_vref4                   (  clb2phy_vref3   [7:0]            ),

     .A_ctl_phy_clk                   (  ctl_phy_clk     [0]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [0]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [0]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [0]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [0]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [0]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [0]              ),
     .A_rdqs                          (  rdqs            [0]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [0]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[0]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[0]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[0]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[0]              ),
     .A_ts_dq                         (  ts_dq           [0]              ),
     .A_ts_dqs                        (  ts_dqs          [0]              ),
     .A_ts_dqsn                       (  ts_dqsn         [0]              ),
     .A_doq                           (  doq             [79:0]           ),
     .A_dosp                          (  dosp            [7:0]            ),
     .A_dosn                          (  dosn            [7:0]            ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [0]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [0]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [9:0]            ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [5:0]            ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [5:0]            ),
     .A_in_bdl_dly                    (  in_bdl_dly      [59:0]           ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[0]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[0]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [9:0]            ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[5:0]            ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[5:0]            ),
     .A_out_bdl_dly                   (  out_bdl_dly     [59:0]           ),
     .A_diq                           (  diq             [0*13*8 +: 13*8] ),
     .A_pdr                           (  pdr             [0]              ),
     .A_pdr_dqs                       (  pdr_dqs         [0]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [0]              ),
     .A_doq_se                        (  doq_se          [7:0]            ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [0]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [5:0]            ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [0]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [5:0]            ),
     .A_rdqs_in                       (  rdqs_in         [0]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [0]              ),
//-----------------------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [1]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [1]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [1]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [1]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [1]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [1]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [1]              ),
     .B_rdqs                          (  rdqs            [1]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [1]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[1]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[1]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[1]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[1]              ),
     .B_ts_dq                         (  ts_dq           [1]              ),
     .B_ts_dqs                        (  ts_dqs          [1]              ),
     .B_ts_dqsn                       (  ts_dqsn         [1]              ),
     .B_doq                           (  doq             [159:80]         ),
     .B_dosp                          (  dosp            [15:8]           ),
     .B_dosn                          (  dosn            [15:8]           ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [1]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [1]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [19:10]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [11:6]           ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [11:6]           ),
     .B_in_bdl_dly                    (  in_bdl_dly      [119:60]         ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[1]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[1]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [19:10]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[11:6]           ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[11:6]           ),
     .B_out_bdl_dly                   (  out_bdl_dly     [119:60]         ),
     .B_diq                           (  diq             [1*13*8 +: 12*8] ),
     .B_pdr                           (  pdr             [1]              ),
     .B_pdr_dqs                       (  pdr_dqs         [1]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [1]              ),
     .B_rdqs_in                       (  rdqs_in         [1]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [1]              ),
 //------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [2]              ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [2]              ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [2]              ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [2]              ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [2]              ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [2]              ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [2]              ),
     .C_rdqs                          (  rdqs            [2]              ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [2]              ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[2]              ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[2]              ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[2]              ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[2]              ),
     .C_ts_dq                         (  ts_dq           [2]              ),
     .C_ts_dqs                        (  ts_dqs          [2]              ),
     .C_ts_dqsn                       (  ts_dqsn         [2]              ),
     .C_doq                           (  doq             [239:160]        ),
     .C_dosp                          (  dosp            [23:16]          ),
     .C_dosn                          (  dosn            [23:16]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [2]              ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [2]              ),
     .C_in_bdl_byp                    (  in_bdl_byp      [29:20]          ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [17:12]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [17:12]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [179:120]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[2]              ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[2]              ),
     .C_out_bdl_byp                   (  out_bdl_byp     [29:20]          ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[17:12]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[17:12]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [179:120]        ),
     .C_diq                           (  diq             [2*13*8 +: 12*8] ),
     .C_pdr                           (  pdr             [2]              ),
     .C_pdr_dqs                       (  pdr_dqs         [2]              ),
     .C_pdr_dqsn                      (  pdr_dqsn        [2]              ),
     .C_rdqs_in                       (  rdqs_in         [2]              ),
     .C_rdqs_n_in                     (  rdqs_n_in       [2]              ),
//----------------------------------------------------------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [3]              ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [3]              ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [3]              ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [3]              ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [3]              ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [3]              ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [3]              ),
     .D_rdqs                          (  rdqs            [3]              ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [3]              ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[3]              ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[3]              ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[3]              ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[3]              ),
     .D_ts_dq                         (  ts_dq           [3]              ),
     .D_ts_dqs                        (  ts_dqs          [3]              ),
     .D_ts_dqsn                       (  ts_dqsn         [3]              ),
     .D_doq                           (  doq             [319:240]        ),
     .D_dosp                          (  dosp            [31:24]          ),
     .D_dosn                          (  dosn            [31:24]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [3]              ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [3]              ),
     .D_in_bdl_byp                    (  in_bdl_byp      [39:30]          ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [23:18]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [23:18]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [239:180]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[3]              ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[3]              ),
     .D_out_bdl_byp                   (  out_bdl_byp     [39:30]          ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[23:18]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[23:18]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [239:180]        ),
     .D_diq                           (  diq             [3*13*8 +: 13*8] ),
     .D_pdr                           (  pdr             [3]              ),
     .D_pdr_dqs                       (  pdr_dqs         [3]              ),
     .D_pdr_dqsn                      (  pdr_dqsn        [3]              ),
     .D_doq_se                        (  doq_se          [15:8]           ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [1]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [11:6]           ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [1]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [11:6]           ),
     .D_rdqs_in                       (  rdqs_in         [3]              ),
     .D_rdqs_n_in                     (  rdqs_n_in       [3]              ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [19:0]           ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [1:0]            ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [1:0]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [39:20]          ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [3:2]            ),
     .C_dq_pdr_md                     (  dq_pdr_md       [59:40]          ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [5:4]            ),
     .D_dq_pdr_md                     (  dq_pdr_md       [79:60]          ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [7:6]            ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [3:2]            ),
     .A_dq_ts_md                      (  dq_ts_md        [19:0]           ),
     .A_dqs_ts_md                     (  dqs_ts_md       [1:0]            ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [1:0]            ),
     .B_dq_ts_md                      (  dq_ts_md        [39:20]          ),
     .B_dqs_ts_md                     (  dqs_ts_md       [3:2]            ),
     .C_dq_ts_md                      (  dq_ts_md        [59:40]          ),
     .C_dqs_ts_md                     (  dqs_ts_md       [5:4]            ),
     .D_dq_ts_md                      (  dq_ts_md        [79:60]          ),
     .D_dqs_ts_md                     (  dqs_ts_md       [7:6]            ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [3:2]            ),
     .A_te_dq                         (  te              [0]              ),
     .A_te_dqs                        (  te_dqs          [0]              ),
     .A_te_dqsn                       (  te_dqsn         [0]              ),
     .B_te_dq                         (  te              [1]              ),
     .B_te_dqs                        (  te_dqs          [1]              ),
     .B_te_dqsn                       (  te_dqsn         [1]              ),
     .C_te_dq                         (  te              [2]              ),
     .C_te_dqs                        (  te_dqs          [2]              ),
     .C_te_dqsn                       (  te_dqsn         [2]              ),
     .D_te_dq                         (  te              [3]              ),
     .D_te_dqs                        (  te_dqs          [3]              ),
     .D_te_dqsn                       (  te_dqsn         [3]              ),
     .A_dq_te_md                      (  dq_te_md        [19:0]           ),
     .A_dqs_te_md                     (  dqs_te_md       [1:0]            ),
     .A_dq_se_te_md                   (  dq_se_te_md     [1:0]            ),
     .B_dq_te_md                      (  dq_te_md        [39:20]          ),
     .B_dqs_te_md                     (  dqs_te_md       [3:2]            ),
     .C_dq_te_md                      (  dq_te_md        [59:40]          ),
     .C_dqs_te_md                     (  dqs_te_md       [5:4]            ),
     .D_dq_te_md                      (  dq_te_md        [79:60]          ),
     .D_dqs_te_md                     (  dqs_te_md       [7:6]            ),
     .D_dq_se_te_md                   (  dq_se_te_md     [3:2]            ),

     .A_lclk                          (  lclk_0                           ),
     .B_lclk                          (  lclk_0                           ),
     .C_lclk                          (  lclk_0                           ),
     .D_lclk                          (  lclk_0                           )
);
end

if(BYTE_LANE_1 != 0) begin: ddr_phy_4lanes_1
PH1_PHY_DDR_BANK #
(
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE1               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE1               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE1               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE1               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN1                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN1                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN1                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN1                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS1           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS1           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS1           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS1           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL1                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL1                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL1                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL1                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE1                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE1                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE1                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE1                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes (  // ddr_bank_32
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error1                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy1                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata1                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[1]        ),
     .zqcal_debug_data                (  zqcal_debug_data1[13:0]          ),
     .zqcal_done                      (  zqcal_done      [1]              ),
     .zqcal_code_o                    (  zqcal_code_o    [111:56]         ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [63:56]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [7]              ),
     .D_phy_rdata                     (  remap_phy_rdata [8*64-1:7*64]    ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status1[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[63:56]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[63:56]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[63:56]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[31:24]        ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [63:56]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[7]       ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error1               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready1               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata1               ),
     .D_debug_data                    (  dqsgr_debug_data2[63:48]         ),
     .D_delay_dto                     (  delay_dto1      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[7]          ),
     .D_offcal_done                   (  offcal_done     [7]              ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [7]              ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [15:14]          ),
     .D_delay_cal_value               (  delay_cal_value1[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out1[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [39:32]          ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [4]              ),
     .A_phy_rdata                     (  remap_phy_rdata [5*64-1:4*64]    ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status1[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[39:32]          ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[39:32]         ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[39:32]         ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[23:16]        ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [39:32]          ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[4]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error1               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready1               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata1               ),
     .A_debug_data                    (  dqsgr_debug_data2[15:0]          ),
     .A_delay_dto                     (  delay_dto1      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[4]          ),
     .A_offcal_done                   (  offcal_done     [4]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [4]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [9:8]            ),
     .A_delay_cal_value               (  delay_cal_value1[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out1[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [47:40]          ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [5]              ),
     .B_phy_rdata                     (  remap_phy_rdata [6*64-1:5*64]    ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status1[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[47:40]          ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[47:40]         ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[47:40]         ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [47:40]          ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[5]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error1               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready1               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata1               ),
     .B_debug_data                    (  dqsgr_debug_data1[31:16]         ),
     .B_delay_dto                     (  delay_dto1      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[5]          ),
     .B_offcal_done                   (  offcal_done     [5]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [5]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [11:10]          ),
     .B_delay_cal_value               (  delay_cal_value1[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out1[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [55:48]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [6]              ),
     .C_phy_rdata                     (  remap_phy_rdata [7*64-1:6*64]    ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p1[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status1[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[55:48]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[55:48]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[55:48]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [55:48]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[6]       ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error1               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready1               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata1               ),
     .C_debug_data                    (  dqsgr_debug_data1[47:32]         ),
     .C_delay_dto                     (  delay_dto1      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[6]          ),
     .C_offcal_done                   (  offcal_done     [6]              ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [6]              ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [13:12]          ),
     .C_delay_cal_value               (  delay_cal_value1[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out1[20:14]         ),
   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [1]              ),
     .zqcal_start                     (  zqcal_start     [1]              ),
     .zqcal_code                      (  zqcal_code      [111:56]         ),
     .pzq_vref_value_sel              (  vref_value_sel  [7:4]            ),
     .vref_ctrl_value                 (  vref_ctrl_value [111:56]         ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn1                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata1                   ),
     .pzq_apb_sel                     (  pzq_apb_sel1                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n1                   ),
     .pzq_apb_enable                  (  pzq_apb_enable1                  ),
     .pzq_apb_clk                     (  pzq_apb_clk1                     ),
     .pzq_apb_addr                    (  pzq_apb_addr1                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[0]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [1]              ),
     .pzq_atpg_mode                   (  atpg_mode1      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel1           ),
     .D_wrlvl_mode                    (  wrlvl_en        [7]              ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[7]       ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [3]              ),
     .D_delay_sel                     (  delay_sel1      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn1       [3]              ),
     .D_delay_data                    (  delay_data1     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr1    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn1              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata1               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n1               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable1              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk1                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr1                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel1                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[15:14]       ),
     .D_loopback_mode                 (  loopback_mode   [7]              ),
     .D_loopback_clk_sel              (  loopback_clk_sel[15:14]          ),
     .D_wrlvl_qin                     (  wrlvl_qin       [63:56]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [7]              ),
     .D_delay_testmode_en             (  delay_testmode_en1[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en1   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div1  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode1      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel1       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[7]        ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [7]              ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[7]        ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[7]      ),
     .D_delay_ranksel                 (  delay_ranksel1  [3]              ),
     .D_delay_gate                    (  delay_gate1     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [7]              ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank1 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[63:56]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [63:56]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [63:56]          ),
     .D_phy_loopback_en               (  loopback_en     [63:56]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[63:56]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[63:56]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [63:56]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[31:24]       ),
     .D_phy_wdata                     (  remap_phy_wdata [8*64-1:7*64]    ),
     .D_delay_cal_mode                (  delay_cal_mode1 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in1[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en1[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[7]        ),
     .D_phy_rstn_low                  (  phy_rstn_low    [7]              ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[7]        ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[7]      ),
     .D_age_toggle_en                 (  age_toggle_en   [1]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [4]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[4]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [0]              ),
     .A_delay_sel                     (  delay_sel1      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn1       [0]              ),
     .A_delay_data                    (  delay_data1     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr1    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn1              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata1               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n1               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable1              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk1                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr1                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel1                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[9:8]         ),
     .A_loopback_mode                 (  loopback_mode   [4]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[9:8]            ),
     .A_wrlvl_qin                     (  wrlvl_qin       [39:32]          ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [4]              ),
     .A_delay_testmode_en             (  delay_testmode_en1[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en1   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div1  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode1      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel1       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[4]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [4]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[4]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[4]      ),
     .A_delay_ranksel                 (  delay_ranksel1  [0]              ),
     .A_delay_gate                    (  delay_gate1     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [4]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank1 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[39:32]          ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [39:32]          ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [39:32]          ),
     .A_phy_loopback_en               (  loopback_en     [39:32]          ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[39:32]         ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[39:32]         ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [39:32]          ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[23:16]       ),
     .A_phy_wdata                     (  remap_phy_wdata [5*64-1:4*64]    ),
     .A_delay_cal_mode                (  delay_cal_mode1 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in1[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en1[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[4]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [4]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[4]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[4]      ),
     .A_age_toggle_en                 (  age_toggle_en   [1]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [5]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[5]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [1]              ),
     .B_delay_sel                     (  delay_sel1      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn1       [1]              ),
     .B_delay_data                    (  delay_data1     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr1    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn1              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata1               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n1               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable1              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk1                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr1                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel1                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[11:10]       ),
     .B_loopback_mode                 (  loopback_mode   [5]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[11:10]          ),
     .B_wrlvl_qin                     (  wrlvl_qin       [47:40]          ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [5]              ),
     .B_delay_testmode_en             (  delay_testmode_en1[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en1   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div1  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode1      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel1       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[5]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [5]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[5]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[5]      ),
     .B_delay_ranksel                 (  delay_ranksel1  [2]              ),
     .B_delay_gate                    (  delay_gate1     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [5]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank1 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[47:40]          ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [47:40]          ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [47:40]          ),
     .B_phy_loopback_en               (  loopback_en     [47:40]          ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[47:40]         ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[47:40]         ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [47:40]          ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [6*64-1:5*64]    ),
     .B_delay_cal_mode                (  delay_cal_mode1 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in1[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en1[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[5]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [5]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[5]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[5]      ),
     .B_age_toggle_en                 (  age_toggle_en   [1]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [6]              ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[6]       ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt1   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt1  [2]              ),
     .C_delay_sel                     (  delay_sel1      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn1       [2]              ),
     .C_delay_data                    (  delay_data1     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr1    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn1              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata1               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n1               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable1              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk1                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr1                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel1                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[13:12]       ),
     .C_loopback_mode                 (  loopback_mode   [6]              ),
     .C_loopback_clk_sel              (  loopback_clk_sel[13:12]          ),
     .C_wrlvl_qin                     (  wrlvl_qin       [55:48]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [6]              ),
     .C_delay_testmode_en             (  delay_testmode_en1[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel1[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel1[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en1   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div1  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode1      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel1       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[6]        ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [6]              ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[6]        ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[6]      ),
     .C_delay_ranksel                 (  delay_ranksel1  [2]              ),
     .C_delay_gate                    (  delay_gate1     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [6]              ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank1 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te1  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr1 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[55:48]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [55:48]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate1[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [55:48]          ),
     .C_phy_loopback_en               (  loopback_en     [55:48]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[55:48]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[55:48]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [55:48]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [7*64-1:6*64]    ),
     .C_delay_cal_mode                (  delay_cal_mode1 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in1[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en1[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[6]        ),
     .C_phy_rstn_low                  (  phy_rstn_low    [6]              ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[6]        ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[6]      ),
     .C_age_toggle_en                 (  age_toggle_en   [1]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [1]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [1]              ),
     .pzq_user_clk                    (  pzq_user_clk    [1]              ),
     .A_ioclk                         (  A_ioclk_1                        ),
     .B_ioclk                         (  B_ioclk_1                        ),
     .C_ioclk                         (  C_ioclk_1                        ),
     .D_ioclk                         (  D_ioclk_1                        ),
     .A_user_clk                      (  hctrl_clk1      [0]              ),
     .B_user_clk                      (  hctrl_clk1      [1]              ),
     .C_user_clk                      (  hctrl_clk1      [2]              ),
     .D_user_clk                      (  hctrl_clk1      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [15:8]           ),
     .clb2phy_vref2                   (  clb2phy_vref1   [15:8]           ),
     .clb2phy_vref3                   (  clb2phy_vref2   [15:8]           ),
     .clb2phy_vref4                   (  clb2phy_vref3   [15:8]           ),
     .A_ctl_phy_clk                   (  ctl_phy_clk     [4]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [4]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [4]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [4]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [4]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [4]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [4]              ),
     .A_rdqs                          (  rdqs            [4]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [4]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[4]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[4]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[4]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[4]              ),
     .A_ts_dq                         (  ts_dq           [4]              ),
     .A_ts_dqs                        (  ts_dqs          [4]              ),
     .A_ts_dqsn                       (  ts_dqsn         [4]              ),
     .A_doq                           (  doq             [399:320]        ),
     .A_dosp                          (  dosp            [39:32]          ),
     .A_dosn                          (  dosn            [39:32]          ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [4]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [4]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [49:40]          ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [29:24]          ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [29:24]          ),
     .A_in_bdl_dly                    (  in_bdl_dly      [299:240]        ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[4]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[4]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [49:40]          ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[29:24]          ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[29:24]          ),
     .A_out_bdl_dly                   (  out_bdl_dly     [299:240]        ),
     .A_diq                           (  diq             [4*13*8 +: 13*8] ),
     .A_pdr                           (  pdr             [4]              ),
     .A_pdr_dqs                       (  pdr_dqs         [4]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [4]              ),
     .A_doq_se                        (  doq_se          [23:16]          ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [2]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [17:12]          ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [2]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [17:12]          ),
     .A_rdqs_in                       (  rdqs_in         [4]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [4]              ),
   //--------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [5]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [5]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [5]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [5]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [5]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [5]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [5]              ),
     .B_rdqs                          (  rdqs            [5]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [5]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[5]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[5]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[5]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[5]              ),
     .B_ts_dq                         (  ts_dq           [5]              ),
     .B_ts_dqs                        (  ts_dqs          [5]              ),
     .B_ts_dqsn                       (  ts_dqsn         [5]              ),
     .B_doq                           (  doq             [479:400]        ),
     .B_dosp                          (  dosp            [47:40]          ),
     .B_dosn                          (  dosn            [47:40]          ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [5]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [5]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [59:50]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [35:30]          ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [35:30]          ),
     .B_in_bdl_dly                    (  in_bdl_dly      [359:300]        ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[5]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[5]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [59:50]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[35:30]          ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[35:30]          ),
     .B_out_bdl_dly                   (  out_bdl_dly     [359:300]        ),
     .B_diq                           (  diq             [5*13*8 +: 12*8] ),
     .B_pdr                           (  pdr             [5]              ),
     .B_pdr_dqs                       (  pdr_dqs         [5]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [5]              ),
     .B_rdqs_in                       (  rdqs_in         [5]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [5]              ),
   //---------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [6]              ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [6]              ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [6]              ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [6]              ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [6]              ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [6]              ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [6]              ),
     .C_rdqs                          (  rdqs            [6]              ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [6]              ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[6]              ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[6]              ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[6]              ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[6]              ),
     .C_ts_dq                         (  ts_dq           [6]              ),
     .C_ts_dqs                        (  ts_dqs          [6]              ),
     .C_ts_dqsn                       (  ts_dqsn         [6]              ),
     .C_doq                           (  doq             [559:480]        ),
     .C_dosp                          (  dosp            [55:48]          ),
     .C_dosn                          (  dosn            [55:48]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [6]              ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [6]              ),
     .C_in_bdl_byp                    (  in_bdl_byp      [69:60]          ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [41:36]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [41:36]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [419:360]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[6]              ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[6]              ),
     .C_out_bdl_byp                   (  out_bdl_byp     [69:60]          ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[41:36]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[41:36]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [419:360]        ),
     .C_diq                           (  diq             [6*13*8 +: 12*8] ),
     .C_pdr                           (  pdr             [6]              ),
     .C_pdr_dqs                       (  pdr_dqs         [6]              ),
     .C_pdr_dqsn                      (  pdr_dqsn        [6]              ),
     .C_rdqs_in                       (  rdqs_in         [6]              ),
     .C_rdqs_n_in                     (  rdqs_n_in       [6]              ),
   //--------------------------4lanes_1---------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [7]              ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [7]              ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [7]              ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [7]              ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [7]              ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [7]              ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [7]              ),
     .D_rdqs                          (  rdqs            [7]              ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [7]              ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[7]              ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[7]              ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[7]              ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[7]              ),
     .D_ts_dq                         (  ts_dq           [7]              ),
     .D_ts_dqs                        (  ts_dqs          [7]              ),
     .D_ts_dqsn                       (  ts_dqsn         [7]              ),
     .D_doq                           (  doq             [639:560]        ),
     .D_dosp                          (  dosp            [63:56]          ),
     .D_dosn                          (  dosn            [63:56]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [7]              ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [7]              ),
     .D_in_bdl_byp                    (  in_bdl_byp      [79:70]          ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [47:42]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [47:42]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [479:420]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[7]              ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[7]              ),
     .D_out_bdl_byp                   (  out_bdl_byp     [79:70]          ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[47:42]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[47:42]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [479:420]        ),
     .D_diq                           (  diq             [7*13*8 +: 13*8] ),
     .D_pdr                           (  pdr             [7]              ),
     .D_pdr_dqs                       (  pdr_dqs         [7]              ),
     .D_pdr_dqsn                      (  pdr_dqsn        [7]              ),
     .D_doq_se                        (  doq_se          [31:24]          ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [3]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [23:18]          ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [3]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [23:18]          ),
     .D_rdqs_in                       (  rdqs_in         [7]              ),
     .D_rdqs_n_in                     (  rdqs_n_in       [7]              ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [99:80]          ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [9:8]            ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [5:4]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [119:100]        ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [11:10]          ),
     .C_dq_pdr_md                     (  dq_pdr_md       [139:120]        ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [13:12]          ),
     .D_dq_pdr_md                     (  dq_pdr_md       [159:140]        ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [15:14]          ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [7:6]            ),
     .A_dq_ts_md                      (  dq_ts_md        [99:80]          ),
     .A_dqs_ts_md                     (  dqs_ts_md       [9:8]            ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [5:4]            ),
     .B_dq_ts_md                      (  dq_ts_md        [119:100]        ),
     .B_dqs_ts_md                     (  dqs_ts_md       [11:10]          ),
     .C_dq_ts_md                      (  dq_ts_md        [139:120]        ),
     .C_dqs_ts_md                     (  dqs_ts_md       [13:12]          ),
     .D_dq_ts_md                      (  dq_ts_md        [159:140]        ),
     .D_dqs_ts_md                     (  dqs_ts_md       [15:14]          ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [7:6]            ),
     .A_te_dq                         (  te              [4]              ),
     .A_te_dqs                        (  te_dqs          [4]              ),
     .A_te_dqsn                       (  te_dqsn         [4]              ),
     .B_te_dq                         (  te              [5]              ),
     .B_te_dqs                        (  te_dqs          [5]              ),
     .B_te_dqsn                       (  te_dqsn         [5]              ),
     .C_te_dq                         (  te              [6]              ),
     .C_te_dqs                        (  te_dqs          [6]              ),
     .C_te_dqsn                       (  te_dqsn         [6]              ),
     .D_te_dq                         (  te              [7]              ),
     .D_te_dqs                        (  te_dqs          [7]              ),
     .D_te_dqsn                       (  te_dqsn         [7]              ),
     .A_dq_te_md                      (  dq_te_md        [99:80]          ),
     .A_dqs_te_md                     (  dqs_te_md       [9:8]            ),
     .A_dq_se_te_md                   (  dq_se_te_md     [5:4]            ),
     .B_dq_te_md                      (  dq_te_md        [119:100]        ),
     .B_dqs_te_md                     (  dqs_te_md       [11:10]          ),
     .C_dq_te_md                      (  dq_te_md        [139:120]        ),
     .C_dqs_te_md                     (  dqs_te_md       [13:12]          ),
     .D_dq_te_md                      (  dq_te_md        [159:140]        ),
     .D_dqs_te_md                     (  dqs_te_md       [15:14]          ),
     .D_dq_se_te_md                   (  dq_se_te_md     [7:6]            ),
     .A_lclk                          (  lclk_1                           ),
     .B_lclk                          (  lclk_1                           ),
     .C_lclk                          (  lclk_1                           ),
     .D_lclk                          (  lclk_1                           )
);
end

if(BYTE_LANE_2 != 0) begin: ddr_phy_4lanes_2
PH1_PHY_DDR_BANK #(
     .A_DDR_SIGNAL_TYPE               (  A_DDR_SIGNAL_TYPE2               ),
     .B_DDR_SIGNAL_TYPE               (  B_DDR_SIGNAL_TYPE2               ),
     .C_DDR_SIGNAL_TYPE               (  C_DDR_SIGNAL_TYPE2               ),
     .D_DDR_SIGNAL_TYPE               (  D_DDR_SIGNAL_TYPE2               ),
     .A_APPS                          (  "DDR_DRAM"                       ),
     .B_APPS                          (  "DDR_DRAM"                       ),
     .C_APPS                          (  "DDR_DRAM"                       ),
     .D_APPS                          (  "DDR_DRAM"                       ),
     .A_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .B_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .C_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .D_DATA_WIDTH                    (  DATA_WIDTH                       ),
     .A_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .B_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .C_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .D_CTL_CLK_SWI_SEL               (  CTL_CLK_SWI_SEL                  ),
     .A_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .B_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .C_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .D_DDR_CLK_SWI_SEL               (  DDR_CLK_SWI_SEL                  ),
     .A_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK0D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK1D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK2D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .B_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .C_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .D_IOCLK3D2S_EN                  (  IOCLK_D2S_EN                     ),
     .A_DQS_GATE_TYPE                 (  A_DQS_GATE_TYPE                  ),
     .B_DQS_GATE_TYPE                 (  B_DQS_GATE_TYPE                  ),
     .C_DQS_GATE_TYPE                 (  C_DQS_GATE_TYPE                  ),
     .D_DQS_GATE_TYPE                 (  D_DQS_GATE_TYPE                  ),
     .A_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .B_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .C_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .D_DLY_TEST_EN                   (  DLY_TEST_EN                      ),
     .A_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .B_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .C_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .D_DLY_CAL_MODE                  (  DLY_CAL_MODE                     ),
     .A_DQS_BYTE_EN                   (  A_DQS_BYTE_EN2                   ),
     .B_DQS_BYTE_EN                   (  B_DQS_BYTE_EN2                   ),
     .C_DQS_BYTE_EN                   (  C_DQS_BYTE_EN2                   ),
     .D_DQS_BYTE_EN                   (  D_DQS_BYTE_EN2                   ),
     .A_DDR_SIGNAL_TYPE_DQS           (  A_DDR_SIGNAL_TYPE_DQS2           ),
     .B_DDR_SIGNAL_TYPE_DQS           (  B_DDR_SIGNAL_TYPE_DQS2           ),
     .C_DDR_SIGNAL_TYPE_DQS           (  C_DDR_SIGNAL_TYPE_DQS2           ),
     .D_DDR_SIGNAL_TYPE_DQS           (  D_DDR_SIGNAL_TYPE_DQS2           ),
     .A_DCC_EN                        (  DCC_EN                           ),
     .B_DCC_EN                        (  DCC_EN                           ),
     .C_DCC_EN                        (  DCC_EN                           ),
     .D_DCC_EN                        (  DCC_EN                           ),
     .A_DCC_CLK_SEL                   (  A_DCC_CLK_SEL2                   ),
     .B_DCC_CLK_SEL                   (  B_DCC_CLK_SEL2                   ),
     .C_DCC_CLK_SEL                   (  C_DCC_CLK_SEL2                   ),
     .D_DCC_CLK_SEL                   (  D_DCC_CLK_SEL2                   ),
     .A_BYTE_TYPE                     (  A_BYTE_TYPE2                     ),
     .B_BYTE_TYPE                     (  B_BYTE_TYPE2                     ),
     .C_BYTE_TYPE                     (  C_BYTE_TYPE2                     ),
     .D_BYTE_TYPE                     (  D_BYTE_TYPE2                     ),
     .APPS_PZQ                        (  APPS_PZQ                         ),
     .ZQ_VALUE                        (  ZQ_VALUE                         ),
     .ODTINIT_VALUE                   (  ODTINIT_VALUE                    ),
     .VREF0_MODE                      (  VREF0_MODE                       ),
     .VREF1_RANK0_MODE                (  VREF1_RANK0_MODE                 ),
     .VREF1_RANK1_MODE                (  VREF1_RANK1_MODE                 ),
     .VREF2_RANK0_MODE                (  VREF2_RANK0_MODE                 ),
     .VREF2_RANK1_MODE                (  VREF2_RANK1_MODE                 ),
     .VREF3_RANK0_MODE                (  VREF3_RANK0_MODE                 ),
     .VREF3_RANK1_MODE                (  VREF3_RANK1_MODE                 ),
     .VREF4_RANK0_MODE                (  VREF4_RANK0_MODE                 ),
     .VREF4_RANK1_MODE                (  VREF4_RANK1_MODE                 ),
     .DCI_EN                          (  DCI_EN                           ),
     .AC_LOOPBACK_EN                  (  AC_LOOPBACK_EN                   ),
     .A_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .B_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .C_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .D_WL_GATE_DIS_EN                (  WL_GATE_DIS_EN                   ),
     .VREF1_RANK0_RANG                (  VREF1_RANK0_RANG                 ),
     .VREF1_RANK0_VAL                 (  VREF1_RANK0_VAL                  ),
     .VREF1_RANK1_RANG                (  VREF1_RANK1_RANG                 ),
     .VREF1_RANK1_VAL                 (  VREF1_RANK1_VAL                  ),
     .VREF2_RANK0_RANG                (  VREF2_RANK0_RANG                 ),
     .VREF2_RANK0_VAL                 (  VREF2_RANK0_VAL                  ),
     .VREF2_RANK1_RANG                (  VREF2_RANK1_RANG                 ),
     .VREF2_RANK1_VAL                 (  VREF2_RANK1_VAL                  ),
     .VREF3_RANK0_RANG                (  VREF3_RANK0_RANG                 ),
     .VREF3_RANK0_VAL                 (  VREF3_RANK0_VAL                  ),
     .VREF3_RANK1_RANG                (  VREF3_RANK1_RANG                 ),
     .VREF3_RANK1_VAL                 (  VREF3_RANK1_VAL                  ),
     .VREF4_RANK0_RANG                (  VREF4_RANK0_RANG                 ),
     .VREF4_RANK0_VAL                 (  VREF4_RANK0_VAL                  ),
     .VREF4_RANK1_RANG                (  VREF4_RANK1_RANG                 ),
     .VREF4_RANK1_VAL                 (  VREF4_RANK1_VAL                  )
) ph1_ddr_4lanes (  // ddr_bank_31
     .pzq_scan_out                    (                                   ),
     .pzq_apb_error                   (  pzq_apb_error2                   ),
     .pzq_apb_rdy                     (  pzq_apb_rdy2                     ),
     .pzq_apb_rdata                   (  pzq_apb_rdata2                   ),
     .zqcal_vt_update_en_out          (  zqcal_vt_update_en_out[2]        ),
     .zqcal_debug_data                (  zqcal_debug_data2[13:0]          ),
     .zqcal_done                      (  zqcal_done      [2]              ),
     .zqcal_code_o                    (  zqcal_code_o    [167:112]        ),
     .D_wrlvl_qout                    (  ),//wrlvl_qout  [95:88]          ),
     .D_dqsgr_scan_out                (                                   ),
     .D_phy_rdata_en                  (  phy_rd_en       [11]             ),
     .D_phy_rdata                     (  remap_phy_rdata [12*64-1:11*64]  ),
     .D_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[31:24]     ),
     .D_dqs_rd_gate_status            (  dqs_rd_gate_status2[7:6]         ),
     .D_phy_iogate_rdata              (  dqs_iogate_rdata[95:88]          ),
     .D_phy_rd_dqsp                   (  remap_phy_rd_dqsp[95:88]         ),
     .D_phy_rd_dqsn                   (  remap_phy_rd_dqsn[95:88]         ),
     .D_phy_rdata_se                  (  remap_phy_rdata_se[47:40]        ),
     .D_phy_rd_dm                     (  remap_phy_rd_dm [95:88]          ),
     .D_offcal_vt_update_en_out       (  offcal_vt_update_en_out[11]      ),
     .D_dqsgr_apb_error               (  D_dqsgr_apb_error2               ),
     .D_dqsgr_apb_ready               (  D_dqsgr_apb_ready2               ),
     .D_dqsgr_apb_rdata               (  D_dqsgr_apb_rdata2               ),
     .D_debug_data                    (  dqsgr_debug_data0[63:48]         ),
     .D_delay_dto                     (  delay_dto2      [3]              ),
     .D_dcc_vt_update_en_out          (  dcc_vt_update_en_out[11]         ),
     .D_offcal_done                   (  offcal_done     [11]             ),
     .D_dcc_cfg_done                  (  dcc_cfg_done    [11]             ),
     .D_phy_dqs_cnt                   (  dqs_cnt         [23:22]          ),
     .D_delay_cal_value               (  delay_cal_value2[27:21]          ),
     .D_delay_cal_en_out              (  delay_cal_en_out2[27:21]         ),
     .A_wrlvl_qout                    (  ),//wrlvl_qout  [71:64]          ),
     .A_dqsgr_scan_out                (                                   ),
     .A_phy_rdata_en                  (  phy_rd_en       [8]              ),
     .A_phy_rdata                     (  remap_phy_rdata [9*64-1:8*64]    ),
     .A_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[7:0]       ),
     .A_dqs_rd_gate_status            (  dqs_rd_gate_status2[1:0]         ),
     .A_phy_iogate_rdata              (  dqs_iogate_rdata[71:64]          ),
     .A_phy_rd_dqsp                   (  remap_phy_rd_dqsp[71:64]         ),
     .A_phy_rd_dqsn                   (  remap_phy_rd_dqsn[71:64]         ),
     .A_phy_rdata_se                  (  remap_phy_rdata_se[39:32]        ),
     .A_phy_rd_dm                     (  remap_phy_rd_dm [71:64]          ),
     .A_offcal_vt_update_en_out       (  offcal_vt_update_en_out[8]       ),
     .A_dqsgr_apb_error               (  A_dqsgr_apb_error2               ),
     .A_dqsgr_apb_ready               (  A_dqsgr_apb_ready2               ),
     .A_dqsgr_apb_rdata               (  A_dqsgr_apb_rdata2               ),
     .A_debug_data                    (  dqsgr_debug_data0[15:0]          ),
     .A_delay_dto                     (  delay_dto2      [0]              ),
     .A_dcc_vt_update_en_out          (  dcc_vt_update_en_out[8]          ),
     .A_offcal_done                   (  offcal_done     [8]              ),
     .A_dcc_cfg_done                  (  dcc_cfg_done    [8]              ),
     .A_phy_dqs_cnt                   (  dqs_cnt         [17:16]          ),
     .A_delay_cal_value               (  delay_cal_value2[6:0]            ),
     .A_delay_cal_en_out              (  delay_cal_en_out2[6:0]           ),
     .B_wrlvl_qout                    (  ),//wrlvl_qout  [79:72]          ),
     .B_dqsgr_scan_out                (                                   ),
     .B_phy_rdata_en                  (  phy_rd_en       [9]              ),
     .B_phy_rdata                     (  remap_phy_rdata [10*64-1:9*64]   ),
     .B_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[15:8]      ),
     .B_dqs_rd_gate_status            (  dqs_rd_gate_status2[3:2]         ),
     .B_phy_iogate_rdata              (  dqs_iogate_rdata[79:72]          ),
     .B_phy_rd_dqsp                   (  remap_phy_rd_dqsp[79:72]         ),
     .B_phy_rd_dqsn                   (  remap_phy_rd_dqsn[79:72]         ),
     .B_phy_rdata_se                  (                                   ),
     .B_phy_rd_dm                     (  remap_phy_rd_dm [79:72]          ),
     .B_offcal_vt_update_en_out       (  offcal_vt_update_en_out[9]       ),
     .B_dqsgr_apb_error               (  B_dqsgr_apb_error2               ),
     .B_dqsgr_apb_ready               (  B_dqsgr_apb_ready2               ),
     .B_dqsgr_apb_rdata               (  B_dqsgr_apb_rdata2               ),
     .B_debug_data                    (  dqsgr_debug_data2[31:16]         ),
     .B_delay_dto                     (  delay_dto2      [1]              ),
     .B_dcc_vt_update_en_out          (  dcc_vt_update_en_out[9]          ),
     .B_offcal_done                   (  offcal_done     [9]              ),
     .B_dcc_cfg_done                  (  dcc_cfg_done    [9]              ),
     .B_phy_dqs_cnt                   (  dqs_cnt         [19:18]          ),
     .B_delay_cal_value               (  delay_cal_value2[13:7]           ),
     .B_delay_cal_en_out              (  delay_cal_en_out2[13:7]          ),
     .C_wrlvl_qout                    (  ),//wrlvl_qout  [87:80]          ),
     .C_dqsgr_scan_out                (                                   ),
     .C_phy_rdata_en                  (  phy_rd_en       [10]             ),
     .C_phy_rdata                     (  remap_phy_rdata [11*64-1:10*64]  ),
     .C_dqs_rd_gate_status_p          (  dqs_rd_gate_status_p2[23:16]     ),
     .C_dqs_rd_gate_status            (  dqs_rd_gate_status2[5:4]         ),
     .C_phy_iogate_rdata              (  dqs_iogate_rdata[87:80]          ),
     .C_phy_rd_dqsp                   (  remap_phy_rd_dqsp[87:80]         ),
     .C_phy_rd_dqsn                   (  remap_phy_rd_dqsn[87:80]         ),
     .C_phy_rdata_se                  (                                   ),
     .C_phy_rd_dm                     (  remap_phy_rd_dm [87:80]          ),
     .C_offcal_vt_update_en_out       (  offcal_vt_update_en_out[10]      ),
     .C_dqsgr_apb_error               (  C_dqsgr_apb_error2               ),
     .C_dqsgr_apb_ready               (  C_dqsgr_apb_ready2               ),
     .C_dqsgr_apb_rdata               (  C_dqsgr_apb_rdata2               ),
     .C_debug_data                    (  dqsgr_debug_data2[47:32]         ),
     .C_delay_dto                     (  delay_dto2      [2]              ),
     .C_dcc_vt_update_en_out          (  dcc_vt_update_en_out[10]         ),
     .C_offcal_done                   (  offcal_done     [10]             ),
     .C_dcc_cfg_done                  (  dcc_cfg_done    [10]             ),
     .C_phy_dqs_cnt                   (  dqs_cnt         [21:20]          ),
     .C_delay_cal_value               (  delay_cal_value2[20:14]          ),
     .C_delay_cal_en_out              (  delay_cal_en_out2[20:14]         ),

   // Inputs
     .pzq_scancompress_mode           (  1'b0                             ),
     .pzq_scan_rst_n                  (  1'b1                             ),
     .pzq_scan_in                     (  2'd0                             ),
     .pzq_scan_enable                 (  1'b0                             ),
     .pzq_scan_clk                    (  1'b0                             ),
     .zqcal_update_en                 (  zqcal_update_en [2]              ),
     .zqcal_start                     (  zqcal_start     [2]              ),
     .zqcal_code                      (  zqcal_code      [167:112]        ),
     .pzq_vref_value_sel              (  vref_value_sel  [11:8]           ),
     .vref_ctrl_value                 (  vref_ctrl_value [167:112]        ),
     .pzq_apb_wr_rdn                  (  pzq_apb_wr_rdn2                  ),
     .pzq_apb_wdata                   (  pzq_apb_wdata2                   ),
     .pzq_apb_sel                     (  pzq_apb_sel2                     ),
     .pzq_apb_rst_n                   (  pzq_apb_rst_n2                   ),
     .pzq_apb_enable                  (  pzq_apb_enable2                  ),
     .pzq_apb_clk                     (  pzq_apb_clk2                     ),
     .pzq_apb_addr                    (  pzq_apb_addr2                    ),
     .zqcal_vt_update_en_in           (  zqcal_vt_update_en_in[2]         ),
     .zqcal_clrcfg                    (  zqcal_clrcfg    [2]              ),
     .pzq_atpg_mode                   (  atpg_mode2      [4]              ),
     .pzq_apb_sync_path_sel           (  pzq_apb_sync_path_sel2           ),
     .D_wrlvl_mode                    (  wrlvl_en        [11]             ),
     .D_dqsgr_scancompress_mode       (  1'b0                             ),
     .D_dqsgr_scan_rst_n              (  1'b1                             ),
     .D_dqsgr_scan_in                 (  3'd0                             ),
     .D_dqsgr_scan_enable             (  1'b0                             ),
     .D_dqsgr_scan_clk                (  1'b0                             ),
     .D_dqs_valid_sample_window       (  dqs_valid_sample_window[11]      ),
     .D_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [3]              ),
     .D_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [3]              ),
     .D_delay_sel                     (  delay_sel2      [3]              ),
     .D_dqs_rstn                      (  dqs_rstn2       [3]              ),
     .D_delay_data                    (  delay_data2     [35:27]          ),
     .D_delay_paddr                   (  delay_paddr2    [23:18]          ),
     .D_dqsgr_apb_wr_rdn              (  D_dqsgr_apb_wr_rdn2              ),
     .D_dqsgr_apb_wdata               (  D_dqsgr_apb_wdata2               ),
     .D_dqsgr_apb_rst_n               (  D_dqsgr_apb_rst_n2               ),
     .D_dqsgr_apb_enable              (  D_dqsgr_apb_enable2              ),
     .D_dqsgr_apb_clk                 (  D_dqsgr_apb_clk2                 ),
     .D_dqsgr_apb_addr                (  D_dqsgr_apb_addr2                ),
     .D_offcal_update_en              (  offcal_update_en                 ),
     .D_offcal_start                  (  offcal_start                     ),
     .D_offcal_psel                   (  D_offcal_psel2                   ),
     .D_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .D_loopback_clknum_sel           (  loopback_clknum_sel[23:22]       ),
     .D_loopback_mode                 (  loopback_mode   [11]             ),
     .D_loopback_clk_sel              (  loopback_clk_sel[23:22]          ),
     .D_wrlvl_qin                     (  wrlvl_qin       [95:88]          ),
     .D_dqs_pupd_en                   (  dqs_pupd_en     [11]             ),
     .D_delay_testmode_en             (  delay_testmode_en2[3]            ),
     .D_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[7:6]        ),
     .D_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[7:6]          ),
     .D_delay_osc_en                  (  delay_osc_en2   [3]              ),
     .D_delay_osc_div                 (  delay_osc_div2  [15:12]          ),
     .D_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .D_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .D_dcc_update_en_in              (  dcc_update_en_in                 ),
     .D_dcc_start                     (  dcc_start                        ),
     .D_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .D_dqsgr_atpg_mode               (  atpg_mode2      [3]              ),
     .D_dqsgr_apb_sync_path_sel       (  D_dqsgr_apb_sync_path_sel2       ),
     .D_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[11]       ),
     .D_phy_rstn_upp                  (  phy_rstn_upp    [11]             ),
     .D_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[11]       ),
     .D_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[11]     ),
     .D_delay_ranksel                 (  delay_ranksel2  [3]              ),
     .D_delay_gate                    (  delay_gate2     [3]              ),
     .D_dfi_io_pd                     (  dfi_io_pd       [11]             ),
     .D_ctl_rst_n                     (  ctl_rst_n_bank2 [3]              ),
     .D_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [31:24]          ),
     .D_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [31:24]          ),
     .D_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[95:88]          ),
     .D_phy_rd_dqs_en                 (  dqs_rd_gate_en  [95:88]          ),
     .D_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[3]             ),
     .D_phy_wdata_en                  (  phy_wr_en       [95:88]          ),
     .D_phy_loopback_en               (  loopback_en     [95:88]          ),
     .D_phy_wr_dqsp                   (  remap_phy_wr_dqsp[95:88]         ),
     .D_phy_wr_dqsn                   (  remap_phy_wr_dqsn[95:88]         ),
     .D_phy_wr_dm                     (  remap_phy_wr_dm [95:88]          ),
     .D_phy_wrdata_se                 (  remap_phy_wrdata_se[47:40]       ),
     .D_phy_wdata                     (  remap_phy_wdata [12*64-1:11*64]  ),
     .D_delay_cal_mode                (  delay_cal_mode2 [3]              ),
     .D_delay_cal_en_in               (  delay_cal_en_in2[27:21]          ),
     .D_delay_cal_clk_en              (  delay_cal_clk_en2[27:21]         ),
     .D_loopback_fifo_resp_low        (  loopback_fifo_resp_low[11]       ),
     .D_phy_rstn_low                  (  phy_rstn_low    [11]             ),
     .D_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[11]       ),
     .D_loopback_fifo_datain_low      (  loopback_fifo_datain_low[11]     ),
     .D_age_toggle_en                 (  age_toggle_en   [2]              ),
     .D_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .A_wrlvl_mode                    (  wrlvl_en        [8]              ),
     .A_dqsgr_scancompress_mode       (  1'b0                             ),
     .A_dqsgr_scan_rst_n              (  1'b1                             ),
     .A_dqsgr_scan_in                 (  3'd0                             ),
     .A_dqsgr_scan_enable             (  1'b0                             ),
     .A_dqsgr_scan_clk                (  1'b0                             ),
     .A_dqs_valid_sample_window       (  dqs_valid_sample_window[8]       ),
     .A_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [0]              ),
     .A_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [0]              ),
     .A_delay_sel                     (  delay_sel2      [0]              ),
     .A_dqs_rstn                      (  dqs_rstn2       [0]              ),
     .A_delay_data                    (  delay_data2     [8:0]            ),
     .A_delay_paddr                   (  delay_paddr2    [5:0]            ),
     .A_dqsgr_apb_wr_rdn              (  A_dqsgr_apb_wr_rdn2              ),
     .A_dqsgr_apb_wdata               (  A_dqsgr_apb_wdata2               ),
     .A_dqsgr_apb_rst_n               (  A_dqsgr_apb_rst_n2               ),
     .A_dqsgr_apb_enable              (  A_dqsgr_apb_enable2              ),
     .A_dqsgr_apb_clk                 (  A_dqsgr_apb_clk2                 ),
     .A_dqsgr_apb_addr                (  A_dqsgr_apb_addr2                ),
     .A_offcal_update_en              (  offcal_update_en                 ),
     .A_offcal_start                  (  offcal_start                     ),
     .A_offcal_psel                   (  A_offcal_psel2                   ),
     .A_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .A_loopback_clknum_sel           (  loopback_clknum_sel[17:16]       ),
     .A_loopback_mode                 (  loopback_mode   [8]              ),
     .A_loopback_clk_sel              (  loopback_clk_sel[17:16]          ),
     .A_wrlvl_qin                     (  wrlvl_qin       [71:64]          ),
     .A_dqs_pupd_en                   (  dqs_pupd_en     [8]              ),
     .A_delay_testmode_en             (  delay_testmode_en2[0]            ),
     .A_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[1:0]        ),
     .A_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[1:0]          ),
     .A_delay_osc_en                  (  delay_osc_en2   [0]              ),
     .A_delay_osc_div                 (  delay_osc_div2  [3:0]            ),
     .A_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .A_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .A_dcc_update_en_in              (  dcc_update_en_in                 ),
     .A_dcc_start                     (  dcc_start                        ),
     .A_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .A_dqsgr_atpg_mode               (  atpg_mode2      [0]              ),
     .A_dqsgr_apb_sync_path_sel       (  A_dqsgr_apb_sync_path_sel2       ),
     .A_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[8]        ),
     .A_phy_rstn_upp                  (  phy_rstn_upp    [8]              ),
     .A_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[8]        ),
     .A_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[8]      ),
     .A_delay_ranksel                 (  delay_ranksel2  [0]              ),
     .A_delay_gate                    (  delay_gate2     [0]              ),
     .A_dfi_io_pd                     (  dfi_io_pd       [8]              ),
     .A_ctl_rst_n                     (  ctl_rst_n_bank2 [0]              ),
     .A_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [7:0]            ),
     .A_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [7:0]            ),
     .A_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[71:64]          ),
     .A_phy_rd_dqs_en                 (  dqs_rd_gate_en  [71:64]          ),
     .A_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[0]             ),
     .A_phy_wdata_en                  (  phy_wr_en       [71:64]          ),
     .A_phy_loopback_en               (  loopback_en     [71:64]          ),
     .A_phy_wr_dqsp                   (  remap_phy_wr_dqsp[71:64]         ),
     .A_phy_wr_dqsn                   (  remap_phy_wr_dqsn[71:64]         ),
     .A_phy_wr_dm                     (  remap_phy_wr_dm [71:64]          ),
     .A_phy_wrdata_se                 (  remap_phy_wrdata_se[39:32]       ),
     .A_phy_wdata                     (  remap_phy_wdata [9*64-1:8*64]    ),
     .A_delay_cal_mode                (  delay_cal_mode2 [0]              ),
     .A_delay_cal_en_in               (  delay_cal_en_in2[6:0]            ),
     .A_delay_cal_clk_en              (  delay_cal_clk_en2[6:0]           ),
     .A_loopback_fifo_resp_low        (  loopback_fifo_resp_low[8]        ),
     .A_phy_rstn_low                  (  phy_rstn_low    [8]              ),
     .A_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[8]        ),
     .A_loopback_fifo_datain_low      (  loopback_fifo_datain_low[8]      ),
     .A_age_toggle_en                 (  age_toggle_en   [2]              ),
     .A_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .B_wrlvl_mode                    (  wrlvl_en        [9]              ),
     .B_dqsgr_scancompress_mode       (  1'b0                             ),
     .B_dqsgr_scan_rst_n              (  1'b1                             ),
     .B_dqsgr_scan_in                 (  3'd0                             ),
     .B_dqsgr_scan_enable             (  1'b0                             ),
     .B_dqsgr_scan_clk                (  1'b0                             ),
     .B_dqs_valid_sample_window       (  dqs_valid_sample_window[9]       ),
     .B_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [1]              ),
     .B_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [1]              ),
     .B_delay_sel                     (  delay_sel2      [1]              ),
     .B_dqs_rstn                      (  dqs_rstn2       [1]              ),
     .B_delay_data                    (  delay_data2     [17:9]           ),
     .B_delay_paddr                   (  delay_paddr2    [11:6]           ),
     .B_dqsgr_apb_wr_rdn              (  B_dqsgr_apb_wr_rdn2              ),
     .B_dqsgr_apb_wdata               (  B_dqsgr_apb_wdata2               ),
     .B_dqsgr_apb_rst_n               (  B_dqsgr_apb_rst_n2               ),
     .B_dqsgr_apb_enable              (  B_dqsgr_apb_enable2              ),
     .B_dqsgr_apb_clk                 (  B_dqsgr_apb_clk2                 ),
     .B_dqsgr_apb_addr                (  B_dqsgr_apb_addr2                ),
     .B_offcal_update_en              (  offcal_update_en                 ),
     .B_offcal_start                  (  offcal_start                     ),
     .B_offcal_psel                   (  B_offcal_psel2                   ),
     .B_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .B_loopback_clknum_sel           (  loopback_clknum_sel[19:18]       ),
     .B_loopback_mode                 (  loopback_mode   [9]              ),
     .B_loopback_clk_sel              (  loopback_clk_sel[19:18]          ),
     .B_wrlvl_qin                     (  wrlvl_qin       [79:72]          ),
     .B_dqs_pupd_en                   (  dqs_pupd_en     [9]              ),
     .B_delay_testmode_en             (  delay_testmode_en2[1]            ),
     .B_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[3:2]        ),
     .B_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[3:2]          ),
     .B_delay_osc_en                  (  delay_osc_en2   [1]              ),
     .B_delay_osc_div                 (  delay_osc_div2  [7:4]            ),
     .B_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .B_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .B_dcc_update_en_in              (  dcc_update_en_in                 ),
     .B_dcc_start                     (  dcc_start                        ),
     .B_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .B_dqsgr_atpg_mode               (  atpg_mode2      [1]              ),
     .B_dqsgr_apb_sync_path_sel       (  B_dqsgr_apb_sync_path_sel2       ),
     .B_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[9]        ),
     .B_phy_rstn_upp                  (  phy_rstn_upp    [9]              ),
     .B_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[9]        ),
     .B_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[9]      ),
     .B_delay_ranksel                 (  delay_ranksel2  [1]              ),
     .B_delay_gate                    (  delay_gate2     [1]              ),
     .B_dfi_io_pd                     (  dfi_io_pd       [9]              ),
     .B_ctl_rst_n                     (  ctl_rst_n_bank2 [1]              ),
     .B_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [15:8]           ),
     .B_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [15:8]           ),
     .B_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[79:72]          ),
     .B_phy_rd_dqs_en                 (  dqs_rd_gate_en  [79:72]          ),
     .B_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[1]             ),
     .B_phy_wdata_en                  (  phy_wr_en       [79:72]          ),
     .B_phy_loopback_en               (  loopback_en     [79:72]          ),
     .B_phy_wr_dqsp                   (  remap_phy_wr_dqsp[79:72]         ),
     .B_phy_wr_dqsn                   (  remap_phy_wr_dqsn[79:72]         ),
     .B_phy_wr_dm                     (  remap_phy_wr_dm [79:72]          ),
     .B_phy_wrdata_se                 (  8'd0                             ),
     .B_phy_wdata                     (  remap_phy_wdata [10*64-1:9*64]   ),
     .B_delay_cal_mode                (  delay_cal_mode2 [1]              ),
     .B_delay_cal_en_in               (  delay_cal_en_in2[13:7]           ),
     .B_delay_cal_clk_en              (  delay_cal_clk_en2[13:7]          ),
     .B_loopback_fifo_resp_low        (  loopback_fifo_resp_low[9]        ),
     .B_phy_rstn_low                  (  phy_rstn_low    [9]              ),
     .B_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[9]        ),
     .B_loopback_fifo_datain_low      (  loopback_fifo_datain_low[9]      ),
     .B_age_toggle_en                 (  age_toggle_en   [2]              ),
     .B_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .C_wrlvl_mode                    (  wrlvl_en        [10]             ),
     .C_dqsgr_scancompress_mode       (  1'b0                             ),
     .C_dqsgr_scan_rst_n              (  1'b1                             ),
     .C_dqsgr_scan_in                 (  3'd0                             ),
     .C_dqsgr_scan_enable             (  1'b0                             ),
     .C_dqsgr_scan_clk                (  1'b0                             ),
     .C_dqs_valid_sample_window       (  dqs_valid_sample_window[10]      ),
     .C_ctl_rdclk_gt                  (  ctl_rdclk_gt2   [2]              ),
     .C_ctrlclk_en_gt                 (  ctrlclk_en_gt2  [2]              ),
     .C_delay_sel                     (  delay_sel2      [2]              ),
     .C_dqs_rstn                      (  dqs_rstn2       [2]              ),
     .C_delay_data                    (  delay_data2     [26:18]          ),
     .C_delay_paddr                   (  delay_paddr2    [17:12]          ),
     .C_dqsgr_apb_wr_rdn              (  C_dqsgr_apb_wr_rdn2              ),
     .C_dqsgr_apb_wdata               (  C_dqsgr_apb_wdata2               ),
     .C_dqsgr_apb_rst_n               (  C_dqsgr_apb_rst_n2               ),
     .C_dqsgr_apb_enable              (  C_dqsgr_apb_enable2              ),
     .C_dqsgr_apb_clk                 (  C_dqsgr_apb_clk2                 ),
     .C_dqsgr_apb_addr                (  C_dqsgr_apb_addr2                ),
     .C_offcal_update_en              (  offcal_update_en                 ),
     .C_offcal_start                  (  offcal_start                     ),
     .C_offcal_psel                   (  C_offcal_psel2                   ),
     .C_offcal_clrcfg                 (  offcal_clrcfg                    ),
     .C_loopback_clknum_sel           (  loopback_clknum_sel[21:20]       ),
     .C_loopback_mode                 (  loopback_mode   [10]             ),
     .C_loopback_clk_sel              (  loopback_clk_sel[21:20]          ),
     .C_wrlvl_qin                     (  wrlvl_qin       [87:80]          ),
     .C_dqs_pupd_en                   (  dqs_pupd_en     [10]             ),
     .C_delay_testmode_en             (  delay_testmode_en2[2]            ),
     .C_delay_osc_wrlvl_sel           (  delay_osc_wrlvl_sel2[5:4]        ),
     .C_delay_osc_wdq_sel             (  delay_osc_wdq_sel2[5:4]          ),
     .C_delay_osc_en                  (  delay_osc_en2   [2]              ),
     .C_delay_osc_div                 (  delay_osc_div2  [11:8]           ),
     .C_offcal_vt_update_en_in        (  offcal_vt_update_en_in           ),
     .C_dcc_vt_update_en_in           (  dcc_vt_update_en_in              ),
     .C_dcc_update_en_in              (  dcc_update_en_in                 ),
     .C_dcc_start                     (  dcc_start                        ),
     .C_dcc_clrcfg                    (  dcc_clrcfg                       ),
     .C_dqsgr_atpg_mode               (  atpg_mode2      [2]              ),
     .C_dqsgr_apb_sync_path_sel       (  C_dqsgr_apb_sync_path_sel2       ),
     .C_loopback_fifo_resp_upp        (  loopback_fifo_resp_upp[10]       ),
     .C_phy_rstn_upp                  (  phy_rstn_upp    [10]             ),
     .C_loopback_fifo_rstn_upp        (  loopback_fifo_rstn_upp[10]       ),
     .C_loopback_fifo_datain_upp      (  loopback_fifo_datain_upp[10]     ),
     .C_delay_ranksel                 (  delay_ranksel2  [2]              ),
     .C_delay_gate                    (  delay_gate2     [2]              ),
     .C_dfi_io_pd                     (  dfi_io_pd       [10]             ),
     .C_ctl_rst_n                     (  ctl_rst_n_bank2 [2]              ),
     .C_phy_rd_dqs_te                 (  phy_rd_dqs_te2  [23:16]          ),
     .C_phy_rd_dqs_pdr                (  phy_rd_dqs_pdr2 [23:16]          ),
     .C_phy_rd_dqs_en_shadow          (  dqs_rd_en_shadow[87:80]          ),
     .C_phy_rd_dqs_en                 (  dqs_rd_gate_en  [87:80]          ),
     .C_ctl_ddr_clk_gate              (  phy_ddr_clk_gate2[2]             ),
     .C_phy_wdata_en                  (  phy_wr_en       [87:80]          ),
     .C_phy_loopback_en               (  loopback_en     [87:80]          ),
     .C_phy_wr_dqsp                   (  remap_phy_wr_dqsp[87:80]         ),
     .C_phy_wr_dqsn                   (  remap_phy_wr_dqsn[87:80]         ),
     .C_phy_wr_dm                     (  remap_phy_wr_dm [87:80]          ),
     .C_phy_wrdata_se                 (  8'd0                             ),
     .C_phy_wdata                     (  remap_phy_wdata [11*64-1:10*64]  ),
     .C_delay_cal_mode                (  delay_cal_mode2 [2]              ),
     .C_delay_cal_en_in               (  delay_cal_en_in2[20:14]          ),
     .C_delay_cal_clk_en              (  delay_cal_clk_en2[20:14]         ),
     .C_loopback_fifo_resp_low        (  loopback_fifo_resp_low[10]       ),
     .C_phy_rstn_low                  (  phy_rstn_low    [10]             ),
     .C_loopback_fifo_rstn_low        (  loopback_fifo_rstn_low[10]       ),
     .C_loopback_fifo_datain_low      (  loopback_fifo_datain_low[10]     ),
     .C_age_toggle_en                 (  age_toggle_en   [2]              ),
     .C_age_toggle_inv                (  age_toggle_inv  [2]              ),
     .pzq_ctl_rst_n                   (  pzq_ctl_rst_n   [2]              ),
     .pzq_user_clk                    (  pzq_user_clk    [2]              ),
     .A_ioclk                         (  A_ioclk_2                        ),
     .B_ioclk                         (  B_ioclk_2                        ),
     .C_ioclk                         (  C_ioclk_2                        ),
     .D_ioclk                         (  D_ioclk_2                        ),
     .A_user_clk                      (  hctrl_clk2      [0]              ),
     .B_user_clk                      (  hctrl_clk2      [1]              ),
     .C_user_clk                      (  hctrl_clk2      [2]              ),
     .D_user_clk                      (  hctrl_clk2      [3]              ),
     .clb2phy_vref1                   (  clb2phy_vref0   [23:16]          ),
     .clb2phy_vref2                   (  clb2phy_vref1   [23:16]          ),
     .clb2phy_vref3                   (  clb2phy_vref2   [23:16]          ),
     .clb2phy_vref4                   (  clb2phy_vref3   [23:16]          ),
   //-------------------------4lane_2-----------------------------------
     .A_ctl_phy_clk                   (  ctl_phy_clk     [8]              ),
     .A_ctl_clk_ac                    (  ctl_clk_ac      [8]              ),
     .A_ctl_clk_dqs                   (  ctl_clk_dqs     [8]              ),
     .A_ctl_clk_wdq                   (  ctl_clk_wdq     [8]              ),
     .A_ddr_clk_ac                    (  ddr_clk_ac      [8]              ),
     .A_ddr_clk_dqs                   (  ddr_clk_dqs     [8]              ),
     .A_ddr_clk_wdq                   (  ddr_clk_wdq     [8]              ),
     .A_rdqs                          (  rdqs            [8]              ),
     .A_rdqs_n_gated                  (  rdqs_n_gated    [8]              ),
     .A_wr_path_rstn_low              (  wr_path_rstn_low[8]              ),
     .A_wr_path_rstn_upp              (  wr_path_rstn_upp[8]              ),
     .A_rd_path_rstn_low              (  rd_path_rstn_low[8]              ),
     .A_rd_path_rstn_upp              (  rd_path_rstn_upp[8]              ),
     .A_ts_dq                         (  ts_dq           [8]              ),
     .A_ts_dqs                        (  ts_dqs          [8]              ),
     .A_ts_dqsn                       (  ts_dqsn         [8]              ),
     .A_doq                           (  doq             [719:640]        ),
     .A_dosp                          (  dosp            [71:64]          ),
     .A_dosn                          (  dosn            [71:64]          ),
     .A_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [8]              ),
     .A_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [8]              ),
     .A_in_bdl_byp                    (  in_bdl_byp      [89:80]          ),
     .A_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [53:48]          ),
     .A_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [53:48]          ),
     .A_in_bdl_dly                    (  in_bdl_dly      [539:480]        ),
     .A_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[8]              ),
     .A_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[8]              ),
     .A_out_bdl_byp                   (  out_bdl_byp     [89:80]          ),
     .A_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[53:48]          ),
     .A_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[53:48]          ),
     .A_out_bdl_dly                   (  out_bdl_dly     [539:480]        ),
     .A_diq                           (  diq             [8*13*8 +: 13*8] ),
     .A_pdr                           (  pdr             [8]              ),
     .A_pdr_dqs                       (  pdr_dqs         [8]              ),
     .A_pdr_dqsn                      (  pdr_dqsn        [8]              ),
     .A_doq_se                        (  doq_se          [39:32]          ),
     .A_in_se_bdl_byp                 (  in_se_bdl_byp   [4]              ),
     .A_in_se_bdl_dly                 (  in_se_bdl_dly   [29:24]          ),
     .A_out_se_bdl_byp                (  out_se_bdl_byp  [4]              ),
     .A_out_se_bdl_dly                (  out_se_bdl_dly  [29:24]          ),
     .A_rdqs_in                       (  rdqs_in         [8]              ),
     .A_rdqs_n_in                     (  rdqs_n_in       [8]              ),
   //----------------------------------------------------------
     .B_ctl_phy_clk                   (  ctl_phy_clk     [9]              ),
     .B_ctl_clk_ac                    (  ctl_clk_ac      [9]              ),
     .B_ctl_clk_dqs                   (  ctl_clk_dqs     [9]              ),
     .B_ctl_clk_wdq                   (  ctl_clk_wdq     [9]              ),
     .B_ddr_clk_ac                    (  ddr_clk_ac      [9]              ),
     .B_ddr_clk_dqs                   (  ddr_clk_dqs     [9]              ),
     .B_ddr_clk_wdq                   (  ddr_clk_wdq     [9]              ),
     .B_rdqs                          (  rdqs            [9]              ),
     .B_rdqs_n_gated                  (  rdqs_n_gated    [9]              ),
     .B_wr_path_rstn_low              (  wr_path_rstn_low[9]              ),
     .B_wr_path_rstn_upp              (  wr_path_rstn_upp[9]              ),
     .B_rd_path_rstn_low              (  rd_path_rstn_low[9]              ),
     .B_rd_path_rstn_upp              (  rd_path_rstn_upp[9]              ),
     .B_ts_dq                         (  ts_dq           [9]              ),
     .B_ts_dqs                        (  ts_dqs          [9]              ),
     .B_ts_dqsn                       (  ts_dqsn         [9]              ),
     .B_doq                           (  doq             [799:720]        ),
     .B_dosp                          (  dosp            [79:72]          ),
     .B_dosn                          (  dosn            [79:72]          ),
     .B_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [9]              ),
     .B_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [9]              ),
     .B_in_bdl_byp                    (  in_bdl_byp      [99:90]          ),
     .B_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [59:54]          ),
     .B_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [59:54]          ),
     .B_in_bdl_dly                    (  in_bdl_dly      [599:540]        ),
     .B_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[9]              ),
     .B_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[9]              ),
     .B_out_bdl_byp                   (  out_bdl_byp     [99:90]          ),
     .B_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[59:54]          ),
     .B_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[59:54]          ),
     .B_out_bdl_dly                   (  out_bdl_dly     [599:540]        ),
     .B_diq                           (  diq             [9*13*8 +: 12*8] ),
     .B_pdr                           (  pdr             [9]              ),
     .B_pdr_dqs                       (  pdr_dqs         [9]              ),
     .B_pdr_dqsn                      (  pdr_dqsn        [9]              ),
     .B_rdqs_in                       (  rdqs_in         [9]              ),
     .B_rdqs_n_in                     (  rdqs_n_in       [9]              ),
   //-------------------------------------------------------------
     .C_ctl_phy_clk                   (  ctl_phy_clk     [10]             ),
     .C_ctl_clk_ac                    (  ctl_clk_ac      [10]             ),
     .C_ctl_clk_dqs                   (  ctl_clk_dqs     [10]             ),
     .C_ctl_clk_wdq                   (  ctl_clk_wdq     [10]             ),
     .C_ddr_clk_ac                    (  ddr_clk_ac      [10]             ),
     .C_ddr_clk_dqs                   (  ddr_clk_dqs     [10]             ),
     .C_ddr_clk_wdq                   (  ddr_clk_wdq     [10]             ),
     .C_rdqs                          (  rdqs            [10]             ),
     .C_rdqs_n_gated                  (  rdqs_n_gated    [10]             ),
     .C_wr_path_rstn_low              (  wr_path_rstn_low[10]             ),
     .C_wr_path_rstn_upp              (  wr_path_rstn_upp[10]             ),
     .C_rd_path_rstn_low              (  rd_path_rstn_low[10]             ),
     .C_rd_path_rstn_upp              (  rd_path_rstn_upp[10]             ),
     .C_ts_dq                         (  ts_dq           [10]             ),
     .C_ts_dqs                        (  ts_dqs          [10]             ),
     .C_ts_dqsn                       (  ts_dqsn         [10]             ),
     .C_doq                           (  doq             [879:800]        ),
     .C_dosp                          (  dosp            [87:80]          ),
     .C_dosn                          (  dosn            [87:80]          ),
     .C_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [10]             ),
     .C_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [10]             ),
     .C_in_bdl_byp                    (  in_bdl_byp      [109:100]        ),
     .C_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [65:60]          ),
     .C_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [65:60]          ),
     .C_in_bdl_dly                    (  in_bdl_dly      [659:600]        ),
     .C_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[10]             ),
     .C_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[10]             ),
     .C_out_bdl_byp                   (  out_bdl_byp     [109:100]        ),
     .C_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[65:60]          ),
     .C_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[65:60]          ),
     .C_out_bdl_dly                   (  out_bdl_dly     [659:600]        ),
     .C_diq                           (  diq             [10*13*8 +: 12*8]),
     .C_pdr                           (  pdr             [10]             ),
     .C_pdr_dqs                       (  pdr_dqs         [10]             ),
     .C_pdr_dqsn                      (  pdr_dqsn        [10]             ),
     .C_rdqs_in                       (  rdqs_in         [10]             ),
     .C_rdqs_n_in                     (  rdqs_n_in       [10]             ),
   //-----------------------------------------------------------
     .D_ctl_phy_clk                   (  ctl_phy_clk     [11]             ),
     .D_ctl_clk_ac                    (  ctl_clk_ac      [11]             ),
     .D_ctl_clk_dqs                   (  ctl_clk_dqs     [11]             ),
     .D_ctl_clk_wdq                   (  ctl_clk_wdq     [11]             ),
     .D_ddr_clk_ac                    (  ddr_clk_ac      [11]             ),
     .D_ddr_clk_dqs                   (  ddr_clk_dqs     [11]             ),
     .D_ddr_clk_wdq                   (  ddr_clk_wdq     [11]             ),
     .D_rdqs                          (  rdqs            [11]             ),
     .D_rdqs_n_gated                  (  rdqs_n_gated    [11]             ),
     .D_wr_path_rstn_low              (  wr_path_rstn_low[11]             ),
     .D_wr_path_rstn_upp              (  wr_path_rstn_upp[11]             ),
     .D_rd_path_rstn_low              (  rd_path_rstn_low[11]             ),
     .D_rd_path_rstn_upp              (  rd_path_rstn_upp[11]             ),
     .D_ts_dq                         (  ts_dq           [11]             ),
     .D_ts_dqs                        (  ts_dqs          [11]             ),
     .D_ts_dqsn                       (  ts_dqsn         [11]             ),
     .D_doq                           (  doq             [959:880]        ),
     .D_dosp                          (  dosp            [95:88]          ),
     .D_dosn                          (  dosn            [95:88]          ),
     .D_in_dqsp_bdl_byp               (  in_dqsp_bdl_byp [11]             ),
     .D_in_dqsn_bdl_byp               (  in_dqsn_bdl_byp [11]             ),
     .D_in_bdl_byp                    (  in_bdl_byp      [119:110]        ),
     .D_in_dqsp_bdl_dly               (  in_dqsp_bdl_dly [71:66]          ),
     .D_in_dqsn_bdl_dly               (  in_dqsn_bdl_dly [71:66]          ),
     .D_in_bdl_dly                    (  in_bdl_dly      [719:660]        ),
     .D_out_dqsp_bdl_byp              (  out_dqsp_bdl_byp[11]             ),
     .D_out_dqsn_bdl_byp              (  out_dqsn_bdl_byp[11]             ),
     .D_out_bdl_byp                   (  out_bdl_byp     [119:110]        ),
     .D_out_dqsp_bdl_dly              (  out_dqsp_bdl_dly[71:66]          ),
     .D_out_dqsn_bdl_dly              (  out_dqsn_bdl_dly[71:66]          ),
     .D_out_bdl_dly                   (  out_bdl_dly     [719:660]        ),
     .D_diq                           (  diq             [11*13*8 +: 13*8]),
     .D_pdr                           (  pdr             [11]             ),
     .D_pdr_dqs                       (  pdr_dqs         [11]             ),
     .D_pdr_dqsn                      (  pdr_dqsn        [11]             ),
     .D_doq_se                        (  doq_se          [47:40]          ),
     .D_in_se_bdl_byp                 (  in_se_bdl_byp   [5]              ),
     .D_in_se_bdl_dly                 (  in_se_bdl_dly   [35:30]          ),
     .D_out_se_bdl_byp                (  out_se_bdl_byp  [5]              ),
     .D_out_se_bdl_dly                (  out_se_bdl_dly  [35:30]          ),
     .D_rdqs_in                       (  rdqs_in         [11]             ),
     .D_rdqs_n_in                     (  rdqs_n_in       [11]             ),
   //-----------------------------------------
     .A_dq_pdr_md                     (  dq_pdr_md       [179:160]        ),
     .A_dqs_pdr_md                    (  dqs_pdr_md      [17:16]          ),
     .A_dq_se_pdr_md                  (  dq_se_pdr_md    [9:8]            ),
     .B_dq_pdr_md                     (  dq_pdr_md       [199:180]        ),
     .B_dqs_pdr_md                    (  dqs_pdr_md      [19:18]          ),
     .C_dq_pdr_md                     (  dq_pdr_md       [219:200]        ),
     .C_dqs_pdr_md                    (  dqs_pdr_md      [21:20]          ),
     .D_dq_pdr_md                     (  dq_pdr_md       [239:220]        ),
     .D_dqs_pdr_md                    (  dqs_pdr_md      [23:22]          ),
     .D_dq_se_pdr_md                  (  dq_se_pdr_md    [11:10]          ),
     .A_dq_ts_md                      (  dq_ts_md        [179:160]        ),
     .A_dqs_ts_md                     (  dqs_ts_md       [17:16]          ),
     .A_dq_se_ts_md                   (  dq_se_ts_md     [9:8]            ),
     .B_dq_ts_md                      (  dq_ts_md        [199:180]        ),
     .B_dqs_ts_md                     (  dqs_ts_md       [19:18]          ),
     .C_dq_ts_md                      (  dq_ts_md        [219:200]        ),
     .C_dqs_ts_md                     (  dqs_ts_md       [21:20]          ),
     .D_dq_ts_md                      (  dq_ts_md        [239:220]        ),
     .D_dqs_ts_md                     (  dqs_ts_md       [23:22]          ),
     .D_dq_se_ts_md                   (  dq_se_ts_md     [11:10]          ),
     .A_te_dq                         (  te              [8]              ),
     .A_te_dqs                        (  te_dqs          [8]              ),
     .A_te_dqsn                       (  te_dqsn         [8]              ),
     .B_te_dq                         (  te              [9]              ),
     .B_te_dqs                        (  te_dqs          [9]              ),
     .B_te_dqsn                       (  te_dqsn         [9]              ),
     .C_te_dq                         (  te              [10]             ),
     .C_te_dqs                        (  te_dqs          [10]             ),
     .C_te_dqsn                       (  te_dqsn         [10]             ),
     .D_te_dq                         (  te              [11]             ),
     .D_te_dqs                        (  te_dqs          [11]             ),
     .D_te_dqsn                       (  te_dqsn         [11]             ),
     .A_dq_te_md                      (  dq_te_md        [179:160]        ),
     .A_dqs_te_md                     (  dqs_te_md       [17:16]          ),
     .A_dq_se_te_md                   (  dq_se_te_md     [9:8]            ),
     .B_dq_te_md                      (  dq_te_md        [199:180]        ),
     .B_dqs_te_md                     (  dqs_te_md       [19:18]          ),
     .C_dq_te_md                      (  dq_te_md        [219:200]        ),
     .C_dqs_te_md                     (  dqs_te_md       [21:20]          ),
     .D_dq_te_md                      (  dq_te_md        [239:220]        ),
     .D_dqs_te_md                     (  dqs_te_md       [23:22]          ),
     .D_dq_se_te_md                   (  dq_se_te_md     [11:10]          ),
     .A_lclk                          (  lclk_2                           ),
     .B_lclk                          (  lclk_2                           ),
     .C_lclk                          (  lclk_2                           ),
     .D_lclk                          (  lclk_2                           )
);
end
endgenerate


assign apb_error =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_error0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_error0     :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_error1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_error1     :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_error2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_error2     : 1'b0;

assign apb_rdata =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_rdata0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_rdata0     :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_rdata1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_rdata1     :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_rdata2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_rdata2     : 32'd0;

assign apb_ready =  (apb_addr[15:11] == 15) ? A_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 14) ? B_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 13) ? C_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 12) ? D_dqsgr_apb_ready0 :
                    (apb_addr[15:11] == 3 ) ? pzq_apb_rdy0       :
                    (apb_addr[15:11] == 11) ? A_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 10) ? B_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 9 ) ? C_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 8 ) ? D_dqsgr_apb_ready1 :
                    (apb_addr[15:11] == 2 ) ? pzq_apb_rdy1       :
                    (apb_addr[15:11] == 7 ) ? A_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 6 ) ? B_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 5 ) ? C_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 4 ) ? D_dqsgr_apb_ready2 :
                    (apb_addr[15:11] == 1 ) ? pzq_apb_rdy2       : 1'b1;


endmodule


`timescale 1ps/1ps

module ph1_logic_dfi_bus_adjust #(
    parameter ADDR_WIDTH            = 17,   // DRAM address bus width
    parameter ROW_WIDTH             = 17,   // DRAM address bus width
    parameter COL_WIDTH             = 12,   // column address width
    parameter BANK_WIDTH            = 2,
`ifdef DRAM_DDR4
    parameter BG_WIDTH              = 1,
`endif
    parameter ODT_WIDTH             = 1,
    parameter CK_WIDTH              = 1,    // # of CK/CK# outputs to memory
    parameter CKE_WIDTH             = 1,    // # of cke outputs
    parameter CS_WIDTH              = 1,    // # of unique CS outputs
    parameter DQ_WIDTH              = 8,
    parameter DQS_WIDTH             = 1,    // # of DQS (strobe)
    parameter DM_WIDTH              = 1

)(
    input      [                    3:0]    dfi_reset_n_temp,
    input      [        CKE_WIDTH*4-1:0]    dfi_cke_temp,
    input      [        ODT_WIDTH*4-1:0]    dfi_odt_temp,
    input      [        CS_WIDTH *4-1:0]    dfi_cs_n_temp,
    input      [                    3:0]    dfi_ras_n_temp,
    input      [                    3:0]    dfi_cas_n_temp,
    input      [                    3:0]    dfi_we_n_temp,
`ifdef DRAM_DDR4
    input      [         BG_WIDTH*4-1:0]    dfi_bg_temp,
    input      [                    3:0]    dfi_act_n_temp,     
    input      [                    3:0]    dfi_parity_in_temp,
    output reg [                    3:0]    dfi_alert_n_temp,
`endif

    input      [       BANK_WIDTH*4-1:0]    dfi_bank_temp,
    input      [       ADDR_WIDTH*4-1:0]    dfi_address_temp,
    input      [        DQS_WIDTH*4-1:0]    dfi_wrdata_en_temp,
    input      [         DQ_WIDTH*8-1:0]    dfi_wrdata_temp,
    input      [         DM_WIDTH*8-1:0]    dfi_wrdata_mask_temp,
    input      [        DQS_WIDTH*4-1:0]    dfi_rddata_en_temp, 
    output reg [        DQS_WIDTH*4-1:0]    dfi_rddata_valid_temp,
    output reg [         DQ_WIDTH*8-1:0]    dfi_rddata_temp,
    output reg [         DM_WIDTH*8-1:0]    dfi_rddata_dbi_n_temp,
    
    output reg [  3:0]    dfi_reset_n,
    output reg [  7:0]    dfi_cke,
    output reg [  7:0]    dfi_odt,
    output reg [  7:0]    dfi_cs_n,
    output reg [  3:0]    dfi_act_n,
    output reg [  3:0]    dfi_ras_n,
    output reg [  3:0]    dfi_cas_n,
    output reg [  3:0]    dfi_we_n,
    output reg [  7:0]    dfi_bg,
    output reg [ 11:0]    dfi_bank,
    output reg [ 71:0]    dfi_address,
    output reg [ 35:0]    dfi_wrdata_en,
    output reg [575:0]    dfi_wrdata,
    output reg [ 71:0]    dfi_wrdata_mask,
    output reg [  3:0]    dfi_parity_in,
    output reg [ 35:0]    dfi_rddata_en,

    input      [ 35:0]    dfi_rddata_valid,
    input      [575:0]    dfi_rddata,
    input      [ 71:0]    dfi_rddata_dbi_n,
    input      [  3:0]    dfi_alert_n

);


integer a,b;
always @(*)
begin:collect_block

    dfi_reset_n             = dfi_reset_n_temp;
    dfi_cke                 = 8'hff; 
    dfi_odt                 = 8'd0; 
    dfi_cs_n                = 8'hff; 
`ifdef DRAM_DDR4
    dfi_act_n               = dfi_act_n_temp;
`else
    dfi_act_n               =4'hf;
`endif
    dfi_ras_n               = dfi_ras_n_temp;
    dfi_cas_n               = dfi_cas_n_temp;
    dfi_we_n                = dfi_we_n_temp;
    dfi_bg                  = 8  'd0;
    dfi_bank                = 12 'd0;
    dfi_address             = 72 'd0;
    dfi_wrdata_en           = 36 'd0;
    dfi_wrdata              = 576'd0;
    dfi_wrdata_mask         = 72 'hff_ffff_ffff_ffff_ffff;
    dfi_rddata_en           = 36 'd0;
    dfi_rddata_valid_temp   = 36 'd0;
    dfi_rddata_temp         = 576'd0;
    dfi_rddata_dbi_n_temp   = 72 'hff_ffff_ffff_ffff_ffff;
    dfi_parity_in           = 4  'd0;
`ifdef DRAM_DDR4
    dfi_alert_n_temp        = 4  'hf; 
`endif


    for(a=0; a<4; a=a+1) // a: phase;  b: width 
    begin
        
        for(b=0; b<CKE_WIDTH ; b=b+1) dfi_cke        [ a*2  + b] = dfi_cke_temp       [ a*CKE_WIDTH  + b];
        for(b=0; b<ODT_WIDTH ; b=b+1) dfi_odt        [ a*2  + b] = dfi_odt_temp       [ a*ODT_WIDTH  + b];
        for(b=0; b<CS_WIDTH  ; b=b+1) dfi_cs_n       [ a*2  + b] = dfi_cs_n_temp      [ a*CS_WIDTH   + b];
        for(b=0; b<ADDR_WIDTH; b=b+1) dfi_address    [ a*18 + b] = dfi_address_temp   [ a*ADDR_WIDTH + b];
        for(b=0; b<BANK_WIDTH; b=b+1) dfi_bank       [ a*3  + b] = dfi_bank_temp      [ a*BANK_WIDTH + b];
        
        `ifdef DRAM_DDR4
            for(b=0;       b<BG_WIDTH; b=b+1) dfi_bg          [ a*2  + b] = dfi_bg_temp        [ a*BG_WIDTH + b];
            for(b=0;              b<1; b=b+1) dfi_parity_in   [ a*1  + b] = dfi_parity_in_temp [ a*1 + b];
            for(b=0;              b<1; b=b+1) dfi_alert_n_temp[ a*1  + b] = dfi_alert_n        [ a*1 + b];
        `endif
    
        `ifdef USE_PING_PONG_PHY
            for(b=0; b<DQS_WIDTH; b=b+1)
            begin
                 if( b < (DQS_WIDTH/2) )
                 begin
                    dfi_wrdata_en         [        a*9  + b] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_en         [        a*9  + b] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_valid_temp [a*DQS_WIDTH  + b] = dfi_rddata_valid   [  a*9 + b];
                end
                else
                begin
                    dfi_wrdata_en         [a*9  + (4+b-(DQS_WIDTH/2))] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_en         [a*9  + (4+b-(DQS_WIDTH/2))] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
                    dfi_rddata_valid_temp [          a*DQS_WIDTH  + b] = dfi_rddata_valid   [ a*9 + (4+b-(DQS_WIDTH/2))];
                end
            end
        `else
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_wrdata_en        [        a*9  + b] = dfi_wrdata_en_temp [ a*DQS_WIDTH + b];
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_rddata_en        [        a*9  + b] = dfi_rddata_en_temp [ a*DQS_WIDTH + b];
            for(b=0; b<DQS_WIDTH; b=b+1)  dfi_rddata_valid_temp[a*DQS_WIDTH  + b] = dfi_rddata_valid   [ a*9         + b];
        `endif
    end

    for(a=0; a<8; a=a+1) //2*4phase
    begin
        `ifdef USE_PING_PONG_PHY
             for(b=0; b<DQ_WIDTH; b=b+1)  
             begin
                 if(b < (DQ_WIDTH/2))
                 begin
                     dfi_wrdata     [      a*72 +b] = dfi_wrdata_temp[a*DQ_WIDTH + b];
                     dfi_rddata_temp[a*DQ_WIDTH +b] = dfi_rddata     [      a*72 + b];
                 end
                 else
                 begin
                     dfi_wrdata     [a*72 +(4*8+b-(DQ_WIDTH/2))] = dfi_wrdata_temp [a*DQ_WIDTH + b];
                     dfi_rddata_temp[             a*DQ_WIDTH +b] = dfi_rddata      [a*72 + (4*8+b-(DQ_WIDTH/2))];
                 end
             end 
                  
             for(b=0; b<DM_WIDTH; b=b+1)
             begin
                 if(b < (DM_WIDTH/2))
                 begin
                     dfi_wrdata_mask       [a*9  +(4+b-(DM_WIDTH/2))] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
                     dfi_rddata_dbi_n_temp [a*DM_WIDTH +b]            = dfi_rddata_dbi_n       [a*9  + (4+b-(DM_WIDTH/2))];
                 end
                 else
                 begin
                     dfi_wrdata_mask       [      a*9  +b] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
                     dfi_rddata_dbi_n_temp [a*DM_WIDTH +b] = dfi_rddata_dbi_n       [      a*9  + b];
                 end
             end
        `else      
            
            for(b=0; b<DQ_WIDTH; b=b+1)   dfi_wrdata            [      a*72 +b] = dfi_wrdata_temp        [a*DQ_WIDTH + b];
            for(b=0; b<DM_WIDTH; b=b+1)   dfi_wrdata_mask       [      a*9  +b] = dfi_wrdata_mask_temp   [a*DM_WIDTH + b];
            for(b=0; b<DQ_WIDTH; b=b+1)   dfi_rddata_temp       [a*DQ_WIDTH +b] = dfi_rddata             [      a*72 + b];
            for(b=0; b<DM_WIDTH; b=b+1)   dfi_rddata_dbi_n_temp [a*DM_WIDTH +b] = dfi_rddata_dbi_n       [      a*9  + b];
 
        `endif
    end

end

endmodule

`timescale 1ps / 1ps
`ifdef DFI_FIFO


module ph1_logic_generic_async_fifo #(
    parameter    DATA_WIDTH    = 8,
    parameter    ADDR_WIDTH    = 16,
    parameter    SHOW_AHEAD_EN = 0,
    parameter    U_DLY         = 100
)(
    // input
    rrst, wrst, clkw, clkr, we, re, di,
    // output
    dout, full_flag, empty_flag
);

input                       rrst       ;
input                       wrst       ;
input                       we         ;
input      [DATA_WIDTH-1:0] di         ; //synthesis keep
input                       re         ;
input                       clkr       ;
input                       clkw       ;
output reg                  full_flag  ; //synthesis keep
output     [DATA_WIDTH-1:0] dout       ; //synthesis keep
output reg                  empty_flag ; //synthesis keep

wire  [ADDR_WIDTH  :0]      rdusedw;//synthesis keep
wire  [ADDR_WIDTH  :0]      wrusedw;//synthesis keep

reg   [ADDR_WIDTH-1:0]      rd_addr; // extend RAM address for sync
reg   [ADDR_WIDTH-1:0]      wr_addr;

/* sync registers */
reg   [ADDR_WIDTH  :0]      sync_w2r_r1,sync_w2r_r2;
reg   [ADDR_WIDTH  :0]      sync_r2w_r1,sync_r2w_r2;

wire  [ADDR_WIDTH  :0]      sync_rd_addr;
wire  [ADDR_WIDTH  :0]      sync_wr_addr;
reg   [ADDR_WIDTH  :0]      gray_rd_addr;
reg   [ADDR_WIDTH  :0]      gray_wr_addr;
wire  [ADDR_WIDTH  :0]      shift_rd_addr;
wire  [ADDR_WIDTH  :0]      shift_wr_addr;

wire                        fifo_empty;//synthesis keep
wire                        fifo_full ;//synthesis keep

wire  [ADDR_WIDTH  :0]      rd_addr_next;
wire  [ADDR_WIDTH  :0]      gray_rd_addr_next;
wire  [ADDR_WIDTH  :0]      wr_addr_next;
wire  [ADDR_WIDTH  :0]      gray_wr_addr_next;

assign shift_rd_addr =  rd_addr_next;
assign shift_wr_addr =  wr_addr_next;

assign rd_addr_next = (re ? (rd_addr + 1'b1) : rd_addr);
assign wr_addr_next = (we ? (wr_addr + 1'b1) : wr_addr);

/* binary to gray */
assign gray_rd_addr_next = (shift_rd_addr >> 1) ^ shift_rd_addr;

/* binary to gray */
assign gray_wr_addr_next = (shift_wr_addr >> 1) ^ shift_wr_addr;

assign fifo_empty = (gray_rd_addr[ADDR_WIDTH:0] == sync_w2r_r2[ADDR_WIDTH:0]) ? 1'b1 : 1'b0 ;

assign fifo_full = (gray_wr_addr[ADDR_WIDTH:0] == {~sync_r2w_r2[ADDR_WIDTH:ADDR_WIDTH-1], sync_r2w_r2[ADDR_WIDTH-2:0]}) ? 1'b1 : 1'b0 ;

PH1_LOGIC_DRAM #(
    .DATA_WIDTH_W (DATA_WIDTH   ),
    .DATA_WIDTH_R (DATA_WIDTH   ),
    .ADDR_WIDTH_W (ADDR_WIDTH   ),
    .ADDR_WIDTH_R (ADDR_WIDTH   ),
    .DATA_DEPTH_W (2**ADDR_WIDTH),
    .DATA_DEPTH_R (2**ADDR_WIDTH),
    .INIT_FILE    ("NONE"       ),
    .READREG      ("NOREG"      ),
    .RESETMODE    ("SYNC"       )
) inst (
    .di    ( di   ),
    .waddr ( wr_addr[ADDR_WIDTH-1:0] ),
    .raddr ( rd_addr[ADDR_WIDTH-1:0]+ (SHOW_AHEAD_EN & re) ),
    .we    ( we   ),
    .rce   ((SHOW_AHEAD_EN == 1'b1) ? 1'b1 : re ),
    .wclk  ( clkw ),
    .rclk  ( clkr ),
    .rrst  ( 1'b0 ),
    .rdoq  (      ),
    .rdo   ( dout )
);


always @ (*)
begin
    empty_flag <= fifo_empty;
end

always @ (*)
begin
    full_flag <= fifo_full;
end

/* rd addr generation */
always @ (posedge clkr or posedge rrst)
begin
    if ( rrst ) begin
        rd_addr <= 'b0;
        gray_rd_addr <= 'b0;
    end else begin
        rd_addr <= #U_DLY rd_addr_next;
        gray_rd_addr <= #U_DLY gray_rd_addr_next;
    end
end

/* wr addr generation */
always @ (posedge clkw or posedge wrst)
begin
    if ( wrst ) begin
        wr_addr <= 'b0;
        gray_wr_addr <= 'b0;
    end else begin
        wr_addr <= #U_DLY wr_addr_next;
        gray_wr_addr <= #U_DLY gray_wr_addr_next;
    end
end


/* sync rd_addr to wr_clk */
always @ (posedge clkw or posedge wrst)
begin
    if ( wrst ) begin
        sync_r2w_r1 <= 'd0;
        sync_r2w_r2 <= 'd0;
    end else begin
        sync_r2w_r1 <= #U_DLY gray_rd_addr;
        sync_r2w_r2 <= #U_DLY sync_r2w_r1;
    end
end

/* sync wr_addr to rd_clk */
always@(posedge clkr or posedge rrst)
begin
    if( rrst ) begin
        sync_w2r_r1 <= 'd0;
        sync_w2r_r2 <= 'd0;
    end else begin
        sync_w2r_r1 <= #U_DLY gray_wr_addr ;
        sync_w2r_r2 <= #U_DLY sync_w2r_r1;
    end
end


endmodule

`endif


`timescale 1ps/1ps 
module ph1_logic_apb_mux_1_3 #(
  parameter  PADDR_SIZE = 16,
  parameter  PDATA_SIZE = 32,
  parameter  SLAVES     = 3
) (

    // APB master
    input                      mst_psel,
    input  [PADDR_SIZE -1 : 0] mst_paddr,
    output [PDATA_SIZE -1 : 0] mst_prdata,
    output                     mst_pready,
    output                     mst_pslverr,

    // APB slaves
    output [             SLAVES - 1 : 0] slv_psel   ,
    input  [PDATA_SIZE * SLAVES - 1 : 0] slv_prdata ,
    input  [             SLAVES - 1 : 0] slv_pready ,
    input  [             SLAVES - 1 : 0] slv_pslverr
);
//////////////////////////////////////////////////////////////////
//
// Variables
//
wire [PDATA_SIZE * SLAVES - 1:0] prdata;
wire [             SLAVES - 1:0] pready;
wire [             SLAVES - 1:0] pslverr;
wire [PDATA_SIZE * SLAVES - 1:0] prdata_switched;

wire [PADDR_SIZE * SLAVES - 1:0] slv_mask;

assign slv_mask[PADDR_SIZE * 0 +: PADDR_SIZE] = 16'hf800;
assign slv_mask[PADDR_SIZE * 1 +: PADDR_SIZE] = 16'h7800;
assign slv_mask[PADDR_SIZE * 2 +: PADDR_SIZE] = 16'h8000;

genvar s,b;

//////////////////////////////////////////////////////////////////
//
// Module Body
//

assign slv_psel[0] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 0 +: PADDR_SIZE]) == 16'h0000 );
assign slv_psel[1] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 1 +: PADDR_SIZE]) != 16'h0000 );
assign slv_psel[2] = mst_psel & ( (mst_paddr & slv_mask[PADDR_SIZE * 2 +: PADDR_SIZE]) == 16'h8000 );

generate
    for (s=0;s<SLAVES;s=s+1)
    begin: aa
        /* Mux slave responses */
        assign prdata [PDATA_SIZE * s +: PDATA_SIZE] = slv_prdata[PDATA_SIZE * s +: PDATA_SIZE] & {PDATA_SIZE{slv_psel[s]}};
        assign pready [s] = slv_pready [s] & slv_psel[s];
        assign pslverr[s] = slv_pslverr[s] & slv_psel[s];
    end
endgenerate

generate
  for (s=0; s<SLAVES; s=s+1)
  begin: bb
      for (b=0; b<PDATA_SIZE; b=b+1)
      begin: cc
          assign prdata_switched[SLAVES * b + s] = prdata[PDATA_SIZE * s + b];
      end
  end

  for (b=0;b<PDATA_SIZE;b=b+1)
  begin: dd
      assign mst_prdata[b] = |prdata_switched[SLAVES * b +: SLAVES];
  end
endgenerate

assign mst_pready  = |pready;
assign mst_pslverr = |pslverr;

endmodule
`default_nettype none  // turn off implicit data types
`ifdef USE_EFFICIENCY_EQUALIZER
`timescale 1ps/1ps

module ph1_logic_ddrphy_gate_gen_glue #(
   parameter   pDX8_NUM                     = 9
             , pNO_OF_LRANKS                = 2
             , pNO_OF_RANKS                 = 2

             , pNO_OF_DX_DQS                = 1  // number of DQS signals per DX macro
             , pNUM_LANES                   = pDX8_NUM * pNO_OF_DX_DQS   // Number of independent lanes
             , pNUM_BEATS                   = 8  // 4 beats per word
             , pDGSL_WIDTH                  = 5

             // PUB DFI widths
             , pPUB_DFI_NO_OF_CMDS          = 4   // Num commands per (ctl) cycle

             // PUB Lane DFI widths
             , pPLN_DFI_NO_OF_CMDS          = 4   // Num commands per (ctl) cycle
             , pPLN_DFI_DATA_EN_WIDTH       = (pPLN_DFI_NO_OF_CMDS/2 * 1)

             // DFI Port Configuration
             , pM81_MEMCTL_NO_OF_CMDS       = 4
             , pCTL_DFI_CMD_WIDTH           = 2
             , pM81_MEMCTL_CS_N_WIDTH       = (pM81_MEMCTL_NO_OF_CMDS * pNO_OF_RANKS)
             , pM81_MEMCTL_ACT_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_RAS_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_CAS_N_WIDTH      = (pM81_MEMCTL_NO_OF_CMDS * 1)
             , pM81_MEMCTL_WE_N_WIDTH       = (pM81_MEMCTL_NO_OF_CMDS * 1)

             , pM81_MEMCTL_RDDATA_EN_WIDTH  = (pM81_MEMCTL_NO_OF_CMDS * pNUM_LANES)
             , pCTL_DFI_NO_OF_CMDS          = 2
             , pCTL_DFI_DATA_EN_WIDTH       = (pCTL_DFI_NO_OF_CMDS * pNUM_LANES)

             , pDGSL_WIDTH_INT              = pDGSL_WIDTH - 2
 )(
    input  wire                                            ctl_clk
  , input  wire                                            ctl_rst_n
  , input  wire  [pM81_MEMCTL_CS_N_WIDTH      -1 : 0]      dfi_cs_n
  , input  wire  [pM81_MEMCTL_ACT_N_WIDTH     -1 : 0]      dfi_act_n
  , input  wire  [pM81_MEMCTL_RAS_N_WIDTH     -1 : 0]      dfi_ras_n
  , input  wire  [pM81_MEMCTL_CAS_N_WIDTH     -1 : 0]      dfi_cas_n
  , input  wire  [pM81_MEMCTL_WE_N_WIDTH      -1 : 0]      dfi_we_n
  , input  wire  [pM81_MEMCTL_RDDATA_EN_WIDTH -1 : 0]      dfi_rddata_en

  , input  wire  [pNUM_LANES * 8              -1 : 0]      gate_ctl_qs_en
  , output wire  [pNUM_LANES * 8              -1 : 0]      phy_ctl_qs_en

  , input  wire                        apb_clk
  , input  wire                        apb_rst_n
  , output wire                        apb_ready
  , input  wire                        apb_enable
  , input  wire                        apb_sel
  , input  wire                        apb_wr_rdn
  , input  wire [15:0]                 apb_addr
  , output wire [31:0]                 apb_rdata
  , input  wire [31:0]                 apb_wdata
  , output wire                        apb_error

);
/***********************************************************************************/
localparam pDDR_SHFT_WIDTH           = 2; // width of DDR shift
localparam pTCK_RSL_RWIDTH           = (pNO_OF_LRANKS * pDGSL_WIDTH_INT);
localparam pDDR_SHFT_RWIDTH          = (pNO_OF_LRANKS * pDDR_SHFT_WIDTH);
localparam pTCK_RSL_LRWIDTH          = (pNUM_LANES * pNO_OF_LRANKS * pDGSL_WIDTH_INT);
localparam pDDR_SHFT_LRWIDTH         = (pNUM_LANES * pNO_OF_LRANKS * pDDR_SHFT_WIDTH);
localparam pDDR4_MODE  = 3'b100;

integer                                 lrank_id;
integer                                 lane_idx;
integer                                 cmd_idx;

/************************************************************************************/
// signals from MCU
reg                                                    cfg_glue_en                   ;
reg  [2:0]                                             cfg_ddr_mode                  ;
reg  [3 :0]                                            cfg_bl_rddata_en_pipe_sel_pre ;
reg  [5 :0]                                            cfg_bl_tphy_rddata_en         ;
reg                                                    cfg_mc_perrank_dfi_en         ;
reg                                                    cfg_mc_shrac_dual_chn_mode    ;
reg  [pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS -1 : 0] cfg_mc_gdqs_rsl               ;

reg                                                    mcu_glue_en                   ;
reg  [2:0]                                             mcu_ddr_mode                  ;
reg  [3 :0]                                            mcu_bl_rddata_en_pipe_sel_pre ;
reg  [5 :0]                                            mcu_bl_tphy_rddata_en         ;
reg                                                    mcu_mc_perrank_dfi_en         ;
reg                                                    mcu_mc_shrac_dual_chn_mode    ;
reg  [pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS -1 : 0] mcu_mc_gdqs_rsl               ;

wire  apb_wr_flag ;
/************************************************************************************/

// DFI interface
reg  [pPLN_DFI_DATA_EN_WIDTH       - 1 : 0] dfi_rddata_en_l   [pNUM_LANES - 1 : 0];
reg  [pPLN_DFI_DATA_EN_WIDTH       - 1 : 0] dfi_rddata_en_h   [pNUM_LANES - 1 : 0];

reg  [pTCK_RSL_LRWIDTH             - 1 : 0] gdqs_rsl_per_lane;
reg  [pDDR_SHFT_LRWIDTH            - 1 : 0] gdqs_ddr_shift_per_lane;


wire [pNUM_LANES * pNUM_BEATS - 1 : 0] m81_ctl_qs_en;
reg  [pNUM_LANES * pNUM_BEATS - 1 : 0] ctl_qs_en_glue;

reg  [pCTL_DFI_DATA_EN_WIDTH  - 1 : 0] m81_dfi_rddata_en_l, m81_dfi_rddata_en_h;

reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_ras_n;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_cas_n;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_we_n;

reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_ras_n_r;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_cas_n_r;
reg  [4           - 1 : 0] m81_ddr3_ctl_dfi_we_n_r;
reg  [8           - 1 : 0] dfi_cs_n_r;

wire ddr4_mode   = (cfg_ddr_mode == pDDR4_MODE);

/*************************************************************************************************/
assign apb_wr_flag = apb_wr_rdn ? ( apb_sel & apb_enable ) : 1'b0 ;
assign apb_ready   =  1'b1 ;
assign apb_error   =  1'b0 ;
assign apb_rdata   = 32'h0 ;

always @ ( posedge apb_clk )
begin
    if (apb_rst_n == 1'b0) begin
        mcu_glue_en                   <= 1'b0 ;
        mcu_ddr_mode                  <= pDDR4_MODE ;
        mcu_bl_rddata_en_pipe_sel_pre <= 4'h0 ;
        mcu_bl_tphy_rddata_en         <= 6'h0 ;
        mcu_mc_perrank_dfi_en         <= 1'b0 ;
        mcu_mc_shrac_dual_chn_mode    <= 1'b0 ;
        mcu_mc_gdqs_rsl               <= {(pNUM_LANES * pDGSL_WIDTH * pNO_OF_LRANKS){1'b0}} ;
    end else if ( apb_wr_flag == 1'b1 ) begin
        case (apb_addr[7:0])
            8'h00 : mcu_glue_en                   <= apb_wdata[0];
            8'h01 : mcu_ddr_mode                  <= apb_wdata[2:0];
            8'h02 : mcu_bl_rddata_en_pipe_sel_pre <= apb_wdata[3:0];
            8'h03 : mcu_bl_tphy_rddata_en         <= apb_wdata[5:0];
            8'h04 : mcu_mc_perrank_dfi_en         <= apb_wdata[0];
            8'h05 : mcu_mc_shrac_dual_chn_mode    <= apb_wdata[0];
            8'h10 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 0 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 0 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h11 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 1 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 1 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h12 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 2 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 2 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h13 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 3 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 3 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h14 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 4 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 4 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h15 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 5 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 5 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h16 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 6 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 6 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h17 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 7 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 7 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            8'h18 : begin
                    mcu_mc_gdqs_rsl[                           pDGSL_WIDTH * 8 +: pDGSL_WIDTH] <= apb_wdata[0  +: pDGSL_WIDTH];
                    mcu_mc_gdqs_rsl[pDGSL_WIDTH * pNUM_LANES + pDGSL_WIDTH * 8 +: pDGSL_WIDTH] <= apb_wdata[16 +: pDGSL_WIDTH];
                    end
            default : begin
                mcu_glue_en                   <= mcu_glue_en                   ;
                mcu_ddr_mode                  <= mcu_ddr_mode                  ;
                mcu_bl_rddata_en_pipe_sel_pre <= mcu_bl_rddata_en_pipe_sel_pre ;
                mcu_bl_tphy_rddata_en         <= mcu_bl_tphy_rddata_en         ;
                mcu_mc_perrank_dfi_en         <= mcu_mc_perrank_dfi_en         ;
                mcu_mc_shrac_dual_chn_mode    <= mcu_mc_shrac_dual_chn_mode    ;
                mcu_mc_gdqs_rsl               <= mcu_mc_gdqs_rsl               ;
            end
        endcase 
    end
end


always @ (posedge ctl_clk) begin
    cfg_glue_en                   <= mcu_glue_en                   ;
    cfg_ddr_mode                  <= mcu_ddr_mode                  ;
    cfg_bl_rddata_en_pipe_sel_pre <= mcu_bl_rddata_en_pipe_sel_pre ;
    cfg_bl_tphy_rddata_en         <= mcu_bl_tphy_rddata_en         ;
    cfg_mc_perrank_dfi_en         <= mcu_mc_perrank_dfi_en         ;
    cfg_mc_shrac_dual_chn_mode    <= mcu_mc_shrac_dual_chn_mode    ;
    cfg_mc_gdqs_rsl               <= mcu_mc_gdqs_rsl               ;
end
/*************************************************************************************************/
always @ (posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      ctl_qs_en_glue    <= {(pNUM_LANES * pNUM_BEATS){1'b1}};
    end else begin
      ctl_qs_en_glue    <= m81_ctl_qs_en ;
    end
end

assign phy_ctl_qs_en = cfg_glue_en ? (ctl_qs_en_glue & gate_ctl_qs_en) : gate_ctl_qs_en;


always @ (posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
       for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
         for (lrank_id = 0; lrank_id < pNO_OF_LRANKS; lrank_id = lrank_id + 1) begin
           gdqs_rsl_per_lane      [(pNO_OF_LRANKS * pDGSL_WIDTH_INT * lane_idx) + (lrank_id * pDGSL_WIDTH_INT) +: pDGSL_WIDTH_INT] <= {pDGSL_WIDTH_INT{1'b0}};
           gdqs_ddr_shift_per_lane[(pNO_OF_LRANKS * pDDR_SHFT_WIDTH * lane_idx) + (lrank_id * pDDR_SHFT_WIDTH) +: pDDR_SHFT_WIDTH] <= {pDDR_SHFT_WIDTH{1'b0}};
         end
       end
    end else begin
       for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
         for (lrank_id = 0; lrank_id < pNO_OF_LRANKS; lrank_id = lrank_id + 1) begin
           gdqs_rsl_per_lane      [(pNO_OF_LRANKS * pDGSL_WIDTH_INT * lane_idx) + (lrank_id * pDGSL_WIDTH_INT) +: pDGSL_WIDTH_INT] <= cfg_mc_gdqs_rsl [(pNUM_LANES * pDGSL_WIDTH     * lrank_id) + ((lane_idx * pDGSL_WIDTH)+2 ) +: pDGSL_WIDTH_INT];
           gdqs_ddr_shift_per_lane[(pNO_OF_LRANKS * pDDR_SHFT_WIDTH * lane_idx) + (lrank_id * pDDR_SHFT_WIDTH) +: pDDR_SHFT_WIDTH] <= cfg_mc_gdqs_rsl [(pNUM_LANES * pDGSL_WIDTH     * lrank_id) +  (lane_idx * pDGSL_WIDTH    ) +: pDDR_SHFT_WIDTH];
         end
       end
     end
end  // end always

  always @(posedge ctl_clk, negedge ctl_rst_n)
    if (ctl_rst_n == 1'b0) begin
      m81_dfi_rddata_en_l <= {pCTL_DFI_DATA_EN_WIDTH{1'b0}};
      m81_dfi_rddata_en_h <= {pCTL_DFI_DATA_EN_WIDTH{1'b0}};
    end else begin
      m81_dfi_rddata_en_l <= dfi_rddata_en[0 +: pCTL_DFI_DATA_EN_WIDTH];
      m81_dfi_rddata_en_h <= dfi_rddata_en[pCTL_DFI_DATA_EN_WIDTH +: pCTL_DFI_DATA_EN_WIDTH];
    end

  always @* begin : proc_dfi_read_data
    for (lane_idx = 0; lane_idx < pNUM_LANES; lane_idx = lane_idx + 1) begin
      for (cmd_idx = 0; cmd_idx < pPUB_DFI_NO_OF_CMDS/2; cmd_idx = cmd_idx + 1) begin
        dfi_rddata_en_l[lane_idx][cmd_idx] = m81_dfi_rddata_en_l[(cmd_idx * pNUM_LANES) + lane_idx];
        dfi_rddata_en_h[lane_idx][cmd_idx] = m81_dfi_rddata_en_h[(cmd_idx * pNUM_LANES) + lane_idx];
      end
    end
  end


 always @* begin: gen_m81_cmd_ddr4
    integer b_idx;

    for (b_idx = 0; b_idx < pCTL_DFI_CMD_WIDTH*2; b_idx = b_idx + 1) begin
      m81_ddr3_ctl_dfi_ras_n[b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b0 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_ras_n[b_idx];
      m81_ddr3_ctl_dfi_cas_n[b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b1 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_cas_n[b_idx];
      m81_ddr3_ctl_dfi_we_n [b_idx] = ddr4_mode && (dfi_act_n[b_idx] == 1'b0) ? 1'b1 :
                                      ddr4_mode && (dfi_ras_n[b_idx] == 1'b0)
                                                && (dfi_cas_n[b_idx] == 1'b1)
                                                && (dfi_we_n [b_idx] == 1'b1) ? 1'b1 : dfi_we_n [b_idx];
    end
  end

   always @(posedge ctl_clk, negedge ctl_rst_n)
    if (ctl_rst_n == 1'b0) begin
      m81_ddr3_ctl_dfi_ras_n_r <= 4'hf;
      m81_ddr3_ctl_dfi_cas_n_r <= 4'hf;
      m81_ddr3_ctl_dfi_we_n_r  <= 4'hf;
      dfi_cs_n_r               <= 8'hff;
    end else begin
      m81_ddr3_ctl_dfi_ras_n_r <= m81_ddr3_ctl_dfi_ras_n;
      m81_ddr3_ctl_dfi_cas_n_r <= m81_ddr3_ctl_dfi_cas_n;
      m81_ddr3_ctl_dfi_we_n_r  <= m81_ddr3_ctl_dfi_we_n;
      dfi_cs_n_r               <= dfi_cs_n;
    end

generate
    genvar gen_dfi_rd_idx;

    for (gen_dfi_rd_idx = 0; gen_dfi_rd_idx < pNUM_LANES; gen_dfi_rd_idx = gen_dfi_rd_idx + 1) begin : dx
      ph1_logic_rd_byte_glue u_rd_byte_glue  (
        .ctl_clk                   ( ctl_clk                       ),
        .ctl_rst_n                 ( ctl_rst_n                     ),

        .mc_dfi_cs_n               ( dfi_cs_n_r[7:0]               ),
        .mc_dfi_ras_n              ( m81_ddr3_ctl_dfi_ras_n_r[3:0] ),
        .mc_dfi_cas_n              ( m81_ddr3_ctl_dfi_cas_n_r[3:0] ),
        .mc_dfi_we_n               ( m81_ddr3_ctl_dfi_we_n_r [3:0] ),
        .mc_bl_ctl_gdqs_ddr_shift  ( gdqs_ddr_shift_per_lane [(gen_dfi_rd_idx * pDDR_SHFT_RWIDTH)    +: pDDR_SHFT_RWIDTH   ] ),
        .mc_bl_ctl_gdqs_rsl        ( gdqs_rsl_per_lane       [(gen_dfi_rd_idx * pTCK_RSL_RWIDTH)     +: pTCK_RSL_RWIDTH    ] ),

        .bl_rddata_en_pipe_sel_pre ( cfg_bl_rddata_en_pipe_sel_pre ),
        .bl_tphy_rddata_en         ( cfg_bl_tphy_rddata_en         ),
        .mc_perrank_dfi_en         ( cfg_mc_perrank_dfi_en         ),
        .mc_shrac_dual_chn_mode    ( cfg_mc_shrac_dual_chn_mode    ),

        .mc_dfi_rddata_en_l        ( dfi_rddata_en_l[ gen_dfi_rd_idx ] ),
        .mc_dfi_rddata_en_h        ( dfi_rddata_en_h[ gen_dfi_rd_idx ] ),

        .phy_bl_ctl_qs_en          ( m81_ctl_qs_en[(gen_dfi_rd_idx * 8) +: 8 ] )
      );

    end
endgenerate


endmodule

`endif

`default_nettype wire  // restore implicit data types


`default_nettype none  // turn off implicit data types
`ifdef USE_EFFICIENCY_EQUALIZER
`timescale 1ps / 1ps
module ph1_logic_rd_byte_glue #(
   //--------------------------------------------------------------------------//
   // Parameters
   //--------------------------------------------------------------------------//
     parameter pNO_OF_RANKS             = 2
   , parameter pNO_OF_PRANKS            = 2
   , parameter pNUM_LANES               = 1           // Number of independent lanes
   , parameter pNUM_CHANNELS            = 2
   , parameter pCHN_IDX                 = 0
   , parameter pNO_OF_3DS_STACKS        = 0

   , parameter pPIPE_MCTL2DFI           = 0  // number of pipeline stages on DFI inputs
   , parameter pPIPE_DFI2PHY            = 0  // number of pipelines stages between DFI and PHY
   , parameter pCHN_NO_OF_RANKS         = 1

     // PUB DFI widths
   , parameter pPUB_DFI_NO_OF_CMDS      = 4                         // Num commands per (ctl) cycle
   , parameter pPUB_DFI_CMD_WIDTH       = (pPUB_DFI_NO_OF_CMDS * 1)
   , parameter pPUB_DFI_RANK_WIDTH      = (pPUB_DFI_NO_OF_CMDS * pNO_OF_PRANKS)
   , parameter pPUB_DFI_DATA_EN_WIDTH   = (pPUB_DFI_NO_OF_CMDS/2 * pNUM_LANES)

    // PUB controller DFI widths
   , parameter pDFI_RANK_WIDTH          = 2

   , parameter pPHY_NUM_CMDS            = 4

   // DDR mode
   , parameter pDDR_SHFT_WIDTH          = 2 // width of DDR shift
   , parameter pDGSL_WIDTH              = 5
   , parameter pDGSL_WIDTH_INT          = pDGSL_WIDTH - 2
   , parameter pDDR_SHFT_RWIDTH         = (pNO_OF_RANKS * pDDR_SHFT_WIDTH)
   , parameter pTCK_RSL_RWIDTH          = (pNO_OF_RANKS * pDGSL_WIDTH_INT)
             
   //// DFI Port Configuration
   , parameter pCHN_DFI_CHIP_SEL_WIDTH  = (pPHY_NUM_CMDS * pCHN_NO_OF_RANKS)
) (
    //--------------------------------------------------------------------------//
    // Port declarations
    //--------------------------------------------------------------------------//
    // System
      input  wire                                   ctl_clk
    , input  wire                                   ctl_rst_n

    , input  wire  [4        - 1 : 0]               bl_rddata_en_pipe_sel_pre
    , input  wire  [6        - 1 : 0]               bl_tphy_rddata_en
    , input  wire                                   mc_perrank_dfi_en
    , input  wire                                   mc_shrac_dual_chn_mode

    // PUB DFI interface
    , input  wire [pPUB_DFI_RANK_WIDTH    - 1 : 0]  mc_dfi_cs_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_ras_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_cas_n
    , input  wire [pPUB_DFI_CMD_WIDTH     - 1 : 0]  mc_dfi_we_n
    , input  wire [pPUB_DFI_DATA_EN_WIDTH - 1 : 0]  mc_dfi_rddata_en_l
    , input  wire [pPUB_DFI_DATA_EN_WIDTH - 1 : 0]  mc_dfi_rddata_en_h

    // interface from PUB read LCDL delays
    , input  wire  [pDDR_SHFT_RWIDTH      - 1 : 0]  mc_bl_ctl_gdqs_ddr_shift
    , input  wire  [pTCK_RSL_RWIDTH       - 1 : 0]  mc_bl_ctl_gdqs_rsl

    , output reg   [8                     - 1 : 0]  phy_bl_ctl_qs_en
);


  //--------------------------------------------------------------------------//
  // Internal Parameters
  //--------------------------------------------------------------------------//
  localparam pRD_LAT_STAGE_DEPTH       = 4'd9;
  localparam pMAX_TPHY_RDDATA_EN        = 26 + 6; // 6 for extra command pipelines
  localparam pTPHY_RDDATA_EN_WIDTH      = 6;

  // maximum number of pipelines for rddata_en pre-pipeline to account for command piplines
  localparam pMAX_RD_LOW_RWL_PIPE       = 3;

  // logical chip select size
  localparam pDFI_CHIP_SEL_LWIDTH      = (pPHY_NUM_CMDS * pNO_OF_RANKS );
  localparam pRSL_PLUS_ZERO            = 3'd0,
             pRSL_PLUS_ONE             = 3'd1,
             pRSL_PLUS_TWO             = 3'd2,
             pRSL_PLUS_THREE           = 3'd3,
             pRSL_PLUS_FOUR            = 3'd4,
             pRSL_PLUS_FIVE            = 3'd5,
             pRSL_PLUS_SIX             = 3'd6,
             pMAX_RSL                  = pRSL_PLUS_SIX + 1;
  

  // FSM
  localparam IDLE   = 2'b00,
             PRE    = 2'b01,
             DATA   = 2'b10,
             POST   = 2'b11;

//--------------------------------------------------------------------------//
// Register and Wire Declarations
//--------------------------------------------------------------------------//
  integer                                px_idx;

  wire                                   ac_bist_mode = 1'b0;
  wire                                   ddl_train;
  wire                                   dl_osc_mode = 1'b0;
  wire                                   lb_mode = 1'b0;

  // final DFI signals (after optional pipelines)
  reg [pPUB_DFI_RANK_WIDTH    - 1 : 0] dfi_cs_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_ras_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_cas_n;
  reg [pPUB_DFI_CMD_WIDTH     - 1 : 0] dfi_we_n;
  
  // system latency compensation signals
  // -----------------------------------
  integer                                 rank_idx;
  integer                                 lrank_id;
  integer                                 chn_rank_idx;
  integer                                 chn_allrank_idx;

  reg  [pCHN_DFI_CHIP_SEL_WIDTH - 1 : 0]  chn_dfi_cs_n;
  reg  [pCHN_DFI_CHIP_SEL_WIDTH - 1 : 0]  dfi_chip_sel_chn;
  reg  [pDFI_CHIP_SEL_LWIDTH    - 1 : 0]  dfi_cs_n_logical;
  reg  [pDFI_CHIP_SEL_LWIDTH    - 1 : 0]  dfi_chip_sel;

  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_1;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_2;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd_pre;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rd;
  wire [pPHY_NUM_CMDS           - 1 : 0]  in_phy_cmd_rd;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  bl_phy_cmd_rd;
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rank_rd_2          [pCHN_NO_OF_RANKS - 1 : 0];
  reg  [pPHY_NUM_CMDS           - 1 : 0]  phy_cmd_rank_rd_1          [pNO_OF_RANKS     - 1 : 0];
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_rd_reg;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_single_chn_mode;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_dual_chn_mode;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank_pre;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  phy_cmd_rank;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  in_phy_cmd_rank;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_phy_cmd_rank;

  reg  [2                       - 1 : 0]  in_dfi_rddata_en_l;
  reg  [2                       - 1 : 0]  in_dfi_rddata_en_h;

  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl_reg;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  rank_rd_gdqs_rsl_sel;

  reg  [pTPHY_RDDATA_EN_WIDTH   - 1 : 0]  bl_tphy_rddata_en_adj;
  reg  [pTPHY_RDDATA_EN_WIDTH   - 1 : 0]  bl_tphy_rddata_en_ff;
  reg  [4                       - 1 : 0]  bl_rddata_en_pipe_sel;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  bl_rsl_pipe                [pMAX_TPHY_RDDATA_EN + 1 - 1 : 0];
  reg  [pMAX_TPHY_RDDATA_EN     - 1 : 0]  bl_cmd_rd_pipe             ;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_pipe           [pMAX_TPHY_RDDATA_EN     - 1 : 0];
  wire                                    bl_cmd_rd_in;
  wire [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_in;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_pipe          [pMAX_RD_LOW_RWL_PIPE    : 0];
  reg  [2                       - 1 : 0]  bl_rddata_en_h_pipe          [pMAX_RD_LOW_RWL_PIPE    : 0];
  wire [2                       - 1 : 0]  bl_rddata_en_h_in;
  wire [2                       - 1 : 0]  bl_rddata_en_l_in;
  wire [4                       - 1 : 0]  bl_rddata_en_in;
  wire [2                       - 1 : 0]  bl_rddata_en_l;
  wire [2                       - 1 : 0]  bl_rddata_en_h;
  reg  [4                       - 1 : 0]  bl_rddata_en;
  reg  [4                       - 1 : 0]  bl_rddata_en_ff;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_array_px[10- 1 : 0];
  reg  [2                       - 1 : 0]  bl_rddata_en_h_array_px[10- 1 : 0];
  reg                                     bl_cmd_rd_px[pRD_LAT_STAGE_DEPTH : 0];
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_px[pRD_LAT_STAGE_DEPTH : 0];

  reg                                     bl_cmd_rd_dt;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_dt;
  reg  [2                       - 1 : 0]  bl_rddata_en_l_dt;
  reg  [2                       - 1 : 0]  bl_rddata_en_h_dt;

  reg  [4                       - 1 : 0]  bl_rddata_en_delayed;
  reg  [pDGSL_WIDTH_INT         - 1 : 0]  bl_cmd_rsl_delayed;
  reg  [pDFI_RANK_WIDTH         - 1 : 0]  bl_cmd_rank_delayed;

  // DFI-to-PHY read FSM
  reg  [2                 - 1 : 0]  curr_state;
  reg  [2                 - 1 : 0]  next_state;
  reg  [8                 - 1 : 0]  gate_en;
  reg  [6                 - 1 : 0]  gate_en_r6;
  wire [8                 - 1 : 0]  ctl_qs_en_new;

  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift;
  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift_qs_en;
  wire [pDDR_SHFT_WIDTH-1:0]                             gdqs_ddr_shift_qs_en_pre1;

  wire [pDFI_RANK_WIDTH  - 1 : 0]   bl_dfi_rdrank;
  wire  [8                - 1 : 0]  bl_ctl_qs_en;
  reg   [2 : 0]                     post_shift_qs_en_3;

  reg  [pDGSL_WIDTH_INT    - 1 : 0]  gdqs_rsl_per_rank       [0 : pNO_OF_RANKS - 1];
  reg  [pDDR_SHFT_WIDTH     -1 : 0]  gdqs_ddr_shift_per_rank [0 : pNO_OF_RANKS - 1];

  // outputs to PHY macros
  // ---------------------
  wire [8                    - 1 : 0]  ctl_qs_en;

  reg  [8                    - 1 : 0]  ctl_qs_en_px       [(pPIPE_DFI2PHY + 1) - 1 : 0];
 
  //***************************************************************************
  // Input Pipelines
  //***************************************************************************
  // Pipelines most of the incoming pseudo-static signals for timing purposes;
  // only signals that are deemed pseudo-static are unconditionally pipelined;

  assign ddl_train = 1'b0;

  always @(posedge ctl_clk or negedge ctl_rst_n) begin: proc_rank_dly
    integer lrank_id;
    if (ctl_rst_n == 1'b0) begin
      for (lrank_id = 0; lrank_id < pNO_OF_RANKS; lrank_id = lrank_id + 1) begin
        gdqs_rsl_per_rank      [lrank_id] <= {pDGSL_WIDTH_INT{1'b0}};
        gdqs_ddr_shift_per_rank[lrank_id] <= {pDDR_SHFT_WIDTH{1'b0}};
      end
    end else begin
      for (lrank_id = 0; lrank_id < pNO_OF_RANKS; lrank_id = lrank_id + 1) begin
        gdqs_rsl_per_rank      [lrank_id] <= mc_bl_ctl_gdqs_rsl       [(pDGSL_WIDTH_INT * lrank_id) +: pDGSL_WIDTH_INT];
        gdqs_ddr_shift_per_rank[lrank_id] <= mc_bl_ctl_gdqs_ddr_shift [(pDDR_SHFT_WIDTH * lrank_id) +: pDDR_SHFT_WIDTH];
      end
    end
  end

 
  always @* begin
    dfi_cs_n       = mc_dfi_cs_n;
    dfi_ras_n      = mc_dfi_ras_n;
    dfi_cas_n      = mc_dfi_cas_n;
    dfi_we_n       = mc_dfi_we_n;
    in_dfi_rddata_en_l = mc_dfi_rddata_en_l;
    in_dfi_rddata_en_h = mc_dfi_rddata_en_h;
    dfi_cs_n_logical = mc_dfi_cs_n;
  end


  generate
    // Single-channel configuration
    if (pNUM_CHANNELS == 1) begin : genblk_chn_dfi_cs_n
      always @(*) begin
        chn_dfi_cs_n = dfi_cs_n_logical;
      end
    end
    // Dual-channel configuration
    else begin : genblk_chn_dfi_cs_n
      always @(*) begin
        for (chn_rank_idx = 0; chn_rank_idx < pCHN_NO_OF_RANKS; chn_rank_idx = chn_rank_idx + 1) begin
          chn_allrank_idx = (pNUM_CHANNELS == 1) ? chn_rank_idx :                  // All ranks for single channel configuration
                                                   (chn_rank_idx * 2) + pCHN_IDX;  // Even ranks for chn0, odd for chn 1

          chn_dfi_cs_n[chn_rank_idx                   ] = dfi_cs_n_logical[chn_allrank_idx               ];
          chn_dfi_cs_n[chn_rank_idx + pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS];
          chn_dfi_cs_n[chn_rank_idx + 2*pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS*2];
          chn_dfi_cs_n[chn_rank_idx + 3*pCHN_NO_OF_RANKS] = dfi_cs_n_logical[chn_allrank_idx + pNO_OF_RANKS*3];
        end
      end
    end
  endgenerate
  
  always @(*) begin   
    for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (~ac_bist_mode) begin
        phy_cmd_rank_rd_2 [rank_idx][0] = (( {chn_dfi_cs_n[(0*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(0*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0100) && (lb_mode == 1'b1)));
      
        phy_cmd_rank_rd_2 [rank_idx][1] = (( {chn_dfi_cs_n[(1*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(1*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_2 [rank_idx][2] = (( {chn_dfi_cs_n[(2*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(2*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_2 [rank_idx][3] = (( {chn_dfi_cs_n[(3*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0101) ||
                                          (( {chn_dfi_cs_n[(3*pCHN_NO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0100) && (lb_mode == 1'b1)));
      end
      // in AC BIST mode, we're not driving properly formatted commands so make no effort to decode AC signals
      else begin
        phy_cmd_rank_rd_2 [rank_idx][0] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][1] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][2] = 2'b00;
        phy_cmd_rank_rd_2 [rank_idx][3] = 2'b00;
      end
    end
  end
  
  always@(*) begin   
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (~ac_bist_mode) begin
        phy_cmd_rank_rd_1 [rank_idx][0] = (( {dfi_cs_n_logical[(0*pNO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(0*pNO_OF_RANKS)+rank_idx], dfi_ras_n[0], dfi_cas_n[0], dfi_we_n[0]} == 4'b0100) && (lb_mode == 1'b1)));
      
        phy_cmd_rank_rd_1 [rank_idx][1] = (( {dfi_cs_n_logical[(1*pNO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(1*pNO_OF_RANKS)+rank_idx], dfi_ras_n[1], dfi_cas_n[1], dfi_we_n[1]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_1 [rank_idx][2] = (( {dfi_cs_n_logical[(2*pNO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(2*pNO_OF_RANKS)+rank_idx], dfi_ras_n[2], dfi_cas_n[2], dfi_we_n[2]} == 4'b0100) && (lb_mode == 1'b1)));

        phy_cmd_rank_rd_1 [rank_idx][3] = (( {dfi_cs_n_logical[(3*pNO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0101) ||
                                          (( {dfi_cs_n_logical[(3*pNO_OF_RANKS)+rank_idx], dfi_ras_n[3], dfi_cas_n[3], dfi_we_n[3]} == 4'b0100) && (lb_mode == 1'b1)));
      end
      // in AC BIST mode, we're not driving properly formatted commands so make no effort to decode AC signals
      else begin
        phy_cmd_rank_rd_1 [rank_idx][0] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][1] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][2] = 2'b00;
        phy_cmd_rank_rd_1 [rank_idx][3] = 2'b00;
      end
    end
  end

  // Track a read to any rank - phy_cmd_rd[odd/even]
  always@(*) begin
    phy_cmd_rd_2 = 4'h0;
    for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd_2[0] == 1'b0) begin
          phy_cmd_rd_2[0] = (phy_cmd_rank_rd_2[rank_idx][0] == 1'b1);
      end
      if (phy_cmd_rd_2[1] == 1'b0) begin
          phy_cmd_rd_2[1] = (phy_cmd_rank_rd_2[rank_idx][1] == 1'b1);
      end
      if (phy_cmd_rd_2[2] == 1'b0) begin
          phy_cmd_rd_2[2] = (phy_cmd_rank_rd_2[rank_idx][2] == 1'b1);
      end
      if (phy_cmd_rd_2[3] == 1'b0) begin
          phy_cmd_rd_2[3] = (phy_cmd_rank_rd_2[rank_idx][3] == 1'b1);
      end
    end
  end

  // Track a read to any rank - phy_cmd_rd[odd/even]
  always@(*) begin
    phy_cmd_rd_1 = 4'h0 ;
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd_1[0] == 1'b0) begin
          phy_cmd_rd_1[0] = (phy_cmd_rank_rd_1[rank_idx][0] == 1'b1);
      end
      if (phy_cmd_rd_1[1] == 1'b0) begin
          phy_cmd_rd_1[1] = (phy_cmd_rank_rd_1[rank_idx][1] == 1'b1);
      end
      if (phy_cmd_rd_1[2] == 1'b0) begin
          phy_cmd_rd_1[2] = (phy_cmd_rank_rd_1[rank_idx][2] == 1'b1);
      end
      if (phy_cmd_rd_1[3] == 1'b0) begin
          phy_cmd_rd_1[3] = (phy_cmd_rank_rd_1[rank_idx][3] == 1'b1);
      end
    end
  end
  
  always@(*) begin
    phy_cmd_rd_pre = (mc_shrac_dual_chn_mode == 1) ? phy_cmd_rd_2 : phy_cmd_rd_1;
    phy_cmd_rd = (mc_perrank_dfi_en == 1) ? {3'b0,(|phy_cmd_rd_pre)} : phy_cmd_rd_pre;

  end

  assign in_phy_cmd_rd = phy_cmd_rd;

 // Decode which rank is selected for the command in a single-channel configuration/mode
  always @* begin
    // Extract chip select (active rank)
    dfi_chip_sel     = ~dfi_cs_n_logical;
    dfi_chip_sel_chn = ~chn_dfi_cs_n    ;
    
    phy_cmd_rank_single_chn_mode = 2'd0;  // default placeholder value
    for (rank_idx = 0; rank_idx < pNO_OF_RANKS; rank_idx = rank_idx + 1) begin
      if (phy_cmd_rd[0]) begin
        if (dfi_chip_sel[rank_idx])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end
      else if (phy_cmd_rd[1]) begin  
        if (dfi_chip_sel[rank_idx+pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end
      else if (phy_cmd_rd[2]) begin  
        if (dfi_chip_sel[rank_idx+2*pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end 
      else begin
        if (dfi_chip_sel[rank_idx+3*pNO_OF_RANKS])
          phy_cmd_rank_single_chn_mode = rank_idx;
      end 
    end
  end

  // Decode which rank is selected for the command in a dual-channel configuration
  generate
    if (pNUM_CHANNELS == 2) begin : genblk_phy_cmd_rank

      always @* begin
        phy_cmd_rank_dual_chn_mode = 2'd0;  // default placeholder value
        for (rank_idx = 0; rank_idx < pCHN_NO_OF_RANKS; rank_idx = rank_idx + 1) begin
          if (phy_cmd_rd[0]) begin
            if (dfi_chip_sel_chn[rank_idx])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
          else if (phy_cmd_rd[1]) begin  
            if (dfi_chip_sel_chn[rank_idx+pCHN_NO_OF_RANKS])
             phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
          else if (phy_cmd_rd[2]) begin  
            if (dfi_chip_sel[rank_idx+2*pCHN_NO_OF_RANKS])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end 
          else begin
            if (dfi_chip_sel_chn[rank_idx+3*pCHN_NO_OF_RANKS])
              phy_cmd_rank_dual_chn_mode = (rank_idx << 1) + pCHN_IDX;
          end
        end
      end
    end
    else begin : genblk_phy_cmd_rank

      always @* begin
        phy_cmd_rank_dual_chn_mode = 2'd0;
      end

    end
  endgenerate

  always @* begin
    phy_cmd_rank_pre = mc_shrac_dual_chn_mode ? phy_cmd_rank_dual_chn_mode : phy_cmd_rank_single_chn_mode;
    phy_cmd_rank = mc_perrank_dfi_en ? 1'b0 : phy_cmd_rank_pre;
  end
  
  // Keep a registered version of the decoded rank value for reads
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      phy_cmd_rank_rd_reg <= 2'd0;
    end else begin
      if (dl_osc_mode == 1'b1) begin
        phy_cmd_rank_rd_reg <= 2'd0;
      end else if (|phy_cmd_rd) begin
        phy_cmd_rank_rd_reg <= phy_cmd_rank;
      end
    end
  end

  // hold the rank info used by the read command until the other read comes
  always @* begin
    in_phy_cmd_rank = |phy_cmd_rd ? phy_cmd_rank : phy_cmd_rank_rd_reg;
  end


  wire   rd_rank_change ,rd_dly_diff ;


  always @* begin
    bl_phy_cmd_rd = in_phy_cmd_rd;
    bl_phy_cmd_rank = in_phy_cmd_rank;
  end
  
  
  // compute tphy_rddata_en and pipeline the commands
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      bl_tphy_rddata_en_ff  <= {pTPHY_RDDATA_EN_WIDTH{1'b0}};
      bl_rddata_en_pipe_sel <= {4{1'b0}};
    end else begin
      
      if (|bl_phy_cmd_rd) begin
        bl_tphy_rddata_en_ff <= bl_tphy_rddata_en_adj;
      end

      bl_rddata_en_pipe_sel <= bl_rddata_en_pipe_sel_pre;
    end
  end

  always @(*) begin : bl_trddata_en_proc
    if (|bl_phy_cmd_rd) begin
      if (bl_phy_cmd_rd[1] && bl_tphy_rddata_en[0]) begin
        bl_tphy_rddata_en_adj = bl_tphy_rddata_en + 1;
      end else begin
        bl_tphy_rddata_en_adj = bl_tphy_rddata_en;
      end
    end else begin
      bl_tphy_rddata_en_adj = bl_tphy_rddata_en_ff;
    end
  end


  // RSL pipeline
  // ------------
  // select the read gating rsl values for the rank to be read
  always @* begin : proc_rank_gdqs_rsl
    rank_rd_gdqs_rsl = gdqs_rsl_per_rank[bl_phy_cmd_rank];
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_gdqs_rsl_reg
    if (ctl_rst_n == 1'b0) begin
      rank_rd_gdqs_rsl_reg <= {pDGSL_WIDTH_INT{1'b0}};
    end 
    else begin
      if (|bl_phy_cmd_rd) begin
        rank_rd_gdqs_rsl_reg <= rank_rd_gdqs_rsl;
      end 
    end
  end

  always @* begin : proc_gdqs_rsl_sel_reg
    if (|bl_phy_cmd_rd) begin
      rank_rd_gdqs_rsl_sel = rank_rd_gdqs_rsl;
    end
    else begin
      rank_rd_gdqs_rsl_sel = rank_rd_gdqs_rsl_reg;
    end
  end

  // pipeline the RSL to compensate for negative write leveling and/or low WL/RL
  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        bl_rsl_pipe[px_idx] <= {pDGSL_WIDTH_INT{1'b0}};
      end
    end
    else begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        if (ddl_train) begin
          bl_rsl_pipe[px_idx] <= {pDGSL_WIDTH_INT{1'b0}};
        end else begin
          if (px_idx >= bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1) begin
            bl_rsl_pipe[px_idx] <= rank_rd_gdqs_rsl_sel;
          end else begin
            bl_rsl_pipe[px_idx] <= bl_rsl_pipe[px_idx + 1];
          end
        end
      end
    end
  end
  
  always @(*) begin
    bl_rsl_pipe[pMAX_TPHY_RDDATA_EN] = {pDGSL_WIDTH_INT{1'b0}}; // first pipeline stage is not used
    
    bl_cmd_rsl_delayed  = bl_rsl_pipe[0];
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        bl_cmd_rd_pipe  [px_idx] <= 1'b0;
        bl_cmd_rank_pipe[px_idx] <= {pDFI_RANK_WIDTH{1'b0}};
      end
    end
    else begin
      for (px_idx = 0; px_idx < pMAX_TPHY_RDDATA_EN; px_idx = px_idx + 1) begin
        if ((|bl_phy_cmd_rd) && (px_idx == bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1)) begin
          bl_cmd_rd_pipe[px_idx] <= |bl_phy_cmd_rd;
        end else begin
          if (px_idx == (pMAX_TPHY_RDDATA_EN-1)) begin
            bl_cmd_rd_pipe[px_idx] <= 1'b0;
          end else begin
            bl_cmd_rd_pipe[px_idx] <= bl_cmd_rd_pipe[px_idx + 1];
          end
        end
        if (ddl_train) begin
          bl_cmd_rank_pipe[px_idx] <= bl_phy_cmd_rank;
        end else begin
          if (px_idx >= bl_tphy_rddata_en_adj[pTPHY_RDDATA_EN_WIDTH-1:2] - 1) begin
            bl_cmd_rank_pipe[px_idx] <= bl_phy_cmd_rank;
          end else if (px_idx < (pMAX_TPHY_RDDATA_EN - 1)) begin
            bl_cmd_rank_pipe[px_idx] <= bl_cmd_rank_pipe[px_idx + 1];
          end
        end
      end
    end
  end

  assign bl_cmd_rd_in   = bl_cmd_rd_pipe  [0];
  assign bl_cmd_rank_in = bl_cmd_rank_pipe[0];

  // read enable pipeline:
  // select a delayed version of rddata_en to account for pipelines on command path due to negative write
  // leveling or low write/read latency
  always @(*) begin : bl_rddata_en_proc
    bl_rddata_en_l_pipe[0] = in_dfi_rddata_en_l;
    bl_rddata_en_h_pipe[0] = in_dfi_rddata_en_h;
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 1; px_idx <= pMAX_RD_LOW_RWL_PIPE; px_idx = px_idx + 1) begin
        bl_rddata_en_l_pipe[px_idx] <= {2{1'b0}};
        bl_rddata_en_h_pipe[px_idx] <= {2{1'b0}};
      end
    end
    else begin
      for (px_idx = 1; px_idx <= pMAX_RD_LOW_RWL_PIPE; px_idx = px_idx + 1) begin
        bl_rddata_en_l_pipe[px_idx] <= bl_rddata_en_l_pipe[px_idx - 1];
        bl_rddata_en_h_pipe[px_idx] <= bl_rddata_en_h_pipe[px_idx - 1];
      end
    end
  end
  
  assign bl_rddata_en_l_in = bl_rddata_en_l_pipe[bl_rddata_en_pipe_sel];
  assign bl_rddata_en_h_in = bl_rddata_en_h_pipe[bl_rddata_en_pipe_sel];
  assign bl_rddata_en_in = {bl_rddata_en_h_pipe[bl_rddata_en_pipe_sel],bl_rddata_en_l_pipe[bl_rddata_en_pipe_sel]};
  

  // an optional pipeline may be placed here instead of the very input of
  // the DFI inputs to help break the long timing paths
  // No pipeline stage
  always @* begin
    bl_rddata_en = bl_rddata_en_in;
  end

  // Wire out pipelined, or not, DFI input signals
  assign bl_rddata_en_l = bl_rddata_en[1:0];
  assign bl_rddata_en_h = bl_rddata_en[3:2];

  always @(*) begin
    bl_rddata_en_l_array_px  [0] = bl_rddata_en_l;
    bl_rddata_en_h_array_px  [0] = bl_rddata_en_h;
    bl_cmd_rd_px   [0]    = bl_cmd_rd_in;
    bl_cmd_rank_px [0]    = bl_cmd_rank_in;
  end

  always @(posedge ctl_clk, negedge ctl_rst_n) begin : m81_bl_rddata_en_lh_array
    integer px_idx;

    if (ctl_rst_n == 1'b0) begin
      for (px_idx = 1; px_idx <= 9; px_idx = px_idx + 1) begin
        bl_rddata_en_l_array_px  [px_idx] <=  2'd0;
        bl_rddata_en_h_array_px  [px_idx] <=  2'd0;
        bl_cmd_rd_px   [px_idx]    <= 2'b0;
        bl_cmd_rank_px [px_idx]    <= 1'b0;
      end
    end
    else begin
      for (px_idx = 1; px_idx <= 9; px_idx = px_idx + 1) begin
        bl_rddata_en_l_array_px  [px_idx] <= bl_rddata_en_l_array_px  [px_idx - 1];
        bl_rddata_en_h_array_px  [px_idx] <= bl_rddata_en_h_array_px  [px_idx - 1];
        bl_cmd_rd_px   [px_idx]    <= bl_cmd_rd_px   [px_idx - 1];
        bl_cmd_rank_px [px_idx]    <= bl_cmd_rank_px [px_idx - 1];
      end
    end
  end
  
  // register incoming dfi_rddata_en for detecting the start of rddata_en
  always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_bl_rddata_en_pipe
    if (ctl_rst_n == 1'b0) begin
      bl_rddata_en_ff <= {2{1'b0}};
    end
    else begin
      bl_rddata_en_ff <= bl_rddata_en;
    end
  end

always @(*) begin : proc_bl_cmd_rsl_delay
        case (bl_cmd_rsl_delayed) 
          // no data shift required
          pRSL_PLUS_ZERO: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[0];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
          // shift data by +1 SDR cycle
          pRSL_PLUS_ONE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[1];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
          // shift data by +2 SDR cycle
          pRSL_PLUS_TWO: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[1];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[1];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [1];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [1];
          end
          // shift data by +3 SDR cycle
          pRSL_PLUS_THREE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[2];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[1];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [1];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [1];
          end
          // shift data by +4 SDR cycle
          pRSL_PLUS_FOUR: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[2];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[2];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [2];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [2];
          end
          // shift data by +5 SDR cycle
          pRSL_PLUS_FIVE: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[3];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[2];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [2];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [2];
          end
          // shift data by +6 SDR cycle
          pRSL_PLUS_SIX: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[3];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[3];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [3];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [3];
          end
          // shift data by +7 SDR cycle
          pMAX_RSL: begin
            bl_rddata_en_l_dt =  bl_rddata_en_h_array_px[4];
            bl_rddata_en_h_dt =  bl_rddata_en_l_array_px[3];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [3];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [3];
          end
          default: begin
            bl_rddata_en_l_dt =  bl_rddata_en_l_array_px[0];
            bl_rddata_en_h_dt =  bl_rddata_en_h_array_px[0];
            bl_cmd_rd_dt      =  bl_cmd_rd_px   [0];
            bl_cmd_rank_dt    =  bl_cmd_rank_px [0];
          end
        endcase
  end  
                    
  always @(*) begin : bl_rddata_en_start_proc
    integer bl_idx;
    bl_rddata_en_delayed = {bl_rddata_en_h_dt,bl_rddata_en_l_dt};
    bl_cmd_rank_delayed = bl_cmd_rank_dt;
  end

  assign bl_dfi_rdrank       = bl_cmd_rank_delayed;

  assign gdqs_ddr_shift = gdqs_ddr_shift_per_rank[bl_dfi_rdrank];

  assign gdqs_ddr_shift_qs_en_pre1 = ((next_state != IDLE) || (curr_state != IDLE) || (ctl_qs_en_new != 8'hff)) ? gdqs_ddr_shift : 2'b00; 
  
  assign gdqs_ddr_shift_qs_en = gdqs_ddr_shift_qs_en_pre1 ;

  assign bl_ctl_qs_en = ctl_qs_en_new;


always @* begin
    case (curr_state)
      //------------------------------------------------------------------------
      IDLE: begin
        if ( (bl_rddata_en_delayed == 4'b1110) || (bl_rddata_en_delayed == 4'b1100) || (bl_rddata_en_delayed == 4'b1000) || (bl_rddata_en_delayed == 4'b1111) )
          next_state = PRE;
        else
          next_state = IDLE;
      end
      //------------------------------------------------------------------------
      PRE: begin
        if (bl_rddata_en_delayed == 4'b1111) 
          next_state = DATA;
        else if ( (bl_rddata_en_delayed == 4'b0000) || (bl_rddata_en_delayed == 4'b0001) || (bl_rddata_en_delayed == 4'b0011) || (bl_rddata_en_delayed == 4'b0111) )
          next_state = POST;
        else
          next_state = PRE;
      end
      //------------------------------------------------------------------------
      DATA: begin
        if (bl_rddata_en_delayed == 4'b1111)
          next_state = DATA;
        else if( (bl_rddata_en_delayed == 4'b0000) || (bl_rddata_en_delayed == 4'b0001) || (bl_rddata_en_delayed == 4'b0011) || (bl_rddata_en_delayed == 4'b0111) )
          next_state = POST;
        else
          next_state = PRE;
      end
      //------------------------------------------------------------------------
      POST: begin
        if(bl_rddata_en_delayed == 4'b0000) 
          next_state = IDLE;
        else
          next_state = PRE;
      end
      default: begin
        next_state = IDLE;
      end
    endcase
  end


always @(*) begin
  if ((next_state==PRE) && (curr_state==IDLE)) begin
  case (bl_rddata_en_delayed) 
    4'b1111 : gate_en = 8'b0000_0001;
    4'b1110 : gate_en = 8'b0000_0111;
    4'b1100 : gate_en = 8'b0001_1111;
    4'b1000 : gate_en = 8'b0111_1111;
    default : gate_en = 8'b1111_1111;
  endcase
  end else if (((next_state==DATA) && (curr_state==PRE)) || ((next_state==DATA) && (curr_state==DATA)) || ((next_state==DATA) && (curr_state==POST)) ) begin
  gate_en = 8'b0000_0000;
  end else if (((next_state==POST) && (curr_state==PRE)) || ((next_state==POST) && (curr_state==DATA))) begin
  case (bl_rddata_en_delayed) 
    4'b0000 : gate_en = 8'b1111_1111;
    4'b0001 : gate_en = 8'b1111_1100;
    4'b0011 : gate_en = 8'b1111_0000;
    4'b0111 : gate_en = 8'b1100_0000;
    default : gate_en = 8'b1111_1111;
  endcase
  end else if (((next_state==PRE) && (curr_state==PRE)) || ((next_state==PRE) && (curr_state==POST)) || ((next_state==PRE) && (curr_state==DATA))) begin
  case (bl_rddata_en_delayed) 
    4'b1111 : gate_en = 8'b0000_0001;
    4'b1110 : gate_en = 8'b0000_0111;
    4'b1101 : gate_en = 8'b0001_1100;
    4'b1100 : gate_en = 8'b0001_1111;
    4'b1011 : gate_en = 8'b0111_0000;
    4'b1001 : gate_en = 8'b0111_1100;
    4'b1000 : gate_en = 8'b0111_1111;
    default : gate_en = 8'b1111_1111;
  endcase  
  end else if ((next_state==POST) && (curr_state==IDLE)) begin
  gate_en = 8'b1111_1111;  
  end else begin
  gate_en = 8'b1111_1111;  
  end
end

  always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      gate_en_r6      <= 6'h3f;
      curr_state      <= IDLE;
    end
    else begin
      gate_en_r6     <= gate_en[7:2];
      curr_state     <= next_state;
    end
  end

 always @(posedge ctl_clk or negedge ctl_rst_n) begin
    if (ctl_rst_n == 1'b0) begin
      post_shift_qs_en_3      <= 3'h7;
    end
    else begin
      post_shift_qs_en_3     <= bl_ctl_qs_en[7:5];
    end
  end
  


  assign ctl_qs_en_new = {gate_en[1:0], gate_en_r6};

  assign ctl_qs_en =  (gdqs_ddr_shift_qs_en == 2'b01) ? {bl_ctl_qs_en[6:0], post_shift_qs_en_3[2]} :
                      (gdqs_ddr_shift_qs_en == 2'b10) ? {bl_ctl_qs_en[5:0], post_shift_qs_en_3[2:1]} :
                      (gdqs_ddr_shift_qs_en == 2'b11) ? {bl_ctl_qs_en[4:0], post_shift_qs_en_3[2:0]} :
                                                      {bl_ctl_qs_en[7:0]};

  // No pipeline stage
  always @(*) begin
    ctl_qs_en_px       [0] = ctl_qs_en;
  end

  // optional pipeline stages at the outputs to PHY
  generate
    if (pPIPE_DFI2PHY > 0) begin : genblk_dfi2phy_pipe
      always @(posedge ctl_clk, negedge ctl_rst_n) begin : proc_pipe
        integer pidx; 

        if (ctl_rst_n == 1'b0) begin
          for (pidx = 1; pidx <= pPIPE_DFI2PHY; pidx = pidx + 1) begin
            ctl_qs_en_px       [pidx] <= {               4{1'b0}};
          end
        end
        else begin
          for (pidx = 1; pidx <= pPIPE_DFI2PHY; pidx = pidx + 1) begin
            ctl_qs_en_px       [pidx] <= ctl_qs_en_px       [pidx - 1];
          end
        end
      end  // always @(posedge ...

    end
  endgenerate

// Wire out pipelined, or not, DFI outputs to the PHY
always @(*) begin
    phy_bl_ctl_qs_en  = ctl_qs_en_px[pPIPE_DFI2PHY];
end

endmodule

`endif

`default_nettype wire  // restore implicit data types


//***************************************************************************
// SOPC TOP Modules
//***************************************************************************
`timescale 1ns / 1ps

module ph1_logic_sopc_top  #(
    parameter CLOCK_RATE = 25_000_000
) (

    input        cpu_clk,
    input        cpu_rst_n,

    output  [27:0]   fpga_apb_PADDR   ,
    output  [ 0:0]   fpga_apb_PSEL    ,
    output           fpga_apb_PENABLE ,
    input            fpga_apb_PREADY  ,
    output           fpga_apb_PWRITE  ,
    output  [31:0]   fpga_apb_PWDATA  ,
    input   [31:0]   fpga_apb_PRDATA  ,
    input            fpga_apb_PSLVERR ,

    output           uart_txd ,
    input            uart_rxd ,

    input            user_update      ,
    input   [ 7:0]   user_ram_addr    ,
    input            user_ram_wr_en   ,
    input            user_ram_rd_en   ,
    input   [31:0]   user_ram_wr_data ,
    output  [31:0]   user_ram_rd_data ,

    input   [31:0]   user_set         ,
    output  [31:0]   user_led         ,

    output           pzq_cal_done_o   ,
    input            pzq_cal_done_i   ,

    output           mcu_busy         ,
    output           ddr_init_cal_done

);


wire             cpu_areset            ;
wire             cpu_aresetn           ;

wire    [31:0]   io_gpioA_user         ;
wire    [31:0]   io_gpioA_read         ; // synthesis keep
wire    [31:0]   io_gpioA_write        ;
wire             user_update_pulse     ;
wire             user_update_clr_pulse ;

reg     [ 1:0]   user_update_r         ;
reg              user_update_int       ;
wire             user_update_clr       ;
reg     [ 1:0]   user_update_clr_r     ;

assign cpu_areset  = ~cpu_rst_n ;
assign cpu_aresetn =  cpu_rst_n ;

ph1_logic_SOPC  #(
    .CLOCK_RATE ( CLOCK_RATE )
) u_cpu(
    .io_clk             ( cpu_clk          ),
    .io_rst             ( cpu_areset       ),
    .io_gpio_user       ( io_gpioA_user    ),
    .io_gpio_read       ( io_gpioA_read    ),
    .io_gpio_write      ( io_gpioA_write   ),
    .io_uart_txd        ( uart_txd         ),
    .io_uart_rxd        ( uart_rxd         ),
    .io_apb_PADDR       ( fpga_apb_PADDR   ),
    .io_apb_PSEL        ( fpga_apb_PSEL    ),
    .io_apb_PENABLE     ( fpga_apb_PENABLE ),
    .io_apb_PREADY      ( fpga_apb_PREADY  ),
    .io_apb_PWRITE      ( fpga_apb_PWRITE  ),
    .io_apb_PWDATA      ( fpga_apb_PWDATA  ),
    .io_apb_PRDATA      ( fpga_apb_PRDATA  ),
    .io_apb_PSLVERR     ( fpga_apb_PSLVERR ),

    .user_ram_addr      ( user_ram_addr    ),
    .user_ram_wr_en     ( user_ram_wr_en   ),
    .user_ram_rd_en     ( user_ram_rd_en   ),
    .user_ram_wr_data   ( user_ram_wr_data ),
    .user_ram_rd_data   ( user_ram_rd_data ),

    .io_interrupt       ( 1'b0             ),
    .io_interruptClear  (                  )
);

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_r <= 2'b00 ;
    else
        user_update_r <= {user_update_r[0], user_update};
end

assign user_update_pulse = user_update_r[0] & (~user_update_r[1]);

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_clr_r <= 2'b00 ;
    else
        user_update_clr_r <= {user_update_clr_r[0], user_update_clr};
end

assign user_update_clr_pulse = user_update_clr_r[0] & (~user_update_clr_r[1]);

always @ ( posedge cpu_clk or posedge cpu_areset )
begin
    if ( cpu_areset )
        user_update_int <= 1'b0 ;
    else if ( user_update_pulse == 1'b1 )
        user_update_int <= 1'b1 ;
    else if ( user_update_clr_pulse == 1'b1 )
        user_update_int <= 1'b0 ;
    else
        user_update_int <= user_update_int ;
end

`ifdef PH1_DDR_SIM
assign io_gpioA_read = 32'h01_00_00_00 | (pzq_cal_done_i << 27) | (user_update_int << 29);
`else
assign io_gpioA_read = 32'h00_00_00_00 | (pzq_cal_done_i << 27) | (user_update_int << 29);
`endif

assign pzq_cal_done_o    = io_gpioA_write[27];
assign user_update_clr   = io_gpioA_write[29];
assign mcu_busy          = io_gpioA_write[30];
assign ddr_init_cal_done = io_gpioA_write[31];
assign user_led          = io_gpioA_write;
assign io_gpioA_user     = user_set      ;

endmodule


`timescale 1ps / 1ps

module ph1_logic_SOPC #(
    parameter CLOCK_RATE = 25_000_000
)(
    input               io_clk,
    input               io_rst,

    input      [31:0]   io_gpio_user,
    input      [31:0]   io_gpio_read,
    output     [31:0]   io_gpio_write,

    output              io_uart_txd,
    input               io_uart_rxd,

    output     [27:0]   io_apb_PADDR,
    output     [ 0:0]   io_apb_PSEL,
    output              io_apb_PENABLE,
    input               io_apb_PREADY,
    output              io_apb_PWRITE,
    output     [31:0]   io_apb_PWDATA,
    input      [31:0]   io_apb_PRDATA,
    input               io_apb_PSLVERR,

    input      [ 7:0]   user_ram_addr    ,
    input               user_ram_wr_en   ,
    input               user_ram_rd_en   ,
    input      [31:0]   user_ram_wr_data ,
    output     [31:0]   user_ram_rd_data ,

    input               io_interrupt,
    output              io_interruptClear
);

reg                 _zz_7_;
reg        [31:0]   _zz_12_;
wire                io_rst_sync ;

wire                system_mainBusArbiter_io_iBus_cmd_ready;
wire                system_mainBusArbiter_io_iBus_rsp_valid;
wire                system_mainBusArbiter_io_iBus_rsp_payload_error;
wire       [31:0]   system_mainBusArbiter_io_iBus_rsp_payload_inst;
wire                system_mainBusArbiter_io_dBus_cmd_ready;
wire                system_mainBusArbiter_io_dBus_rsp_ready;
wire                system_mainBusArbiter_io_dBus_rsp_error;
wire       [31:0]   system_mainBusArbiter_io_dBus_rsp_data;
wire                system_mainBusArbiter_io_masterBus_cmd_valid;
wire                system_mainBusArbiter_io_masterBus_cmd_payload_write;
wire       [31:0]   system_mainBusArbiter_io_masterBus_cmd_payload_address;
wire       [31:0]   system_mainBusArbiter_io_masterBus_cmd_payload_data;
wire       [3:0]    system_mainBusArbiter_io_masterBus_cmd_payload_mask;
wire                system_cpu_iBus_cmd_valid;
wire       [31:0]   system_cpu_iBus_cmd_payload_pc;
wire                system_cpu_debug_resetOut;
wire                system_cpu_dBus_cmd_valid;
wire                system_cpu_dBus_cmd_payload_wr;
wire       [31:0]   system_cpu_dBus_cmd_payload_address;
wire       [31:0]   system_cpu_dBus_cmd_payload_data;
wire       [1:0]    system_cpu_dBus_cmd_payload_size;

reg                 system_ram_io_bus_cmd_valid;
wire                system_ram_io_bus_cmd_ready;
wire                system_ram_io_bus_rsp_valid;
wire       [31:0]   system_ram_io_bus_rsp_payload_data;
wire                system_apbBridge_io_pipelinedMemoryBus_cmd_ready;
wire                system_apbBridge_io_pipelinedMemoryBus_rsp_valid;
wire       [31:0]   system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data;

wire       [27:0]   apbBridge_mst_PADDR;
wire       [0:0]    apbBridge_mst_PSEL;
wire                apbBridge_mst_PENABLE;
wire                apbBridge_mst_PWRITE;
wire       [31:0]   apbBridge_mst_PWDATA;
wire                apbBridge_mst_PREADY;
wire       [31:0]   apbBridge_mst_PRDATA;
wire                apbBridge_mst_PSLVERR;

wire                system_timerCtrl_io_apb_PREADY;
wire       [31:0]   system_timerCtrl_io_apb_PRDATA;
wire                system_timerCtrl_io_apb_PSLVERROR;
wire                system_timerCtrl_io_interrupt;

wire                system_uartCtrl_io_interrupt;
wire                system_interruptCtrl_io_apb_PREADY;
wire       [31:0]   system_interruptCtrl_io_apb_PRDATA;
wire                system_interruptCtrl_io_apb_PSLVERROR;
wire                system_interruptCtrl_io_timerInterruptClear;
wire                system_interruptCtrl_io_externalInterruptClear;
wire                system_interruptCtrl_io_softwareInterruptClear;

wire       [27:0]   apb3decoder_mst_PADDR   ;
wire       [4:0]    apb3decoder_mst_PSEL    ;
wire                apb3decoder_mst_PENABLE ;
wire                apb3decoder_mst_PWRITE  ;
wire       [31:0]   apb3decoder_mst_PWDATA  ;
wire                apb3decoder_mst_PREADY  ;
wire       [31:0]   apb3decoder_mst_PRDATA  ;
wire                apb3decoder_mst_PSLVERR ;

wire       [27:0]   apb3Router_0_PADDR;
wire       [0:0]    apb3Router_0_PSEL;
wire                apb3Router_0_PENABLE;
wire                apb3Router_0_PWRITE;
wire       [31:0]   apb3Router_0_PWDATA;
wire                apb3Router_0_PREADY;
wire       [31:0]   apb3Router_0_PRDATA;
wire                apb3Router_0_PSLVERR;

wire       [27:0]   apb3Router_1_PADDR;
wire       [0:0]    apb3Router_1_PSEL;
wire                apb3Router_1_PENABLE;
wire                apb3Router_1_PWRITE;
wire       [31:0]   apb3Router_1_PWDATA;
wire                apb3Router_1_PREADY;
wire       [31:0]   apb3Router_1_PRDATA;
wire                apb3Router_1_PSLVERR;

wire       [27:0]   apb3Router_2_PADDR;
wire       [0:0]    apb3Router_2_PSEL;
wire                apb3Router_2_PENABLE;
wire                apb3Router_2_PWRITE;
wire       [31:0]   apb3Router_2_PWDATA;
wire                apb3Router_2_PREADY;
wire       [31:0]   apb3Router_2_PRDATA;
wire                apb3Router_2_PSLVERR;

wire       [27:0]   apb3Router_3_PADDR;
wire       [0:0]    apb3Router_3_PSEL;
wire                apb3Router_3_PENABLE;
wire                apb3Router_3_PWRITE;
wire       [31:0]   apb3Router_3_PWDATA;
wire                apb3Router_3_PREADY;
wire       [31:0]   apb3Router_3_PRDATA;
wire                apb3Router_3_PSLVERR;

wire       [27:0]   apb3Router_4_PADDR;
wire       [0:0]    apb3Router_4_PSEL;
wire                apb3Router_4_PENABLE;
wire                apb3Router_4_PWRITE;
wire       [31:0]   apb3Router_4_PWDATA;
wire                apb3Router_4_PREADY;
wire       [31:0]   apb3Router_4_PRDATA;
wire                apb3Router_4_PSLVERR;


wire                _zz_14_;
wire                _zz_15_;
reg        [5:0]    resetCtrl_dly_cnt = 6'h0 ;
reg                 resetCtrl_mainClkResetUnbuffered;
reg                 resetCtrl_mainClkReset;
reg                 resetCtrl_systemReset;
wire                system_timerInterrupt;
wire                system_externalInterrupt;
wire                system_softwareInterrupt;
wire                system_timerInterruptClear;
wire                system_externalInterruptClear;
wire                system_softwareInterruptClear;
reg        [1:0]    system_interruptType;
wire                system_cpu_dBus_cmd_halfPipe_valid;
wire                system_cpu_dBus_cmd_halfPipe_ready;
wire                system_cpu_dBus_cmd_halfPipe_payload_wr;
wire       [31:0]   system_cpu_dBus_cmd_halfPipe_payload_address;
wire       [31:0]   system_cpu_dBus_cmd_halfPipe_payload_data;
wire       [1:0]    system_cpu_dBus_cmd_halfPipe_payload_size;
reg                 system_cpu_dBus_cmd_halfPipe_regs_valid;
reg                 system_cpu_dBus_cmd_halfPipe_regs_ready;
reg                 system_cpu_dBus_cmd_halfPipe_regs_payload_wr;
reg        [31:0]   system_cpu_dBus_cmd_halfPipe_regs_payload_address;
reg        [31:0]   system_cpu_dBus_cmd_halfPipe_regs_payload_data;
reg        [1:0]    system_cpu_dBus_cmd_halfPipe_regs_payload_size;
reg                 system_cpu_debug_resetOut_regNext;
wire                system_mainBusDecoder_logic_masterPipelined_cmd_valid;
reg                 system_mainBusDecoder_logic_masterPipelined_cmd_ready;
wire                system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_cmd_payload_address;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_cmd_payload_data;
wire       [3:0]    system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask;
wire                system_mainBusDecoder_logic_masterPipelined_rsp_valid;
wire       [31:0]   system_mainBusDecoder_logic_masterPipelined_rsp_payload_data;
wire                system_mainBusDecoder_logic_hits_0;

wire                system_mainBusDecoder_logic_hits_1;
wire                _zz_4_;
wire                system_mainBusDecoder_logic_noHit;
reg                 system_mainBusDecoder_logic_rspPending;
reg                 system_mainBusDecoder_logic_rspNoHit;
reg                 system_mainBusDecoder_logic_rspSourceId;

assign _zz_14_ =  system_mainBusDecoder_logic_rspPending && (~system_mainBusDecoder_logic_masterPipelined_rsp_valid);
assign _zz_15_ = ~system_cpu_dBus_cmd_halfPipe_regs_valid;

ph1_logic_BufferCC io_rst_buffercc (
    .io_dataIn     (io_rst      ), //i
    .io_dataOut    (io_rst_sync ), //o
    .io_clk        (io_clk      )  //i
);

//-------- Start : system reset generation --------//
always @ (posedge io_clk) begin
    if( io_rst_sync )begin
        resetCtrl_dly_cnt <= 6'h0;
    end else if (resetCtrl_dly_cnt == 6'h3f) begin
        resetCtrl_dly_cnt <= resetCtrl_dly_cnt ;
    end else begin
        resetCtrl_dly_cnt <= resetCtrl_dly_cnt + 1'b1;
    end
end

always @ (*) begin
    if ( resetCtrl_dly_cnt == 6'h3f ) begin
        resetCtrl_mainClkResetUnbuffered = 1'b0;
    end else begin
        resetCtrl_mainClkResetUnbuffered = 1'b1;
    end
end

always @ (posedge io_clk) begin
    resetCtrl_mainClkReset <= resetCtrl_mainClkResetUnbuffered;
    if(system_cpu_debug_resetOut_regNext)begin
          resetCtrl_systemReset <= 1'b1;
    end else begin
        resetCtrl_systemReset  <= resetCtrl_mainClkResetUnbuffered;
    end
end
//-------- End : system reset generation --------//




ph1_logic_mcu system_cpu (
    .iBus_cmd_valid                   (system_cpu_iBus_cmd_valid                             ), //o
    .iBus_cmd_ready                   (system_mainBusArbiter_io_iBus_cmd_ready               ), //i
    .iBus_cmd_payload_pc              (system_cpu_iBus_cmd_payload_pc                        ), //o
    .iBus_rsp_valid                   (system_mainBusArbiter_io_iBus_rsp_valid               ), //i
    .iBus_rsp_payload_error           (system_mainBusArbiter_io_iBus_rsp_payload_error       ), //i
    .iBus_rsp_payload_inst            (system_mainBusArbiter_io_iBus_rsp_payload_inst        ), //i

    .timerInterrupt                   (system_timerInterrupt                                 ), //i
    .externalInterrupt                (system_externalInterrupt                              ), //i
    .softwareInterrupt                (system_softwareInterrupt                              ), //i

    .debug_bus_cmd_valid              (  1'b0  ), //i
    .debug_bus_cmd_ready              (        ), //o
    .debug_bus_cmd_payload_wr         (  1'b0  ), //i
    .debug_bus_cmd_payload_address    (  8'h0  ), //i
    .debug_bus_cmd_payload_data       ( 32'h0  ), //i
    .debug_bus_rsp_data               (        ), //o
    .debug_resetOut                   (system_cpu_debug_resetOut ), //o

    .dBus_cmd_valid                   (system_cpu_dBus_cmd_valid                             ), //o
    .dBus_cmd_ready                   (system_cpu_dBus_cmd_halfPipe_regs_ready               ), //i
    .dBus_cmd_payload_wr              (system_cpu_dBus_cmd_payload_wr                        ), //o
    .dBus_cmd_payload_address         (system_cpu_dBus_cmd_payload_address                   ), //o
    .dBus_cmd_payload_data            (system_cpu_dBus_cmd_payload_data                      ), //o
    .dBus_cmd_payload_size            (system_cpu_dBus_cmd_payload_size[1:0]                 ), //o
    .dBus_rsp_ready                   (system_mainBusArbiter_io_dBus_rsp_ready               ), //i
    .dBus_rsp_error                   (system_mainBusArbiter_io_dBus_rsp_error               ), //i
    .dBus_rsp_data                    (system_mainBusArbiter_io_dBus_rsp_data                ), //i

    .io_clk                           (io_clk                                                ), //i
    .resetCtrl_systemReset            (resetCtrl_systemReset                                 ), //i
    .resetCtrl_mainClkReset           (resetCtrl_mainClkReset                                )  //i
);


ph1_logic_MuraxMasterArbiter system_mainBusArbiter (
    .io_iBus_cmd_valid                   (system_cpu_iBus_cmd_valid                                           ), //i
    .io_iBus_cmd_ready                   (system_mainBusArbiter_io_iBus_cmd_ready                             ), //o
    .io_iBus_cmd_payload_pc              (system_cpu_iBus_cmd_payload_pc[31:0]                                ), //i
    .io_iBus_rsp_valid                   (system_mainBusArbiter_io_iBus_rsp_valid                             ), //o
    .io_iBus_rsp_payload_error           (system_mainBusArbiter_io_iBus_rsp_payload_error                     ), //o
    .io_iBus_rsp_payload_inst            (system_mainBusArbiter_io_iBus_rsp_payload_inst[31:0]                ), //o
    .io_dBus_cmd_valid                   (system_cpu_dBus_cmd_halfPipe_valid                                  ), //i
    .io_dBus_cmd_ready                   (system_mainBusArbiter_io_dBus_cmd_ready                             ), //o
    .io_dBus_cmd_payload_wr              (system_cpu_dBus_cmd_halfPipe_payload_wr                             ), //i
    .io_dBus_cmd_payload_address         (system_cpu_dBus_cmd_halfPipe_payload_address[31:0]                  ), //i
    .io_dBus_cmd_payload_data            (system_cpu_dBus_cmd_halfPipe_payload_data[31:0]                     ), //i
    .io_dBus_cmd_payload_size            (system_cpu_dBus_cmd_halfPipe_payload_size[1:0]                      ), //i
    .io_dBus_rsp_ready                   (system_mainBusArbiter_io_dBus_rsp_ready                             ), //o
    .io_dBus_rsp_error                   (system_mainBusArbiter_io_dBus_rsp_error                             ), //o
    .io_dBus_rsp_data                    (system_mainBusArbiter_io_dBus_rsp_data[31:0]                        ), //o
    .io_masterBus_cmd_valid              (system_mainBusArbiter_io_masterBus_cmd_valid                        ), //o
    .io_masterBus_cmd_ready              (system_mainBusDecoder_logic_masterPipelined_cmd_ready               ), //i
    .io_masterBus_cmd_payload_write      (system_mainBusArbiter_io_masterBus_cmd_payload_write                ), //o
    .io_masterBus_cmd_payload_address    (system_mainBusArbiter_io_masterBus_cmd_payload_address[31:0]        ), //o
    .io_masterBus_cmd_payload_data       (system_mainBusArbiter_io_masterBus_cmd_payload_data[31:0]           ), //o
    .io_masterBus_cmd_payload_mask       (system_mainBusArbiter_io_masterBus_cmd_payload_mask[3:0]            ), //o
    .io_masterBus_rsp_valid              (system_mainBusDecoder_logic_masterPipelined_rsp_valid               ), //i
    .io_masterBus_rsp_payload_data       (system_mainBusDecoder_logic_masterPipelined_rsp_payload_data[31:0]  ), //i
    .io_clk                              (io_clk                                                              ), //i
    .resetCtrl_systemReset               (resetCtrl_systemReset                                               )  //i
);

ph1_logic_AlcPipelinedMemoryBusRam system_ram (
    .io_bus_cmd_valid              (system_ram_io_bus_cmd_valid                                            ), //i
    .io_bus_cmd_ready              (system_ram_io_bus_cmd_ready                                            ), //o
    .io_bus_cmd_payload_write      (system_mainBusDecoder_logic_masterPipelined_cmd_payload_write          ), //i
    .io_bus_cmd_payload_address    (system_mainBusDecoder_logic_masterPipelined_cmd_payload_address        ), //i
    .io_bus_cmd_payload_data       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_data           ), //i
    .io_bus_cmd_payload_mask       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask           ), //i
    .io_bus_rsp_valid              (system_ram_io_bus_rsp_valid                                            ), //o
    .io_bus_rsp_payload_data       (system_ram_io_bus_rsp_payload_data                                     ), //o

    .io_clk                        (io_clk                                                                 ), //i
    .resetCtrl_systemReset         (resetCtrl_systemReset                                                  )  //i
);

ph1_logic_PipelinedMemoryBusToApbBridge system_apbBridge (
    .io_pipelinedMemoryBus_cmd_valid              (_zz_7_                                                          ), //i
    .io_pipelinedMemoryBus_cmd_ready              (system_apbBridge_io_pipelinedMemoryBus_cmd_ready                ), //o
    .io_pipelinedMemoryBus_cmd_payload_write      (_zz_4_                                                          ), //i
    .io_pipelinedMemoryBus_cmd_payload_address    (system_mainBusDecoder_logic_masterPipelined_cmd_payload_address ), //i
    .io_pipelinedMemoryBus_cmd_payload_data       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_data    ), //i
    .io_pipelinedMemoryBus_cmd_payload_mask       (system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask    ), //i
    .io_pipelinedMemoryBus_rsp_valid              (system_apbBridge_io_pipelinedMemoryBus_rsp_valid                ), //o
    .io_pipelinedMemoryBus_rsp_payload_data       (system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data         ), //o

    .io_apb_PADDR                                 ( apbBridge_mst_PADDR   ), //o
    .io_apb_PSEL                                  ( apbBridge_mst_PSEL    ), //o
    .io_apb_PENABLE                               ( apbBridge_mst_PENABLE ), //o
    .io_apb_PREADY                                ( apbBridge_mst_PREADY  ), //i
    .io_apb_PWRITE                                ( apbBridge_mst_PWRITE  ), //o
    .io_apb_PWDATA                                ( apbBridge_mst_PWDATA  ), //o
    .io_apb_PRDATA                                ( apbBridge_mst_PRDATA  ), //i
    .io_apb_PSLVERROR                             ( apbBridge_mst_PSLVERR ), //i

    .io_clk                                       ( io_clk                ), //i
    .resetCtrl_systemReset                        ( resetCtrl_systemReset )  //i
);


ph1_logic_Apb3Decoder io_apb_decoder (
    .io_input_PADDR         ( apbBridge_mst_PADDR   ), //i
    .io_input_PSEL          ( apbBridge_mst_PSEL    ), //i
    .io_input_PENABLE       ( apbBridge_mst_PENABLE ), //i
    .io_input_PREADY        ( apbBridge_mst_PREADY  ), //o
    .io_input_PWRITE        ( apbBridge_mst_PWRITE  ), //i
    .io_input_PWDATA        ( apbBridge_mst_PWDATA  ), //i
    .io_input_PRDATA        ( apbBridge_mst_PRDATA  ), //o
    .io_input_PSLVERROR     ( apbBridge_mst_PSLVERR ), //o

    .io_output_PADDR        ( apb3decoder_mst_PADDR   ), //o
    .io_output_PSEL         ( apb3decoder_mst_PSEL    ), //o
    .io_output_PENABLE      ( apb3decoder_mst_PENABLE ), //o
    .io_output_PREADY       ( apb3decoder_mst_PREADY  ), //i
    .io_output_PWRITE       ( apb3decoder_mst_PWRITE  ), //o
    .io_output_PWDATA       ( apb3decoder_mst_PWDATA  ), //o
    .io_output_PRDATA       ( apb3decoder_mst_PRDATA  ), //i
    .io_output_PSLVERROR    ( apb3decoder_mst_PSLVERR )  //i
);

ph1_logic_Apb3Router apb3Router_1 (
    .io_input_PADDR            ( apb3decoder_mst_PADDR   ), //i
    .io_input_PSEL             ( apb3decoder_mst_PSEL    ), //i
    .io_input_PENABLE          ( apb3decoder_mst_PENABLE ), //i
    .io_input_PREADY           ( apb3decoder_mst_PREADY  ), //o
    .io_input_PWRITE           ( apb3decoder_mst_PWRITE  ), //i
    .io_input_PWDATA           ( apb3decoder_mst_PWDATA  ), //i
    .io_input_PRDATA           ( apb3decoder_mst_PRDATA  ), //o
    .io_input_PSLVERROR        ( apb3decoder_mst_PSLVERR ), //o

    .io_outputs_0_PADDR        ( apb3Router_0_PADDR   ), //o
    .io_outputs_0_PSEL         ( apb3Router_0_PSEL    ), //o
    .io_outputs_0_PENABLE      ( apb3Router_0_PENABLE ), //o
    .io_outputs_0_PREADY       ( apb3Router_0_PREADY  ), //i
    .io_outputs_0_PWRITE       ( apb3Router_0_PWRITE  ), //o
    .io_outputs_0_PWDATA       ( apb3Router_0_PWDATA  ), //o
    .io_outputs_0_PRDATA       ( apb3Router_0_PRDATA  ), //i
    .io_outputs_0_PSLVERROR    ( apb3Router_0_PSLVERR ), //i

    .io_outputs_1_PADDR        ( apb3Router_1_PADDR   ), //o
    .io_outputs_1_PSEL         ( apb3Router_1_PSEL    ), //o
    .io_outputs_1_PENABLE      ( apb3Router_1_PENABLE ), //o
    .io_outputs_1_PREADY       ( apb3Router_1_PREADY  ), //i
    .io_outputs_1_PWRITE       ( apb3Router_1_PWRITE  ), //o
    .io_outputs_1_PWDATA       ( apb3Router_1_PWDATA  ), //o
    .io_outputs_1_PRDATA       ( apb3Router_1_PRDATA  ), //i
    .io_outputs_1_PSLVERROR    ( apb3Router_1_PSLVERR ), //i

    .io_outputs_2_PADDR        ( apb3Router_2_PADDR   ), //o
    .io_outputs_2_PSEL         ( apb3Router_2_PSEL    ), //o
    .io_outputs_2_PENABLE      ( apb3Router_2_PENABLE ), //o
    .io_outputs_2_PREADY       ( apb3Router_2_PREADY  ), //i
    .io_outputs_2_PWRITE       ( apb3Router_2_PWRITE  ), //o
    .io_outputs_2_PWDATA       ( apb3Router_2_PWDATA  ), //o
    .io_outputs_2_PRDATA       ( apb3Router_2_PRDATA  ), //i
    .io_outputs_2_PSLVERROR    ( apb3Router_2_PSLVERR ), //i

    .io_outputs_3_PADDR        ( apb3Router_3_PADDR   ), //o
    .io_outputs_3_PSEL         ( apb3Router_3_PSEL    ), //o
    .io_outputs_3_PENABLE      ( apb3Router_3_PENABLE ), //o
    .io_outputs_3_PREADY       ( apb3Router_3_PREADY  ), //i
    .io_outputs_3_PWRITE       ( apb3Router_3_PWRITE  ), //o
    .io_outputs_3_PWDATA       ( apb3Router_3_PWDATA  ), //o
    .io_outputs_3_PRDATA       ( apb3Router_3_PRDATA  ), //i
    .io_outputs_3_PSLVERROR    ( apb3Router_3_PSLVERR ), //i

    .io_outputs_4_PADDR        ( apb3Router_4_PADDR   ), //o
    .io_outputs_4_PSEL         ( apb3Router_4_PSEL    ), //o
    .io_outputs_4_PENABLE      ( apb3Router_4_PENABLE ), //o
    .io_outputs_4_PREADY       ( apb3Router_4_PREADY  ), //i
    .io_outputs_4_PWRITE       ( apb3Router_4_PWRITE  ), //o
    .io_outputs_4_PWDATA       ( apb3Router_4_PWDATA  ), //o
    .io_outputs_4_PRDATA       ( apb3Router_4_PRDATA  ), //i
    .io_outputs_4_PSLVERROR    ( apb3Router_4_PSLVERR ), //i

    .io_clk                    (io_clk                                    ), //i
    .resetCtrl_systemReset     (resetCtrl_systemReset                     )  //i
);


ph1_logic_SopcUserRam system_ramCtrl(

    .io_clk              ( io_clk                   ), //i
    .io_rst              ( resetCtrl_systemReset    ), //i

    .io_apb_PADDR        ( apb3Router_1_PADDR[17:0] ), //i
    .io_apb_PSEL         ( apb3Router_1_PSEL        ), //i
    .io_apb_PENABLE      ( apb3Router_1_PENABLE     ), //i
    .io_apb_PREADY       ( apb3Router_1_PREADY      ), //o
    .io_apb_PWRITE       ( apb3Router_1_PWRITE      ), //i
    .io_apb_PWDATA       ( apb3Router_1_PWDATA      ), //i
    .io_apb_PRDATA       ( apb3Router_1_PRDATA      ), //o
    .io_apb_PSLVERROR    ( apb3Router_1_PSLVERR     ), //o

    .user_ram_addr       ( user_ram_addr            ),
    .user_ram_wr_en      ( user_ram_wr_en           ),
    .user_ram_rd_en      ( user_ram_rd_en           ),
    .user_ram_wr_data    ( user_ram_wr_data         ),
    .user_ram_rd_data    ( user_ram_rd_data         )
);


ph1_logic_SopcTimer system_timerCtrl (
    .io_clk                   ( io_clk                        ), //i
    .io_rst                   ( resetCtrl_systemReset         ), //i
    .io_apb_PADDR             ( apb3Router_2_PADDR            ), //i
    .io_apb_PSEL              ( apb3Router_2_PSEL             ), //i
    .io_apb_PENABLE           ( apb3Router_2_PENABLE          ), //i
    .io_apb_PREADY            ( apb3Router_2_PREADY           ), //o
    .io_apb_PWRITE            ( apb3Router_2_PWRITE           ), //i
    .io_apb_PWDATA            ( apb3Router_2_PWDATA           ), //i
    .io_apb_PRDATA            ( apb3Router_2_PRDATA           ), //o
    .io_apb_PSLVERROR         ( apb3Router_2_PSLVERR          ), //o

    .io_interruptClear        ( system_timerInterruptClear    ), //i
    .io_interrupt             ( system_timerCtrl_io_interrupt )  //o
);

ph1_logic_SopcGpio system_gpioCtrl (
    .io_clk              ( io_clk                ), //i
    .io_rst              ( resetCtrl_systemReset | io_rst ), //i

    .io_apb_PADDR        ( apb3Router_3_PADDR    ), //i
    .io_apb_PSEL         ( apb3Router_3_PSEL     ), //i
    .io_apb_PENABLE      ( apb3Router_3_PENABLE  ), //i
    .io_apb_PREADY       ( apb3Router_3_PREADY   ), //o
    .io_apb_PWRITE       ( apb3Router_3_PWRITE   ), //i
    .io_apb_PWDATA       ( apb3Router_3_PWDATA   ), //i
    .io_apb_PRDATA       ( apb3Router_3_PRDATA   ), //o
    .io_apb_PSLVERROR    ( apb3Router_3_PSLVERR  ), //o

    .io_gpio_user        ( io_gpio_user          ), //i
    .io_gpio_read        ( io_gpio_read          ), //i
    .io_gpio_write       ( io_gpio_write         )  //o
);

`ifndef PH1_DDR_SIM
    ph1_logic_apb_uart #(
     .CLOCK_RATE ( CLOCK_RATE )
)system_uartCtrl (

    .apb_pclk   ( io_clk                ), // input
    .apb_prstn  (~resetCtrl_systemReset ), // input
    .apb_pready ( apb3Router_4_PREADY   ), // output
    .apb_psel   ( apb3Router_4_PSEL     ), // input
    .apb_penable( apb3Router_4_PENABLE  ), // input
    .apb_pwrite ( apb3Router_4_PWRITE   ), // input
    .apb_paddr  ( apb3Router_4_PADDR    ), // input
    .apb_pwdata ( apb3Router_4_PWDATA   ), // input
    .apb_prdata ( apb3Router_4_PRDATA   ), // output
    .apb_pslverr( apb3Router_4_PSLVERR  ), // output

    .uart_rxd   ( io_uart_rxd           ), // input
    .uart_txd   ( io_uart_txd           )  // output
);
`else
    assign apb3Router_4_PSLVERR = 1'b0 ;
    assign apb3Router_4_PREADY  = 1'b1 ;
    assign apb3Router_4_PRDATA  = 32'h0;
`endif



always @(*) begin
    if (system_mainBusDecoder_logic_rspSourceId)
        _zz_12_ = system_apbBridge_io_pipelinedMemoryBus_rsp_payload_data;
    else
        _zz_12_ = system_ram_io_bus_rsp_payload_data;
end


assign system_cpu_dBus_cmd_halfPipe_valid = system_cpu_dBus_cmd_halfPipe_regs_valid;
assign system_cpu_dBus_cmd_halfPipe_payload_wr = system_cpu_dBus_cmd_halfPipe_regs_payload_wr;
assign system_cpu_dBus_cmd_halfPipe_payload_address = system_cpu_dBus_cmd_halfPipe_regs_payload_address;
assign system_cpu_dBus_cmd_halfPipe_payload_data = system_cpu_dBus_cmd_halfPipe_regs_payload_data;
assign system_cpu_dBus_cmd_halfPipe_payload_size = system_cpu_dBus_cmd_halfPipe_regs_payload_size;
assign system_cpu_dBus_cmd_halfPipe_ready = system_mainBusArbiter_io_dBus_cmd_ready;

assign system_timerInterrupt    = system_timerCtrl_io_interrupt;
assign system_externalInterrupt = system_uartCtrl_io_interrupt;
assign system_softwareInterrupt = io_interrupt;
assign io_interruptClear = system_softwareInterruptClear;
assign system_timerInterruptClear = system_interruptCtrl_io_timerInterruptClear;
assign system_externalInterruptClear = system_interruptCtrl_io_externalInterruptClear;
assign system_softwareInterruptClear = system_interruptCtrl_io_softwareInterruptClear;
assign system_mainBusDecoder_logic_masterPipelined_cmd_valid           = system_mainBusArbiter_io_masterBus_cmd_valid;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_write   = system_mainBusArbiter_io_masterBus_cmd_payload_write;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_address = system_mainBusArbiter_io_masterBus_cmd_payload_address;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_data    = system_mainBusArbiter_io_masterBus_cmd_payload_data;
assign system_mainBusDecoder_logic_masterPipelined_cmd_payload_mask    = system_mainBusArbiter_io_masterBus_cmd_payload_mask;
assign system_mainBusDecoder_logic_hits_0 = ((system_mainBusDecoder_logic_masterPipelined_cmd_payload_address & (~ 32'h0000ffff)) == 32'h80000000);
assign system_mainBusDecoder_logic_hits_1 = ((system_mainBusDecoder_logic_masterPipelined_cmd_payload_address & (~ 32'h0fffffff)) == 32'hf0000000);
assign system_mainBusDecoder_logic_noHit  = ({system_mainBusDecoder_logic_hits_1, system_mainBusDecoder_logic_hits_0} == 2'b00);


always @ (*) begin
    system_ram_io_bus_cmd_valid = (system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_hits_0);
    if(_zz_14_)begin
        system_ram_io_bus_cmd_valid = 1'b0;
    end
end

//  assign system_ram_io_bus_cmd_payload_write = system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
always @ (*) begin
    _zz_7_ = (system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_hits_1);
    if(_zz_14_)begin
         _zz_7_ = 1'b0;
    end
end

  assign _zz_4_ = system_mainBusDecoder_logic_masterPipelined_cmd_payload_write;
  always @ (*) begin
    system_mainBusDecoder_logic_masterPipelined_cmd_ready = (({(system_mainBusDecoder_logic_hits_1 && system_apbBridge_io_pipelinedMemoryBus_cmd_ready),(system_mainBusDecoder_logic_hits_0 && system_ram_io_bus_cmd_ready)} != (2'b00)) || system_mainBusDecoder_logic_noHit);
    if(_zz_14_)begin
      system_mainBusDecoder_logic_masterPipelined_cmd_ready = 1'b0;
    end
  end

assign system_mainBusDecoder_logic_masterPipelined_rsp_valid = (system_apbBridge_io_pipelinedMemoryBus_rsp_valid || system_ram_io_bus_rsp_valid) || (system_mainBusDecoder_logic_rspPending && system_mainBusDecoder_logic_rspNoHit);
assign system_mainBusDecoder_logic_masterPipelined_rsp_payload_data = _zz_12_;

  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      system_interruptType <= (2'b00);
      system_cpu_dBus_cmd_halfPipe_regs_valid <= 1'b0;
      system_cpu_dBus_cmd_halfPipe_regs_ready <= 1'b1;
      system_mainBusDecoder_logic_rspPending  <= 1'b0;
      system_mainBusDecoder_logic_rspNoHit    <= 1'b0;
    end else begin
      if(system_timerInterruptClear || system_externalInterruptClear || system_softwareInterruptClear)begin
        system_interruptType <= (2'b00);
      end else begin
        if((system_timerInterrupt && (system_interruptType == (2'b00))))begin
          system_interruptType <= (2'b01);
        end else begin
          if((system_externalInterrupt && (system_interruptType == (2'b00))))begin
            system_interruptType <= (2'b10);
          end else begin
            if((system_softwareInterrupt && (system_interruptType == (2'b00))))begin
              system_interruptType <= (2'b11);
            end
          end
        end
      end
      if(_zz_15_)begin
        system_cpu_dBus_cmd_halfPipe_regs_valid <= system_cpu_dBus_cmd_valid;
        system_cpu_dBus_cmd_halfPipe_regs_ready <= (! system_cpu_dBus_cmd_valid);
      end else begin
        system_cpu_dBus_cmd_halfPipe_regs_valid <= (! system_cpu_dBus_cmd_halfPipe_ready);
        system_cpu_dBus_cmd_halfPipe_regs_ready <= system_cpu_dBus_cmd_halfPipe_ready;
      end
      if(system_mainBusDecoder_logic_masterPipelined_rsp_valid)begin
        system_mainBusDecoder_logic_rspPending <= 1'b0;
      end
      if(((system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_masterPipelined_cmd_ready) && (! system_mainBusDecoder_logic_masterPipelined_cmd_payload_write)))begin
        system_mainBusDecoder_logic_rspPending <= 1'b1;
      end
      system_mainBusDecoder_logic_rspNoHit <= 1'b0;
      if(system_mainBusDecoder_logic_noHit)begin
        system_mainBusDecoder_logic_rspNoHit <= 1'b1;
      end
    end
  end

  always @ (posedge io_clk) begin
    if(_zz_15_)begin
      system_cpu_dBus_cmd_halfPipe_regs_payload_wr <= system_cpu_dBus_cmd_payload_wr;
      system_cpu_dBus_cmd_halfPipe_regs_payload_address <= system_cpu_dBus_cmd_payload_address;
      system_cpu_dBus_cmd_halfPipe_regs_payload_data <= system_cpu_dBus_cmd_payload_data;
      system_cpu_dBus_cmd_halfPipe_regs_payload_size <= system_cpu_dBus_cmd_payload_size;
    end
    if((system_mainBusDecoder_logic_masterPipelined_cmd_valid && system_mainBusDecoder_logic_masterPipelined_cmd_ready))begin
      system_mainBusDecoder_logic_rspSourceId <= system_mainBusDecoder_logic_hits_1;
    end
  end

always @ (posedge io_clk) begin
    system_cpu_debug_resetOut_regNext <= system_cpu_debug_resetOut;
end

//-------- external apb port --------//
assign io_apb_PADDR   = apb3Router_0_PADDR   ;
assign io_apb_PSEL    = apb3Router_0_PSEL    ;
assign io_apb_PENABLE = apb3Router_0_PENABLE ;
assign io_apb_PWRITE  = apb3Router_0_PWRITE  ;
assign io_apb_PWDATA  = apb3Router_0_PWDATA  ;

assign apb3Router_0_PREADY  = io_apb_PREADY  ;
assign apb3Router_0_PRDATA  = io_apb_PRDATA  ;
assign apb3Router_0_PSLVERR = io_apb_PSLVERR ;

//-------- Debug Ports --------//

endmodule

`timescale 1ps/1ps

module ph1_logic_AlcPipelinedMemoryBusRam #(
`ifdef USE_DEBUG
    parameter RAM_DEPTH = 8192
`else
	parameter RAM_DEPTH = 4096
`endif
)(
    input           io_bus_cmd_valid,
    output          io_bus_cmd_ready,
    input           io_bus_cmd_payload_write,
    input   [31:0]  io_bus_cmd_payload_address,
    input   [31:0]  io_bus_cmd_payload_data,
    input   [ 3:0]  io_bus_cmd_payload_mask,
    output          io_bus_rsp_valid,
    output  [31:0]  io_bus_rsp_payload_data,
    input           io_clk,
    input           resetCtrl_systemReset
);


function integer clogb2 (input integer size);
begin
    size = size - 1;
    for (clogb2=1; size>1; clogb2=clogb2+1)
        size = size >> 1;
    end
endfunction // clogb2

localparam ADDR_WIDTH = clogb2(RAM_DEPTH);

reg         bus_rsp_valid;

wire [31:0] bus_data ;
wire [31:0] bus_addr ;

wire [ADDR_WIDTH-1:0] ram_addr ;

`ifndef PH1_DDR_SIM
reg  [31:0] ram_data ;
wire [31:0] ram_wrdata ;
wire [31:0] ram_rddata ;

ph1_logic_mcu_ram u_mcu_ram (
    .doa   ( ram_rddata ),
    .dia   ( ram_wrdata ),
    .addra ( ram_addr   ),
    .clka  ( io_clk     ),
    .wea   ( io_bus_cmd_valid && io_bus_cmd_payload_write ),
    .bea   ( io_bus_cmd_payload_mask )
);

always @ (posedge io_clk) begin
    if(io_bus_cmd_valid) begin
        ram_data <= ram_rddata ;
    end
end

assign ram_wrdata = bus_data ;
assign io_bus_rsp_payload_data = ram_rddata; //ram_data;

`else

reg  [31:0] ram_symbol [0:RAM_DEPTH-1];
reg  [31:0] ram_data ;

string mcu_ram_init_file;

initial begin
    $value$plusargs("MCU_RAM_INIT_FILE=%s", mcu_ram_init_file);
    $readmemh(mcu_ram_init_file, ram_symbol);
end

always @ (posedge io_clk) begin
    if(io_bus_cmd_valid) begin
        ram_data <= ram_symbol[ram_addr];
    end
end

always @ (posedge io_clk) begin
    if ( io_bus_cmd_valid && io_bus_cmd_payload_write ) begin
        ram_symbol[ram_addr][ 7: 0] <= io_bus_cmd_payload_mask[0] ? bus_data[7 : 0] : ram_symbol[ram_addr][ 7: 0];
        ram_symbol[ram_addr][15: 8] <= io_bus_cmd_payload_mask[1] ? bus_data[15: 8] : ram_symbol[ram_addr][15: 8];
        ram_symbol[ram_addr][23:16] <= io_bus_cmd_payload_mask[2] ? bus_data[23:16] : ram_symbol[ram_addr][23:16];
        ram_symbol[ram_addr][31:24] <= io_bus_cmd_payload_mask[3] ? bus_data[31:24] : ram_symbol[ram_addr][31:24];
    end
end

assign io_bus_rsp_payload_data = ram_data;

`endif

assign io_bus_rsp_valid = bus_rsp_valid ;
assign io_bus_cmd_ready = 1'b1;

assign bus_data = io_bus_cmd_payload_data;
assign bus_addr = (io_bus_cmd_payload_address >> 2);

assign ram_addr = bus_addr[ADDR_WIDTH-1:0];

always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset)
        bus_rsp_valid <= 1'b0;
    else
        bus_rsp_valid <= ((io_bus_cmd_valid && io_bus_cmd_ready) && (!io_bus_cmd_payload_write));
end


endmodule

`timescale 1ps/1ps

module ph1_logic_Apb3Decoder (
    input      [27:0]   io_input_PADDR,
    input      [0:0]    io_input_PSEL,
    input               io_input_PENABLE,
    output reg          io_input_PREADY,
    input               io_input_PWRITE,
    input      [31:0]   io_input_PWDATA,
    output     [31:0]   io_input_PRDATA,
    output reg          io_input_PSLVERROR,
    output     [27:0]   io_output_PADDR,
    output reg [4:0]    io_output_PSEL,
    output              io_output_PENABLE,
    input               io_output_PREADY,
    output              io_output_PWRITE,
    output     [31:0]   io_output_PWDATA,
    input      [31:0]   io_output_PRDATA,
    input               io_output_PSLVERROR
);

wire  no_map;

assign no_map = io_input_PSEL[0] && (io_output_PSEL == 5'h0);
assign io_output_PADDR   = io_input_PADDR;
assign io_output_PENABLE = io_input_PENABLE;
assign io_output_PWRITE  = io_input_PWRITE;
assign io_output_PWDATA  = io_input_PWDATA;
assign io_input_PRDATA   = io_output_PRDATA;

always @ (*) begin
    io_output_PSEL[0] = ((io_input_PADDR & 28'hffc0000) == 28'h0000000) && io_input_PSEL[0];
    io_output_PSEL[1] = ((io_input_PADDR & 28'hfff0000) == 28'h0040000) && io_input_PSEL[0];
    io_output_PSEL[2] = ((io_input_PADDR & 28'hffff000) == 28'h0080000) && io_input_PSEL[0];
    io_output_PSEL[3] = ((io_input_PADDR & 28'hffff000) == 28'h0081000) && io_input_PSEL[0];
    io_output_PSEL[4] = ((io_input_PADDR & 28'hffff000) == 28'h0082000) && io_input_PSEL[0];
end

always @ (*) begin
    io_input_PREADY    = io_output_PREADY;
    io_input_PSLVERROR = io_output_PSLVERROR;
    if(no_map)begin
        io_input_PREADY    = 1'b1;
        io_input_PSLVERROR = 1'b1;
    end
end

endmodule

`timescale 1ps/1ps
module ph1_logic_Apb3Router (
  input      [27:0]   io_input_PADDR,
  input      [4:0]    io_input_PSEL,
  input               io_input_PENABLE,
  output              io_input_PREADY,
  input               io_input_PWRITE,
  input      [31:0]   io_input_PWDATA,
  output     [31:0]   io_input_PRDATA,
  output              io_input_PSLVERROR,

  output     [27:0]   io_outputs_0_PADDR,
  output     [0:0]    io_outputs_0_PSEL,
  output              io_outputs_0_PENABLE,
  input               io_outputs_0_PREADY,
  output              io_outputs_0_PWRITE,
  output     [31:0]   io_outputs_0_PWDATA,
  input      [31:0]   io_outputs_0_PRDATA,
  input               io_outputs_0_PSLVERROR,

  output     [27:0]   io_outputs_1_PADDR,
  output     [0:0]    io_outputs_1_PSEL,
  output              io_outputs_1_PENABLE,
  input               io_outputs_1_PREADY,
  output              io_outputs_1_PWRITE,
  output     [31:0]   io_outputs_1_PWDATA,
  input      [31:0]   io_outputs_1_PRDATA,
  input               io_outputs_1_PSLVERROR,

  output     [27:0]   io_outputs_2_PADDR,
  output     [0:0]    io_outputs_2_PSEL,
  output              io_outputs_2_PENABLE,
  input               io_outputs_2_PREADY,
  output              io_outputs_2_PWRITE,
  output     [31:0]   io_outputs_2_PWDATA,
  input      [31:0]   io_outputs_2_PRDATA,
  input               io_outputs_2_PSLVERROR,

  output     [27:0]   io_outputs_3_PADDR,
  output     [0:0]    io_outputs_3_PSEL,
  output              io_outputs_3_PENABLE,
  input               io_outputs_3_PREADY,
  output              io_outputs_3_PWRITE,
  output     [31:0]   io_outputs_3_PWDATA,
  input      [31:0]   io_outputs_3_PRDATA,
  input               io_outputs_3_PSLVERROR,

  output     [27:0]   io_outputs_4_PADDR,
  output     [0:0]    io_outputs_4_PSEL,
  output              io_outputs_4_PENABLE,
  input               io_outputs_4_PREADY,
  output              io_outputs_4_PWRITE,
  output     [31:0]   io_outputs_4_PWDATA,
  input      [31:0]   io_outputs_4_PRDATA,
  input               io_outputs_4_PSLVERROR,

  input               io_clk,
  input               resetCtrl_systemReset
);

reg                 pready_int;
reg        [31:0]   prdata_int;
reg                 pslverr_int;

wire                _zz_2_;
wire                _zz_4_;
wire                _zz_3_;

reg        [2:0]    selIndex;

assign _zz_2_ =  io_input_PSEL[4];
assign _zz_4_ = (io_input_PSEL[2] || io_input_PSEL[3]);
assign _zz_3_ = (io_input_PSEL[1] || io_input_PSEL[3]);

always @ (posedge io_clk) begin
    selIndex <= {_zz_2_, _zz_4_, _zz_3_};
end

always @(*) begin
    case(selIndex)
        3'b000 : begin
            pready_int  = io_outputs_0_PREADY;
            prdata_int  = io_outputs_0_PRDATA;
            pslverr_int = io_outputs_0_PSLVERROR;
        end
        3'b001 : begin
            pready_int  = io_outputs_1_PREADY;
            prdata_int  = io_outputs_1_PRDATA;
            pslverr_int = io_outputs_1_PSLVERROR;
        end
        3'b010 : begin
            pready_int  = io_outputs_2_PREADY;
            prdata_int  = io_outputs_2_PRDATA;
            pslverr_int = io_outputs_2_PSLVERROR;
        end
        3'b011 : begin
            pready_int  = io_outputs_3_PREADY;
            prdata_int  = io_outputs_3_PRDATA;
            pslverr_int = io_outputs_3_PSLVERROR;
        end
        default : begin
            pready_int  = io_outputs_4_PREADY;
            prdata_int  = io_outputs_4_PRDATA;
            pslverr_int = io_outputs_4_PSLVERROR;
        end
    endcase
end

assign io_outputs_0_PADDR   = io_input_PADDR;
assign io_outputs_0_PENABLE = io_input_PENABLE;
assign io_outputs_0_PSEL[0] = io_input_PSEL[0];
assign io_outputs_0_PWRITE  = io_input_PWRITE;
assign io_outputs_0_PWDATA  = io_input_PWDATA;

assign io_outputs_1_PADDR   = io_input_PADDR;
assign io_outputs_1_PENABLE = io_input_PENABLE;
assign io_outputs_1_PSEL[0] = io_input_PSEL[1];
assign io_outputs_1_PWRITE  = io_input_PWRITE;
assign io_outputs_1_PWDATA  = io_input_PWDATA;

assign io_outputs_2_PADDR   = io_input_PADDR;
assign io_outputs_2_PENABLE = io_input_PENABLE;
assign io_outputs_2_PSEL[0] = io_input_PSEL[2];
assign io_outputs_2_PWRITE  = io_input_PWRITE;
assign io_outputs_2_PWDATA  = io_input_PWDATA;

assign io_outputs_3_PADDR   = io_input_PADDR;
assign io_outputs_3_PENABLE = io_input_PENABLE;
assign io_outputs_3_PSEL[0] = io_input_PSEL[3];
assign io_outputs_3_PWRITE  = io_input_PWRITE;
assign io_outputs_3_PWDATA  = io_input_PWDATA;

assign io_outputs_4_PADDR   = io_input_PADDR;
assign io_outputs_4_PENABLE = io_input_PENABLE;
assign io_outputs_4_PSEL[0] = io_input_PSEL[4];
assign io_outputs_4_PWRITE  = io_input_PWRITE;
assign io_outputs_4_PWDATA  = io_input_PWDATA;

assign io_input_PREADY    = pready_int;
assign io_input_PRDATA    = prdata_int;
assign io_input_PSLVERROR = pslverr_int;

endmodule

`timescale 1ps / 1ps
module ph1_logic_BufferCC (
    input               io_clk,
    input               io_dataIn,
    output              io_dataOut
);

reg    buffers_0;
reg    buffers_1;

always @ (posedge io_clk) begin
    buffers_0 <= io_dataIn ;
    buffers_1 <= buffers_0 ;
end

assign io_dataOut = buffers_1;

endmodule

`timescale 1ns / 1ps

module ph1_logic_mcu_ram ( doa, dia, addra, clka, wea, bea );

	parameter DATA_WIDTH_A = 32;
	parameter DATA_WIDTH_B = 32;
`ifdef USE_DEBUG
	parameter DATA_DEPTH_A = 8192;
	parameter DATA_DEPTH_B = 8192;
	parameter ADDR_WIDTH_A = 13;
	parameter ADDR_WIDTH_B = 13;
`else
	parameter DATA_DEPTH_A = 4096;
	parameter DATA_DEPTH_B = 4096;
	parameter ADDR_WIDTH_A = 12;
	parameter ADDR_WIDTH_B = 12;
`endif
	parameter REGMODE_A    = "NOREG";
	parameter WRITEMODE_A  = "NORMAL";
	parameter RESETMODE_A  = "ASYNC";

	output [DATA_WIDTH_A-1:0] doa;

	input  [DATA_WIDTH_A-1:0] dia;
	input  [ADDR_WIDTH_A-1:0] addra;
	input  wea;
	input  [3:0] bea;
	input  clka;



	PH1_LOGIC_ERAM #( .DATA_WIDTH_A(DATA_WIDTH_A),
				.ADDR_WIDTH_A(ADDR_WIDTH_A),
				.DATA_DEPTH_A(DATA_DEPTH_A),
				.DATA_WIDTH_B(DATA_WIDTH_B),
				.ADDR_WIDTH_B(ADDR_WIDTH_B),
				.DATA_DEPTH_B(DATA_DEPTH_B),
				.BYTE_ENABLE(8),
				.BYTE_A(4),
				.BYTE_B(4),
				.MODE("SP"),
				.REGMODE_A(REGMODE_A),
				.WRITEMODE_A(WRITEMODE_A),
				.IMPLEMENT("20K"),
				.ECC_ENCODE("DISABLE"),
				.ECC_DECODE("DISABLE"),
				.CLKMODE("ASYNC"),
				.SSROVERCE("ENABLE"),
				.OREGSET_A("RESET"),
				.RESETMODE_A(RESETMODE_A),
				.ASYNC_RESET_RELEASE_A("ASYNC"),
				.DEBUGGABLE("NO"),
				.PACKABLE("NO"),
			`ifdef USE_DEBUG
				.INIT_FILE("ddr_ip_dbg.mif"),
			`else
				.INIT_FILE("ddr_ip.mif"),
			`endif
				.FILL_ALL("NONE"))
			inst(
				.dia(dia),
				.dib({32{1'b0}}),
				.addra(addra),
				.addrb({ADDR_WIDTH_B{1'b0}}),
				.cea(1'b1),
				.ceb(1'b0),
				.ocea(1'b0),
				.oceb(1'b0),
				.clka(clka),
				.clkb(1'b0),
				.wea(wea),
				.bea(bea),
				.web(1'b0),
				.beb(1'b0),
				.rsta(1'b0),
				.rstb(1'b0),
				.doa(doa),
				.dob(),
				.ecc_sbiterr(open),
				.ecc_dbiterr(open));


endmodule

`timescale 1ps/1ps
module ph1_logic_MuraxMasterArbiter (
  input               io_iBus_cmd_valid,
  output reg          io_iBus_cmd_ready,
  input      [31:0]   io_iBus_cmd_payload_pc,
  output              io_iBus_rsp_valid,
  output              io_iBus_rsp_payload_error,
  output     [31:0]   io_iBus_rsp_payload_inst,
  input               io_dBus_cmd_valid,
  output reg          io_dBus_cmd_ready,
  input               io_dBus_cmd_payload_wr,
  input      [31:0]   io_dBus_cmd_payload_address,
  input      [31:0]   io_dBus_cmd_payload_data,
  input      [1:0]    io_dBus_cmd_payload_size,
  output              io_dBus_rsp_ready,
  output              io_dBus_rsp_error,
  output     [31:0]   io_dBus_rsp_data,
  output reg          io_masterBus_cmd_valid,
  input               io_masterBus_cmd_ready,
  output              io_masterBus_cmd_payload_write,
  output     [31:0]   io_masterBus_cmd_payload_address,
  output     [31:0]   io_masterBus_cmd_payload_data,
  output     [3:0]    io_masterBus_cmd_payload_mask,
  input               io_masterBus_rsp_valid,
  input      [31:0]   io_masterBus_rsp_payload_data,
  input               io_clk,
  input               resetCtrl_systemReset
);
  wire                _zz_2_;
  reg        [3:0]    _zz_1_;
  reg                 rspPending;
  reg                 rspTarget;

  assign _zz_2_ = (rspPending && (! io_masterBus_rsp_valid));
  always @ (*) begin
    io_masterBus_cmd_valid = (io_iBus_cmd_valid || io_dBus_cmd_valid);
    if(_zz_2_)begin
      io_masterBus_cmd_valid = 1'b0;
    end
  end

  assign io_masterBus_cmd_payload_write = (io_dBus_cmd_valid && io_dBus_cmd_payload_wr);
  assign io_masterBus_cmd_payload_address = (io_dBus_cmd_valid ? io_dBus_cmd_payload_address : io_iBus_cmd_payload_pc);
  assign io_masterBus_cmd_payload_data = io_dBus_cmd_payload_data;
  always @ (*) begin
    case(io_dBus_cmd_payload_size)
      2'b00 : begin
        _zz_1_ = (4'b0001);
      end
      2'b01 : begin
        _zz_1_ = (4'b0011);
      end
      default : begin
        _zz_1_ = (4'b1111);
      end
    endcase
  end

  assign io_masterBus_cmd_payload_mask = (_zz_1_ <<< io_dBus_cmd_payload_address[1 : 0]);
  always @ (*) begin
    io_iBus_cmd_ready = (io_masterBus_cmd_ready && (! io_dBus_cmd_valid));
    if(_zz_2_)begin
      io_iBus_cmd_ready = 1'b0;
    end
  end

  always @ (*) begin
    io_dBus_cmd_ready = io_masterBus_cmd_ready;
    if(_zz_2_)begin
      io_dBus_cmd_ready = 1'b0;
    end
  end

  assign io_iBus_rsp_valid = (io_masterBus_rsp_valid && (! rspTarget));
  assign io_iBus_rsp_payload_inst = io_masterBus_rsp_payload_data;
  assign io_iBus_rsp_payload_error = 1'b0;
  assign io_dBus_rsp_ready = (io_masterBus_rsp_valid && rspTarget);
  assign io_dBus_rsp_data = io_masterBus_rsp_payload_data;
  assign io_dBus_rsp_error = 1'b0;
  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      rspPending <= 1'b0;
      rspTarget <= 1'b0;
    end else begin
      if(io_masterBus_rsp_valid)begin
        rspPending <= 1'b0;
      end
      if(((io_masterBus_cmd_valid && io_masterBus_cmd_ready) && (! io_masterBus_cmd_payload_write)))begin
        rspTarget <= io_dBus_cmd_valid;
        rspPending <= 1'b1;
      end
    end
  end


endmodule

`timescale 1ps/1ps
module ph1_logic_PipelinedMemoryBusToApbBridge (
  input               io_pipelinedMemoryBus_cmd_valid,
  output              io_pipelinedMemoryBus_cmd_ready,
  input               io_pipelinedMemoryBus_cmd_payload_write,
  input      [31:0]   io_pipelinedMemoryBus_cmd_payload_address,
  input      [31:0]   io_pipelinedMemoryBus_cmd_payload_data,
  input      [3:0]    io_pipelinedMemoryBus_cmd_payload_mask,
  output              io_pipelinedMemoryBus_rsp_valid,
  output     [31:0]   io_pipelinedMemoryBus_rsp_payload_data,

  output     [27:0]   io_apb_PADDR,
  output     [0:0]    io_apb_PSEL,
  output              io_apb_PENABLE,
  input               io_apb_PREADY,
  output              io_apb_PWRITE,
  output     [31:0]   io_apb_PWDATA,
  input      [31:0]   io_apb_PRDATA,
  input               io_apb_PSLVERROR,

  input               io_clk,
  input               resetCtrl_systemReset
);

wire                _zz_2_;

wire                pipelinedMemoryBusStage_cmd_valid;
reg                 pipelinedMemoryBusStage_cmd_ready;
wire                pipelinedMemoryBusStage_cmd_payload_write;
wire       [31:0]   pipelinedMemoryBusStage_cmd_payload_address;
wire       [31:0]   pipelinedMemoryBusStage_cmd_payload_data;
wire       [3:0]    pipelinedMemoryBusStage_cmd_payload_mask;
reg                 pipelinedMemoryBusStage_rsp_valid;
wire       [31:0]   pipelinedMemoryBusStage_rsp_payload_data;
wire                io_pipelinedMemoryBus_cmd_halfPipe_valid;
wire                io_pipelinedMemoryBus_cmd_halfPipe_ready;
wire                io_pipelinedMemoryBus_cmd_halfPipe_payload_write;
wire       [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_payload_address;
wire       [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_payload_data;
wire       [3:0]    io_pipelinedMemoryBus_cmd_halfPipe_payload_mask;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_valid;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_ready;
reg                 io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write;
reg        [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address;
reg        [31:0]   io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data;
reg        [3:0]    io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask;
reg                 pipelinedMemoryBusStage_rsp_regNext_valid;
reg        [31:0]   pipelinedMemoryBusStage_rsp_regNext_payload_data;
reg                 state;
wire                state_inv ;

assign state_inv = ~state;
assign _zz_2_ = (! io_pipelinedMemoryBus_cmd_halfPipe_regs_valid);

assign io_pipelinedMemoryBus_cmd_halfPipe_valid           = io_pipelinedMemoryBus_cmd_halfPipe_regs_valid;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_write   = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_address = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_data    = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data;
assign io_pipelinedMemoryBus_cmd_halfPipe_payload_mask    = io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask;
assign io_pipelinedMemoryBus_cmd_ready                    = io_pipelinedMemoryBus_cmd_halfPipe_regs_ready;
assign pipelinedMemoryBusStage_cmd_valid                  = io_pipelinedMemoryBus_cmd_halfPipe_valid;
assign io_pipelinedMemoryBus_cmd_halfPipe_ready           = pipelinedMemoryBusStage_cmd_ready;
assign pipelinedMemoryBusStage_cmd_payload_write          = io_pipelinedMemoryBus_cmd_halfPipe_payload_write;
assign pipelinedMemoryBusStage_cmd_payload_address        = io_pipelinedMemoryBus_cmd_halfPipe_payload_address;
assign pipelinedMemoryBusStage_cmd_payload_data           = io_pipelinedMemoryBus_cmd_halfPipe_payload_data;
assign pipelinedMemoryBusStage_cmd_payload_mask           = io_pipelinedMemoryBus_cmd_halfPipe_payload_mask;
assign io_pipelinedMemoryBus_rsp_valid                    = pipelinedMemoryBusStage_rsp_regNext_valid;
assign io_pipelinedMemoryBus_rsp_payload_data             = pipelinedMemoryBusStage_rsp_regNext_payload_data;

always @ (*) begin
    pipelinedMemoryBusStage_cmd_ready = 1'b0;
    pipelinedMemoryBusStage_rsp_valid = 1'b0;
    if (state == 1'b1 ) begin
        if( io_apb_PREADY == 1'b1 )begin
            pipelinedMemoryBusStage_cmd_ready = 1'b1;
            pipelinedMemoryBusStage_rsp_valid = ~pipelinedMemoryBusStage_cmd_payload_write;
        end
    end
end

assign io_apb_PSEL[0] = pipelinedMemoryBusStage_cmd_valid;
assign io_apb_PENABLE = state;
assign io_apb_PWRITE  = pipelinedMemoryBusStage_cmd_payload_write;
assign io_apb_PADDR   = pipelinedMemoryBusStage_cmd_payload_address[27:0];
assign io_apb_PWDATA  = pipelinedMemoryBusStage_cmd_payload_data;

assign pipelinedMemoryBusStage_rsp_payload_data = io_apb_PRDATA;

always @ (posedge io_clk or posedge resetCtrl_systemReset)
begin
    if (resetCtrl_systemReset)
        state <= 1'b0 ;
    else if ( state_inv )
        state <= pipelinedMemoryBusStage_cmd_valid;
    else if ( io_apb_PREADY )
        state <= 1'b0;
end

always @ (posedge io_clk or posedge resetCtrl_systemReset)
begin
    if (resetCtrl_systemReset) begin
        io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <= 1'b0;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <= 1'b1;
        pipelinedMemoryBusStage_rsp_regNext_valid     <= 1'b0;
    end else begin
        if(_zz_2_)begin
            io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <=  io_pipelinedMemoryBus_cmd_valid;
            io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <= ~io_pipelinedMemoryBus_cmd_valid;
        end else begin
            io_pipelinedMemoryBus_cmd_halfPipe_regs_valid <= ~io_pipelinedMemoryBus_cmd_halfPipe_ready;
            io_pipelinedMemoryBus_cmd_halfPipe_regs_ready <=  io_pipelinedMemoryBus_cmd_halfPipe_ready;
        end

        pipelinedMemoryBusStage_rsp_regNext_valid <= pipelinedMemoryBusStage_rsp_valid;

    end
end

always @ (posedge io_clk) begin
    if(_zz_2_)begin
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_write   <= io_pipelinedMemoryBus_cmd_payload_write;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_address <= io_pipelinedMemoryBus_cmd_payload_address;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_data    <= io_pipelinedMemoryBus_cmd_payload_data;
        io_pipelinedMemoryBus_cmd_halfPipe_regs_payload_mask    <= io_pipelinedMemoryBus_cmd_payload_mask;
    end

    pipelinedMemoryBusStage_rsp_regNext_payload_data <= pipelinedMemoryBusStage_rsp_payload_data;
end

endmodule

//***************************************************************************/
// mcu_core.v
//***************************************************************************/

`timescale 1ps / 1ps


`define AluBitwiseCtrlEnum_defaultEncoding_type [1:0]
`define AluBitwiseCtrlEnum_defaultEncoding_XOR_1 2'b00
`define AluBitwiseCtrlEnum_defaultEncoding_OR_1 2'b01
`define AluBitwiseCtrlEnum_defaultEncoding_AND_1 2'b10

`define AluCtrlEnum_defaultEncoding_type [1:0]
`define AluCtrlEnum_defaultEncoding_ADD_SUB 2'b00
`define AluCtrlEnum_defaultEncoding_SLT_SLTU 2'b01
`define AluCtrlEnum_defaultEncoding_BITWISE 2'b10

`define EnvCtrlEnum_defaultEncoding_type [0:0]
`define EnvCtrlEnum_defaultEncoding_NONE 1'b0
`define EnvCtrlEnum_defaultEncoding_XRET 1'b1

`define ShiftCtrlEnum_defaultEncoding_type [1:0]
`define ShiftCtrlEnum_defaultEncoding_DISABLE_1 2'b00
`define ShiftCtrlEnum_defaultEncoding_SLL_1 2'b01
`define ShiftCtrlEnum_defaultEncoding_SRL_1 2'b10
`define ShiftCtrlEnum_defaultEncoding_SRA_1 2'b11

`define BranchCtrlEnum_defaultEncoding_type [1:0]
`define BranchCtrlEnum_defaultEncoding_INC 2'b00
`define BranchCtrlEnum_defaultEncoding_B 2'b01
`define BranchCtrlEnum_defaultEncoding_JAL 2'b10
`define BranchCtrlEnum_defaultEncoding_JALR 2'b11

`define Src2CtrlEnum_defaultEncoding_type [1:0]
`define Src2CtrlEnum_defaultEncoding_RS 2'b00
`define Src2CtrlEnum_defaultEncoding_IMI 2'b01
`define Src2CtrlEnum_defaultEncoding_IMS 2'b10
`define Src2CtrlEnum_defaultEncoding_PC 2'b11

`define Src1CtrlEnum_defaultEncoding_type [1:0]
`define Src1CtrlEnum_defaultEncoding_RS 2'b00
`define Src1CtrlEnum_defaultEncoding_IMU 2'b01
`define Src1CtrlEnum_defaultEncoding_PC_INCREMENT 2'b10
`define Src1CtrlEnum_defaultEncoding_URS1 2'b11

module ph1_logic_mcu (
  output              iBus_cmd_valid,
  input               iBus_cmd_ready,
  output     [31:0]   iBus_cmd_payload_pc,
  input               iBus_rsp_valid,
  input               iBus_rsp_payload_error,
  input      [31:0]   iBus_rsp_payload_inst,
  input               timerInterrupt,
  input               externalInterrupt,
  input               softwareInterrupt,
  input               debug_bus_cmd_valid,
  output reg          debug_bus_cmd_ready,
  input               debug_bus_cmd_payload_wr,
  input      [7:0]    debug_bus_cmd_payload_address,
  input      [31:0]   debug_bus_cmd_payload_data,
  output reg [31:0]   debug_bus_rsp_data,
  output              debug_resetOut,
  output              dBus_cmd_valid,
  input               dBus_cmd_ready,
  output              dBus_cmd_payload_wr,
  output     [31:0]   dBus_cmd_payload_address,
  output     [31:0]   dBus_cmd_payload_data,
  output     [1:0]    dBus_cmd_payload_size,
  input               dBus_rsp_ready,
  input               dBus_rsp_error,
  input      [31:0]   dBus_rsp_data,
  input               io_clk,
  input               resetCtrl_systemReset,
  input               resetCtrl_mainClkReset 
);
  wire                _zz_113_;
  wire                _zz_114_;
  reg        [31:0]   _zz_115_;
  reg        [31:0]   _zz_116_;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_c_io_push_ready;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_valid;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_error;
  wire       [31:0]   IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_inst;
  wire       [0:0]    IBusSimplePlugin_rspJoin_rspBuffer_c_io_occupancy;
  wire                _zz_117_;
  wire                _zz_118_;
  wire                _zz_119_;
  wire                _zz_120_;
  wire                _zz_121_;
  wire                _zz_122_;
  wire                _zz_123_;
  wire                _zz_124_;
  wire       [1:0]    _zz_125_;
  wire                _zz_126_;
  wire                _zz_127_;
  wire                _zz_128_;
  wire                _zz_129_;
  wire                _zz_130_;
  wire                _zz_131_;
  wire       [5:0]    _zz_132_;
  wire                _zz_133_;
  wire                _zz_134_;
  wire                _zz_135_;
  wire                _zz_136_;
  wire       [1:0]    _zz_137_;
  wire                _zz_138_;
  wire       [0:0]    _zz_139_;
  wire       [0:0]    _zz_140_;
  wire       [0:0]    _zz_141_;
  wire       [0:0]    _zz_142_;
  wire       [0:0]    _zz_143_;
  wire       [0:0]    _zz_144_;
  wire       [0:0]    _zz_145_;
  wire       [0:0]    _zz_146_;
  wire       [0:0]    _zz_147_;
  wire       [0:0]    _zz_148_;
  wire       [0:0]    _zz_149_;
  wire       [0:0]    _zz_150_;
  wire       [1:0]    _zz_151_;
  wire       [1:0]    _zz_152_;
  wire       [2:0]    _zz_153_;
  wire       [31:0]   _zz_154_;
  wire       [2:0]    _zz_155_;
  wire       [0:0]    _zz_156_;
  wire       [2:0]    _zz_157_;
  wire       [0:0]    _zz_158_;
  wire       [2:0]    _zz_159_;
  wire       [0:0]    _zz_160_;
  wire       [2:0]    _zz_161_;
  wire       [0:0]    _zz_162_;
  wire       [2:0]    _zz_163_;
  wire       [4:0]    _zz_164_;
  wire       [11:0]   _zz_165_;
  wire       [11:0]   _zz_166_;
  wire       [31:0]   _zz_167_;
  wire       [31:0]   _zz_168_;
  wire       [31:0]   _zz_169_;
  wire       [31:0]   _zz_170_;
  wire       [31:0]   _zz_171_;
  wire       [31:0]   _zz_172_;
  wire       [31:0]   _zz_173_;
  wire       [31:0]   _zz_174_;
  wire       [32:0]   _zz_175_;
  wire       [19:0]   _zz_176_;
  wire       [11:0]   _zz_177_;
  wire       [11:0]   _zz_178_;
  wire       [0:0]    _zz_179_;
  wire       [0:0]    _zz_180_;
  wire       [0:0]    _zz_181_;
  wire       [0:0]    _zz_182_;
  wire       [0:0]    _zz_183_;
  wire       [0:0]    _zz_184_;
  wire                _zz_185_;
  wire                _zz_186_;
  wire       [31:0]   _zz_187_;
  wire       [31:0]   _zz_188_;
  wire                _zz_189_;
  wire                _zz_190_;
  wire                _zz_191_;
  wire                _zz_192_;
  wire       [0:0]    _zz_193_;
  wire       [0:0]    _zz_194_;
  wire                _zz_195_;
  wire       [0:0]    _zz_196_;
  wire       [19:0]   _zz_197_;
  wire       [31:0]   _zz_198_;
  wire                _zz_199_;
  wire                _zz_200_;
  wire       [0:0]    _zz_201_;
  wire       [0:0]    _zz_202_;
  wire       [0:0]    _zz_203_;
  wire       [0:0]    _zz_204_;
  wire                _zz_205_;
  wire       [0:0]    _zz_206_;
  wire       [16:0]   _zz_207_;
  wire       [31:0]   _zz_208_;
  wire       [31:0]   _zz_209_;
  wire                _zz_210_;
  wire       [1:0]    _zz_211_;
  wire       [1:0]    _zz_212_;
  wire                _zz_213_;
  wire       [0:0]    _zz_214_;
  wire       [13:0]   _zz_215_;
  wire       [31:0]   _zz_216_;
  wire       [31:0]   _zz_217_;
  wire       [31:0]   _zz_218_;
  wire       [31:0]   _zz_219_;
  wire                _zz_220_;
  wire                _zz_221_;
  wire       [0:0]    _zz_222_;
  wire       [2:0]    _zz_223_;
  wire       [1:0]    _zz_224_;
  wire       [1:0]    _zz_225_;
  wire                _zz_226_;
  wire       [0:0]    _zz_227_;
  wire       [10:0]   _zz_228_;
  wire       [31:0]   _zz_229_;
  wire       [31:0]   _zz_230_;
  wire       [31:0]   _zz_231_;
  wire       [31:0]   _zz_232_;
  wire                _zz_233_;
  wire       [0:0]    _zz_234_;
  wire       [0:0]    _zz_235_;
  wire                _zz_236_;
  wire                _zz_237_;
  wire       [0:0]    _zz_238_;
  wire       [0:0]    _zz_239_;
  wire       [0:0]    _zz_240_;
  wire       [0:0]    _zz_241_;
  wire                _zz_242_;
  wire       [0:0]    _zz_243_;
  wire       [8:0]    _zz_244_;
  wire       [31:0]   _zz_245_;
  wire       [31:0]   _zz_246_;
  wire       [31:0]   _zz_247_;
  wire       [31:0]   _zz_248_;
  wire       [31:0]   _zz_249_;
  wire       [31:0]   _zz_250_;
  wire       [31:0]   _zz_251_;
  wire       [31:0]   _zz_252_;
  wire       [31:0]   _zz_253_;
  wire       [31:0]   _zz_254_;
  wire       [31:0]   _zz_255_;
  wire       [0:0]    _zz_256_;
  wire       [0:0]    _zz_257_;
  wire       [0:0]    _zz_258_;
  wire       [0:0]    _zz_259_;
  wire                _zz_260_;
  wire       [0:0]    _zz_261_;
  wire       [6:0]    _zz_262_;
  wire       [31:0]   _zz_263_;
  wire       [31:0]   _zz_264_;
  wire       [31:0]   _zz_265_;
  wire       [0:0]    _zz_266_;
  wire       [3:0]    _zz_267_;
  wire                _zz_268_;
  wire       [1:0]    _zz_269_;
  wire       [1:0]    _zz_270_;
  wire                _zz_271_;
  wire       [0:0]    _zz_272_;
  wire       [3:0]    _zz_273_;
  wire       [31:0]   _zz_274_;
  wire       [31:0]   _zz_275_;
  wire       [31:0]   _zz_276_;
  wire       [0:0]    _zz_277_;
  wire       [0:0]    _zz_278_;
  wire       [31:0]   _zz_279_;
  wire       [31:0]   _zz_280_;
  wire                _zz_281_;
  wire                _zz_282_;
  wire       [0:0]    _zz_283_;
  wire       [0:0]    _zz_284_;
  wire                _zz_285_;
  wire       [0:0]    _zz_286_;
  wire       [0:0]    _zz_287_;
  wire       [31:0]   _zz_288_;
  wire       [31:0]   _zz_289_;
  wire       [31:0]   _zz_290_;
  wire       [31:0]   _zz_291_;
  wire       [31:0]   _zz_292_;
  wire       [0:0]    _zz_293_;
  wire       [0:0]    _zz_294_;
  wire       [0:0]    _zz_295_;
  wire       [0:0]    _zz_296_;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type decode_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_1_;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_2_;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_3_;
  wire       [31:0]   decode_RS1;
  wire                execute_BYPASSABLE_MEMORY_STAGE;
  wire                decode_BYPASSABLE_MEMORY_STAGE;
  wire       [31:0]   decode_SRC1;
  wire       [31:0]   memory_MEMORY_READ_DATA;
  wire                decode_SRC_LESS_UNSIGNED;
  wire       `AluCtrlEnum_defaultEncoding_type decode_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_4_;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_5_;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_6_;
  wire                decode_MEMORY_ENABLE;
  wire       [31:0]   decode_SRC2;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_7_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_8_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_9_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_10_;
  wire       `EnvCtrlEnum_defaultEncoding_type decode_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_11_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_12_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_13_;
  wire       [31:0]   decode_RS2;
  wire                decode_IS_CSR;
  wire                decode_DO_EBREAK;
  wire                decode_BYPASSABLE_EXECUTE_STAGE;
  wire                decode_SRC2_FORCE_ZERO;
  wire       [31:0]   execute_BRANCH_CALC;
  wire       [31:0]   memory_PC;
  wire       [31:0]   writeBack_FORMAL_PC_NEXT;
  wire       [31:0]   memory_FORMAL_PC_NEXT;
  wire       [31:0]   execute_FORMAL_PC_NEXT;
  wire       [31:0]   decode_FORMAL_PC_NEXT;
  wire       [1:0]    memory_MEMORY_ADDRESS_LOW;
  wire       [1:0]    execute_MEMORY_ADDRESS_LOW;
  wire                execute_BRANCH_DO;
  wire                decode_MEMORY_STORE;
  wire                decode_CSR_WRITE_OPCODE;
  wire       [31:0]   writeBack_REGFILE_WRITE_DATA;
  wire       [31:0]   execute_REGFILE_WRITE_DATA;
  wire       `ShiftCtrlEnum_defaultEncoding_type decode_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_14_;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_15_;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_16_;
  wire       `BranchCtrlEnum_defaultEncoding_type decode_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_17_;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_18_;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_19_;
  wire                decode_CSR_READ_OPCODE;
  wire                execute_DO_EBREAK;
  wire                decode_IS_EBREAK;
  wire       [31:0]   memory_BRANCH_CALC;
  wire                memory_BRANCH_DO;
  wire       [31:0]   execute_PC;
  wire       [31:0]   execute_RS1;
  wire       `BranchCtrlEnum_defaultEncoding_type execute_BRANCH_CTRL;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_20_;
  wire                decode_RS2_USE;
  wire                decode_RS1_USE;
  wire                execute_REGFILE_WRITE_VALID;
  wire                execute_BYPASSABLE_EXECUTE_STAGE;
  wire                memory_REGFILE_WRITE_VALID;
  wire       [31:0]   memory_INSTRUCTION;
  wire                memory_BYPASSABLE_MEMORY_STAGE;
  wire                writeBack_REGFILE_WRITE_VALID;
  wire       [31:0]   memory_REGFILE_WRITE_DATA;
  wire       `ShiftCtrlEnum_defaultEncoding_type execute_SHIFT_CTRL;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_21_;
  wire                execute_SRC_LESS_UNSIGNED;
  wire                execute_SRC2_FORCE_ZERO;
  wire                execute_SRC_USE_SUB_LESS;
  wire       [31:0]   _zz_22_;
  wire       [31:0]   _zz_23_;
  wire       `Src2CtrlEnum_defaultEncoding_type decode_SRC2_CTRL;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_24_;
  wire       [31:0]   _zz_25_;
  wire       `Src1CtrlEnum_defaultEncoding_type decode_SRC1_CTRL;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_26_;
  wire                decode_SRC_USE_SUB_LESS;
  wire                decode_SRC_ADD_ZERO;
  wire       [31:0]   execute_SRC_ADD_SUB;
  wire                execute_SRC_LESS;
  wire       `AluCtrlEnum_defaultEncoding_type execute_ALU_CTRL;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_27_;
  wire       [31:0]   execute_SRC2;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type execute_ALU_BITWISE_CTRL;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_28_;
  wire       [31:0]   _zz_29_;
  wire                _zz_30_;
  reg                 _zz_31_;
  wire       [31:0]   decode_INSTRUCTION_ANTICIPATED;
  reg                 decode_REGFILE_WRITE_VALID;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_32_;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_33_;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_34_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_35_;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_36_;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_37_;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_38_;
  reg        [31:0]   _zz_39_;
  wire       [31:0]   execute_SRC1;
  wire                execute_CSR_READ_OPCODE;
  wire                execute_CSR_WRITE_OPCODE;
  wire                execute_IS_CSR;
  wire       `EnvCtrlEnum_defaultEncoding_type memory_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_40_;
  wire       `EnvCtrlEnum_defaultEncoding_type execute_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_41_;
  wire       `EnvCtrlEnum_defaultEncoding_type writeBack_ENV_CTRL;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_42_;
  wire                writeBack_MEMORY_STORE;
  reg        [31:0]   _zz_43_;
  wire                writeBack_MEMORY_ENABLE;
  wire       [1:0]    writeBack_MEMORY_ADDRESS_LOW;
  wire       [31:0]   writeBack_MEMORY_READ_DATA;
  wire                memory_MEMORY_STORE;
  wire                memory_MEMORY_ENABLE;
  wire       [31:0]   execute_SRC_ADD;
  wire       [31:0]   execute_RS2;
  wire       [31:0]   execute_INSTRUCTION;
  wire                execute_MEMORY_STORE;
  wire                execute_MEMORY_ENABLE;
  wire                execute_ALIGNEMENT_FAULT;
  reg        [31:0]   _zz_44_;
  wire       [31:0]   decode_PC;
  wire       [31:0]   decode_INSTRUCTION;
  wire       [31:0]   writeBack_PC;
  wire       [31:0]   writeBack_INSTRUCTION;
  reg                 decode_arbitration_haltItself;
  reg                 decode_arbitration_haltByOther;
  reg                 decode_arbitration_removeIt;
  wire                decode_arbitration_flushIt;
  wire                decode_arbitration_flushNext;
  reg                 decode_arbitration_isValid;
  wire                decode_arbitration_isStuck;
  wire                decode_arbitration_isStuckByOthers;
  wire                decode_arbitration_isFlushed;
  wire                decode_arbitration_isMoving;
  wire                decode_arbitration_isFiring;
  reg                 execute_arbitration_haltItself;
  reg                 execute_arbitration_haltByOther;
  reg                 execute_arbitration_removeIt;
  reg                 execute_arbitration_flushIt;
  reg                 execute_arbitration_flushNext;
  reg                 execute_arbitration_isValid;
  wire                execute_arbitration_isStuck;
  wire                execute_arbitration_isStuckByOthers;
  wire                execute_arbitration_isFlushed;
  wire                execute_arbitration_isMoving;
  wire                execute_arbitration_isFiring;
  reg                 memory_arbitration_haltItself;
  wire                memory_arbitration_haltByOther;
  reg                 memory_arbitration_removeIt;
  wire                memory_arbitration_flushIt;
  reg                 memory_arbitration_flushNext;
  reg                 memory_arbitration_isValid;
  wire                memory_arbitration_isStuck;
  wire                memory_arbitration_isStuckByOthers;
  wire                memory_arbitration_isFlushed;
  wire                memory_arbitration_isMoving;
  wire                memory_arbitration_isFiring;
  wire                writeBack_arbitration_haltItself;
  wire                writeBack_arbitration_haltByOther;
  reg                 writeBack_arbitration_removeIt;
  wire                writeBack_arbitration_flushIt;
  reg                 writeBack_arbitration_flushNext;
  reg                 writeBack_arbitration_isValid;
  wire                writeBack_arbitration_isStuck;
  wire                writeBack_arbitration_isStuckByOthers;
  wire                writeBack_arbitration_isFlushed;
  wire                writeBack_arbitration_isMoving;
  wire                writeBack_arbitration_isFiring;
  wire       [31:0]   lastStageInstruction /* verilator public */ ;
  wire       [31:0]   lastStagePc /* verilator public */ ;
  wire                lastStageIsValid /* verilator public */ ;
  wire                lastStageIsFiring /* verilator public */ ;
  reg                 IBusSimplePlugin_fetcherHalt;
  reg                 IBusSimplePlugin_incomingInstruction;
  wire                IBusSimplePlugin_pcValids_0;
  wire                IBusSimplePlugin_pcValids_1;
  wire                IBusSimplePlugin_pcValids_2;
  wire                IBusSimplePlugin_pcValids_3;
  wire                CsrPlugin_inWfi /* verilator public */ ;
  reg                 CsrPlugin_thirdPartyWake;
  reg                 CsrPlugin_jumpInterface_valid;
  reg        [31:0]   CsrPlugin_jumpInterface_payload;
  wire                CsrPlugin_exceptionPendings_0;
  wire                CsrPlugin_exceptionPendings_1;
  wire                CsrPlugin_exceptionPendings_2;
  wire                CsrPlugin_exceptionPendings_3;
  wire                contextSwitching;
  reg        [1:0]    CsrPlugin_privilege;
  reg                 CsrPlugin_forceMachineWire;
  reg                 CsrPlugin_allowInterrupts;
  reg                 CsrPlugin_allowException;
  wire                BranchPlugin_jumpInterface_valid;
  wire       [31:0]   BranchPlugin_jumpInterface_payload;
  reg                 IBusSimplePlugin_injectionPort_valid;
  reg                 IBusSimplePlugin_injectionPort_ready;
  wire       [31:0]   IBusSimplePlugin_injectionPort_payload;
  wire                IBusSimplePlugin_externalFlush;
  wire                IBusSimplePlugin_jump_pcLoad_valid;
  wire       [31:0]   IBusSimplePlugin_jump_pcLoad_payload;
  wire       [1:0]    _zz_45_;
  wire                IBusSimplePlugin_fetchPc_output_valid;
  wire                IBusSimplePlugin_fetchPc_output_ready;
  wire       [31:0]   IBusSimplePlugin_fetchPc_output_payload;
  reg        [31:0]   IBusSimplePlugin_fetchPc_pcReg /* verilator public */ ;
  reg                 IBusSimplePlugin_fetchPc_correction;
  reg                 IBusSimplePlugin_fetchPc_correctionReg;
  wire                IBusSimplePlugin_fetchPc_corrected;
  reg                 IBusSimplePlugin_fetchPc_pcRegPropagate;
  reg                 IBusSimplePlugin_fetchPc_booted;
  reg                 IBusSimplePlugin_fetchPc_inc;
  reg        [31:0]   IBusSimplePlugin_fetchPc_pc;
  reg                 IBusSimplePlugin_fetchPc_flushed;
  wire                IBusSimplePlugin_iBusRsp_redoFetch;
  wire                IBusSimplePlugin_iBusRsp_stages_0_input_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_0_input_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_0_input_payload;
  wire                IBusSimplePlugin_iBusRsp_stages_0_output_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_0_output_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_0_output_payload;
  wire                IBusSimplePlugin_iBusRsp_stages_0_halt;
  wire                IBusSimplePlugin_iBusRsp_stages_1_input_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_1_input_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_1_input_payload;
  wire                IBusSimplePlugin_iBusRsp_stages_1_output_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_1_output_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_1_output_payload;
  reg                 IBusSimplePlugin_iBusRsp_stages_1_halt;
  wire                IBusSimplePlugin_iBusRsp_stages_2_input_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_2_input_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_2_input_payload;
  wire                IBusSimplePlugin_iBusRsp_stages_2_output_valid;
  wire                IBusSimplePlugin_iBusRsp_stages_2_output_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_stages_2_output_payload;
  wire                IBusSimplePlugin_iBusRsp_stages_2_halt;
  wire                _zz_46_;
  wire                _zz_47_;
  wire                _zz_48_;
  wire                IBusSimplePlugin_iBusRsp_flush;
  wire                _zz_49_;
  wire                _zz_50_;
  reg                 _zz_51_;
  wire                _zz_52_;
  reg                 _zz_53_;
  reg        [31:0]   _zz_54_;
  reg                 IBusSimplePlugin_iBusRsp_readyForError;
  wire                IBusSimplePlugin_iBusRsp_output_valid;
  wire                IBusSimplePlugin_iBusRsp_output_ready;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_output_payload_pc;
  wire                IBusSimplePlugin_iBusRsp_output_payload_rsp_error;
  wire       [31:0]   IBusSimplePlugin_iBusRsp_output_payload_rsp_inst;
  wire                IBusSimplePlugin_iBusRsp_output_payload_isRvc;
  wire                IBusSimplePlugin_injector_decodeInput_valid;
  wire                IBusSimplePlugin_injector_decodeInput_ready;
  wire       [31:0]   IBusSimplePlugin_injector_decodeInput_payload_pc;
  wire                IBusSimplePlugin_injector_decodeInput_payload_rsp_error;
  wire       [31:0]   IBusSimplePlugin_injector_decodeInput_payload_rsp_inst;
  wire                IBusSimplePlugin_injector_decodeInput_payload_isRvc;
  reg                 _zz_55_;
  reg        [31:0]   _zz_56_;
  reg                 _zz_57_;
  reg        [31:0]   _zz_58_;
  reg                 _zz_59_;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_0;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_1;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_2;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_3;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_4;
  reg                 IBusSimplePlugin_injector_nextPcCalc_valids_5;
  reg        [31:0]   IBusSimplePlugin_injector_formal_rawInDecode;
  wire                IBusSimplePlugin_cmd_valid;
  wire                IBusSimplePlugin_cmd_ready;
  wire       [31:0]   IBusSimplePlugin_cmd_payload_pc;
  wire                IBusSimplePlugin_pending_inc;
  wire                IBusSimplePlugin_pending_dec;
  reg        [2:0]    IBusSimplePlugin_pending_value;
  wire       [2:0]    IBusSimplePlugin_pending_next;
  wire                IBusSimplePlugin_cmdFork_canEmit;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_output_valid;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_output_ready;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_output_payload_error;
  wire       [31:0]   IBusSimplePlugin_rspJoin_rspBuffer_output_payload_inst;
  reg        [2:0]    IBusSimplePlugin_rspJoin_rspBuffer_discardCounter;
  wire                IBusSimplePlugin_rspJoin_rspBuffer_flush;
  wire       [31:0]   IBusSimplePlugin_rspJoin_fetchRsp_pc;
  reg                 IBusSimplePlugin_rspJoin_fetchRsp_rsp_error;
  wire       [31:0]   IBusSimplePlugin_rspJoin_fetchRsp_rsp_inst;
  wire                IBusSimplePlugin_rspJoin_fetchRsp_isRvc;
  wire                IBusSimplePlugin_rspJoin_join_valid;
  wire                IBusSimplePlugin_rspJoin_join_ready;
  wire       [31:0]   IBusSimplePlugin_rspJoin_join_payload_pc;
  wire                IBusSimplePlugin_rspJoin_join_payload_rsp_error;
  wire       [31:0]   IBusSimplePlugin_rspJoin_join_payload_rsp_inst;
  wire                IBusSimplePlugin_rspJoin_join_payload_isRvc;
  wire                IBusSimplePlugin_rspJoin_exceptionDetected;
  wire                _zz_60_;
  wire                _zz_61_;
  reg                 execute_DBusSimplePlugin_skipCmd;
  reg        [31:0]   _zz_62_;
  reg        [3:0]    _zz_63_;
  wire       [3:0]    execute_DBusSimplePlugin_formalMask;
  reg        [31:0]   writeBack_DBusSimplePlugin_rspShifted;
  wire                _zz_64_;
  reg        [31:0]   _zz_65_;
  wire                _zz_66_;
  reg        [31:0]   _zz_67_;
  reg        [31:0]   writeBack_DBusSimplePlugin_rspFormated;
  wire       [1:0]    CsrPlugin_misa_base;
  wire       [25:0]   CsrPlugin_misa_extensions;
  wire       [1:0]    CsrPlugin_mtvec_mode;
  wire       [29:0]   CsrPlugin_mtvec_base;
  reg        [31:0]   CsrPlugin_mepc;
  reg                 CsrPlugin_mstatus_MIE;
  reg                 CsrPlugin_mstatus_MPIE;
  reg        [1:0]    CsrPlugin_mstatus_MPP;
  reg                 CsrPlugin_mip_MEIP;
  reg                 CsrPlugin_mip_MTIP;
  reg                 CsrPlugin_mip_MSIP;
  reg                 CsrPlugin_mie_MEIE;
  reg                 CsrPlugin_mie_MTIE;
  reg                 CsrPlugin_mie_MSIE;
  reg                 CsrPlugin_mcause_interrupt;
  reg        [3:0]    CsrPlugin_mcause_exceptionCode;
  reg        [31:0]   CsrPlugin_mtval;
  reg        [63:0]   CsrPlugin_mcycle = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  reg        [63:0]   CsrPlugin_minstret = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  wire                _zz_68_;
  wire                _zz_69_;
  wire                _zz_70_;
  reg                 CsrPlugin_interrupt_valid;
  reg        [3:0]    CsrPlugin_interrupt_code /* verilator public */ ;
  reg        [1:0]    CsrPlugin_interrupt_targetPrivilege;
  wire                CsrPlugin_exception;
  wire                CsrPlugin_lastStageWasWfi;
  reg                 CsrPlugin_pipelineLiberator_pcValids_0;
  reg                 CsrPlugin_pipelineLiberator_pcValids_1;
  reg                 CsrPlugin_pipelineLiberator_pcValids_2;
  wire                CsrPlugin_pipelineLiberator_active;
  reg                 CsrPlugin_pipelineLiberator_done;
  wire                CsrPlugin_interruptJump /* verilator public */ ;
  reg                 CsrPlugin_hadException;
  wire       [1:0]    CsrPlugin_targetPrivilege;
  wire       [3:0]    CsrPlugin_trapCause;
  reg        [1:0]    CsrPlugin_xtvec_mode;
  reg        [29:0]   CsrPlugin_xtvec_base;
  reg                 execute_CsrPlugin_wfiWake;
  wire                execute_CsrPlugin_blockedBySideEffects;
  reg                 execute_CsrPlugin_illegalAccess;
  reg                 execute_CsrPlugin_illegalInstruction;
  wire       [31:0]   execute_CsrPlugin_readData;
  wire                execute_CsrPlugin_writeInstruction;
  wire                execute_CsrPlugin_readInstruction;
  wire                execute_CsrPlugin_writeEnable;
  wire                execute_CsrPlugin_readEnable;
  wire       [31:0]   execute_CsrPlugin_readToWriteData;
  reg        [31:0]   execute_CsrPlugin_writeData;
  wire       [11:0]   execute_CsrPlugin_csrAddress;
  wire       [25:0]   _zz_71_;
  wire                _zz_72_;
  wire                _zz_73_;
  wire                _zz_74_;
  wire                _zz_75_;
  wire                _zz_76_;
  wire       `Src1CtrlEnum_defaultEncoding_type _zz_77_;
  wire       `AluBitwiseCtrlEnum_defaultEncoding_type _zz_78_;
  wire       `Src2CtrlEnum_defaultEncoding_type _zz_79_;
  wire       `EnvCtrlEnum_defaultEncoding_type _zz_80_;
  wire       `ShiftCtrlEnum_defaultEncoding_type _zz_81_;
  wire       `AluCtrlEnum_defaultEncoding_type _zz_82_;
  wire       `BranchCtrlEnum_defaultEncoding_type _zz_83_;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress1;
  wire       [4:0]    decode_RegFilePlugin_regFileReadAddress2;
  wire       [31:0]   decode_RegFilePlugin_rs1Data;
  wire       [31:0]   decode_RegFilePlugin_rs2Data;
  reg                 lastStageRegFileWrite_valid /* verilator public */ ;
  wire       [4:0]    lastStageRegFileWrite_payload_address /* verilator public */ ;
  wire       [31:0]   lastStageRegFileWrite_payload_data /* verilator public */ ;
  reg                 _zz_84_;
  reg        [31:0]   execute_IntAluPlugin_bitwise;
  reg        [31:0]   _zz_85_;
  reg        [31:0]   _zz_86_;
  wire                _zz_87_;
  reg        [19:0]   _zz_88_;
  wire                _zz_89_;
  reg        [19:0]   _zz_90_;
  reg        [31:0]   _zz_91_;
  reg        [31:0]   execute_SrcPlugin_addSub;
  wire                execute_SrcPlugin_less;
  reg                 execute_LightShifterPlugin_isActive;
  wire                execute_LightShifterPlugin_isShift;
  reg        [4:0]    execute_LightShifterPlugin_amplitudeReg;
  wire       [4:0]    execute_LightShifterPlugin_amplitude;
  wire       [31:0]   execute_LightShifterPlugin_shiftInput;
  wire                execute_LightShifterPlugin_done;
  reg        [31:0]   _zz_92_;
  reg                 _zz_93_;
  reg                 _zz_94_;
  reg                 _zz_95_;
  reg        [4:0]    _zz_96_;
  wire                execute_BranchPlugin_eq;
  wire       [2:0]    _zz_97_;
  reg                 _zz_98_;
  reg                 _zz_99_;
  wire       [31:0]   execute_BranchPlugin_branch_src1;
  wire                _zz_100_;
  reg        [10:0]   _zz_101_;
  wire                _zz_102_;
  reg        [19:0]   _zz_103_;
  wire                _zz_104_;
  reg        [18:0]   _zz_105_;
  reg        [31:0]   _zz_106_;
  wire       [31:0]   execute_BranchPlugin_branch_src2;
  wire       [31:0]   execute_BranchPlugin_branchAdder;
  reg                 DebugPlugin_firstCycle;
  reg                 DebugPlugin_secondCycle;
  reg                 DebugPlugin_resetIt;
  reg                 DebugPlugin_haltIt;
  reg                 DebugPlugin_stepIt;
  reg                 DebugPlugin_isPipBusy;
  reg                 DebugPlugin_godmode;
  reg                 DebugPlugin_haltedByBreak;
  reg        [31:0]   DebugPlugin_busReadDataReg;
  reg                 _zz_107_;
  reg                 DebugPlugin_resetIt_regNext;
  reg                 decode_to_execute_CSR_READ_OPCODE;
  reg        `BranchCtrlEnum_defaultEncoding_type decode_to_execute_BRANCH_CTRL;
  reg        `ShiftCtrlEnum_defaultEncoding_type decode_to_execute_SHIFT_CTRL;
  reg        [31:0]   execute_to_memory_REGFILE_WRITE_DATA;
  reg        [31:0]   memory_to_writeBack_REGFILE_WRITE_DATA;
  reg                 decode_to_execute_CSR_WRITE_OPCODE;
  reg                 decode_to_execute_MEMORY_STORE;
  reg                 execute_to_memory_MEMORY_STORE;
  reg                 memory_to_writeBack_MEMORY_STORE;
  reg                 execute_to_memory_BRANCH_DO;
  reg                 decode_to_execute_SRC_USE_SUB_LESS;
  reg        [1:0]    execute_to_memory_MEMORY_ADDRESS_LOW;
  reg        [1:0]    memory_to_writeBack_MEMORY_ADDRESS_LOW;
  reg        [31:0]   decode_to_execute_FORMAL_PC_NEXT;
  reg        [31:0]   execute_to_memory_FORMAL_PC_NEXT;
  reg        [31:0]   memory_to_writeBack_FORMAL_PC_NEXT;
  reg        [31:0]   decode_to_execute_PC;
  reg        [31:0]   execute_to_memory_PC;
  reg        [31:0]   memory_to_writeBack_PC;
  reg        [31:0]   execute_to_memory_BRANCH_CALC;
  reg                 decode_to_execute_SRC2_FORCE_ZERO;
  reg                 decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  reg                 decode_to_execute_DO_EBREAK;
  reg        [31:0]   decode_to_execute_INSTRUCTION;
  reg        [31:0]   execute_to_memory_INSTRUCTION;
  reg        [31:0]   memory_to_writeBack_INSTRUCTION;
  reg                 decode_to_execute_IS_CSR;
  reg        [31:0]   decode_to_execute_RS2;
  reg        `EnvCtrlEnum_defaultEncoding_type decode_to_execute_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type execute_to_memory_ENV_CTRL;
  reg        `EnvCtrlEnum_defaultEncoding_type memory_to_writeBack_ENV_CTRL;
  reg        [31:0]   decode_to_execute_SRC2;
  reg                 decode_to_execute_MEMORY_ENABLE;
  reg                 execute_to_memory_MEMORY_ENABLE;
  reg                 memory_to_writeBack_MEMORY_ENABLE;
  reg        `AluCtrlEnum_defaultEncoding_type decode_to_execute_ALU_CTRL;
  reg                 decode_to_execute_SRC_LESS_UNSIGNED;
  reg        [31:0]   memory_to_writeBack_MEMORY_READ_DATA;
  reg                 decode_to_execute_REGFILE_WRITE_VALID;
  reg                 execute_to_memory_REGFILE_WRITE_VALID;
  reg                 memory_to_writeBack_REGFILE_WRITE_VALID;
  reg        [31:0]   decode_to_execute_SRC1;
  reg                 decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  reg                 execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  reg        [31:0]   decode_to_execute_RS1;
  reg        `AluBitwiseCtrlEnum_defaultEncoding_type decode_to_execute_ALU_BITWISE_CTRL;
  reg        [2:0]    _zz_108_;
  reg                 execute_CsrPlugin_csr_768;
  reg                 execute_CsrPlugin_csr_836;
  reg                 execute_CsrPlugin_csr_772;
  reg                 execute_CsrPlugin_csr_834;
  reg        [31:0]   _zz_109_;
  reg        [31:0]   _zz_110_;
  reg        [31:0]   _zz_111_;
  reg        [31:0]   _zz_112_;
  `ifndef SYNTHESIS
  reg [39:0] decode_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_1__string;
  reg [39:0] _zz_2__string;
  reg [39:0] _zz_3__string;
  reg [63:0] decode_ALU_CTRL_string;
  reg [63:0] _zz_4__string;
  reg [63:0] _zz_5__string;
  reg [63:0] _zz_6__string;
  reg [31:0] _zz_7__string;
  reg [31:0] _zz_8__string;
  reg [31:0] _zz_9__string;
  reg [31:0] _zz_10__string;
  reg [31:0] decode_ENV_CTRL_string;
  reg [31:0] _zz_11__string;
  reg [31:0] _zz_12__string;
  reg [31:0] _zz_13__string;
  reg [71:0] decode_SHIFT_CTRL_string;
  reg [71:0] _zz_14__string;
  reg [71:0] _zz_15__string;
  reg [71:0] _zz_16__string;
  reg [31:0] decode_BRANCH_CTRL_string;
  reg [31:0] _zz_17__string;
  reg [31:0] _zz_18__string;
  reg [31:0] _zz_19__string;
  reg [31:0] execute_BRANCH_CTRL_string;
  reg [31:0] _zz_20__string;
  reg [71:0] execute_SHIFT_CTRL_string;
  reg [71:0] _zz_21__string;
  reg [23:0] decode_SRC2_CTRL_string;
  reg [23:0] _zz_24__string;
  reg [95:0] decode_SRC1_CTRL_string;
  reg [95:0] _zz_26__string;
  reg [63:0] execute_ALU_CTRL_string;
  reg [63:0] _zz_27__string;
  reg [39:0] execute_ALU_BITWISE_CTRL_string;
  reg [39:0] _zz_28__string;
  reg [31:0] _zz_32__string;
  reg [63:0] _zz_33__string;
  reg [71:0] _zz_34__string;
  reg [31:0] _zz_35__string;
  reg [23:0] _zz_36__string;
  reg [39:0] _zz_37__string;
  reg [95:0] _zz_38__string;
  reg [31:0] memory_ENV_CTRL_string;
  reg [31:0] _zz_40__string;
  reg [31:0] execute_ENV_CTRL_string;
  reg [31:0] _zz_41__string;
  reg [31:0] writeBack_ENV_CTRL_string;
  reg [31:0] _zz_42__string;
  reg [95:0] _zz_77__string;
  reg [39:0] _zz_78__string;
  reg [23:0] _zz_79__string;
  reg [31:0] _zz_80__string;
  reg [71:0] _zz_81__string;
  reg [63:0] _zz_82__string;
  reg [31:0] _zz_83__string;
  reg [31:0] decode_to_execute_BRANCH_CTRL_string;
  reg [71:0] decode_to_execute_SHIFT_CTRL_string;
  reg [31:0] decode_to_execute_ENV_CTRL_string;
  reg [31:0] execute_to_memory_ENV_CTRL_string;
  reg [31:0] memory_to_writeBack_ENV_CTRL_string;
  reg [63:0] decode_to_execute_ALU_CTRL_string;
  reg [39:0] decode_to_execute_ALU_BITWISE_CTRL_string;
  `endif

  /* verilator public */
  reg [31:0] RegFilePlugin_regFile [0:31]; // synthesis ram_style=dram

  assign _zz_117_ = (execute_arbitration_isValid && execute_IS_CSR);
  assign _zz_118_ = ((execute_arbitration_isValid && execute_LightShifterPlugin_isShift) && (execute_SRC2[4 : 0] != 5'h0));
  assign _zz_119_ = (! execute_arbitration_isStuckByOthers);
  assign _zz_120_ = (execute_arbitration_isValid && execute_DO_EBREAK);
  assign _zz_121_ = (({writeBack_arbitration_isValid,memory_arbitration_isValid} != (2'b00)) == 1'b0);
  assign _zz_122_ = (CsrPlugin_hadException || CsrPlugin_interruptJump);
  assign _zz_123_ = (writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET));
  assign _zz_124_ = (DebugPlugin_stepIt && IBusSimplePlugin_incomingInstruction);
  assign _zz_125_ = writeBack_INSTRUCTION[29 : 28];
  assign _zz_126_ = (writeBack_arbitration_isValid && writeBack_REGFILE_WRITE_VALID);
  assign _zz_127_ = (1'b1 || (! 1'b1));
  assign _zz_128_ = (memory_arbitration_isValid && memory_REGFILE_WRITE_VALID);
  assign _zz_129_ = (1'b1 || (! memory_BYPASSABLE_MEMORY_STAGE));
  assign _zz_130_ = (execute_arbitration_isValid && execute_REGFILE_WRITE_VALID);
  assign _zz_131_ = (1'b1 || (! execute_BYPASSABLE_EXECUTE_STAGE));
  assign _zz_132_ = debug_bus_cmd_payload_address[7 : 2];
  assign _zz_133_ = (CsrPlugin_mstatus_MIE || (CsrPlugin_privilege < (2'b11)));
  assign _zz_134_ = ((_zz_68_ && 1'b1) && (! 1'b0));
  assign _zz_135_ = ((_zz_69_ && 1'b1) && (! 1'b0));
  assign _zz_136_ = ((_zz_70_ && 1'b1) && (! 1'b0));
  assign _zz_137_ = writeBack_INSTRUCTION[13 : 12];
  assign _zz_138_ = execute_INSTRUCTION[13];
  assign _zz_139_ = _zz_71_[17 : 17];
  assign _zz_140_ = _zz_71_[13 : 13];
  assign _zz_141_ = _zz_71_[22 : 22];
  assign _zz_142_ = _zz_71_[15 : 15];
  assign _zz_143_ = _zz_71_[18 : 18];
  assign _zz_144_ = _zz_71_[2 : 2];
  assign _zz_145_ = _zz_71_[9 : 9];
  assign _zz_146_ = _zz_71_[21 : 21];
  assign _zz_147_ = _zz_71_[14 : 14];
  assign _zz_148_ = _zz_71_[25 : 25];
  assign _zz_149_ = _zz_71_[16 : 16];
  assign _zz_150_ = _zz_71_[8 : 8];
  assign _zz_151_ = (_zz_45_ & (~ _zz_152_));
  assign _zz_152_ = (_zz_45_ - (2'b01));
  assign _zz_153_ = {IBusSimplePlugin_fetchPc_inc,(2'b00)};
  assign _zz_154_ = {29'd0, _zz_153_};
  assign _zz_155_ = (IBusSimplePlugin_pending_value + _zz_157_);
  assign _zz_156_ = IBusSimplePlugin_pending_inc;
  assign _zz_157_ = {2'd0, _zz_156_};
  assign _zz_158_ = IBusSimplePlugin_pending_dec;
  assign _zz_159_ = {2'd0, _zz_158_};
  assign _zz_160_ = (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_valid && (IBusSimplePlugin_rspJoin_rspBuffer_discardCounter != (3'b000)));
  assign _zz_161_ = {2'd0, _zz_160_};
  assign _zz_162_ = execute_SRC_LESS;
  assign _zz_163_ = (3'b100);
  assign _zz_164_ = decode_INSTRUCTION[19 : 15];
  assign _zz_165_ = decode_INSTRUCTION[31 : 20];
  assign _zz_166_ = {decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]};
  assign _zz_167_ = ($signed(_zz_168_) + $signed(_zz_171_));
  assign _zz_168_ = ($signed(_zz_169_) + $signed(_zz_170_));
  assign _zz_169_ = execute_SRC1;
  assign _zz_170_ = (execute_SRC_USE_SUB_LESS ? (~ execute_SRC2) : execute_SRC2);
  assign _zz_171_ = (execute_SRC_USE_SUB_LESS ? _zz_172_ : _zz_173_);
  assign _zz_172_ = 32'h00000001;
  assign _zz_173_ = 32'h0;
  assign _zz_174_ = (_zz_175_ >>> 1);
  assign _zz_175_ = {((execute_SHIFT_CTRL == `ShiftCtrlEnum_defaultEncoding_SRA_1) && execute_LightShifterPlugin_shiftInput[31]),execute_LightShifterPlugin_shiftInput};
  assign _zz_176_ = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]};
  assign _zz_177_ = execute_INSTRUCTION[31 : 20];
  assign _zz_178_ = {{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]};
  assign _zz_179_ = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_180_ = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_181_ = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_182_ = execute_CsrPlugin_writeData[11 : 11];
  assign _zz_183_ = execute_CsrPlugin_writeData[7 : 7];
  assign _zz_184_ = execute_CsrPlugin_writeData[3 : 3];
  assign _zz_185_ = 1'b1;
  assign _zz_186_ = 1'b1;
  assign _zz_187_ = (decode_INSTRUCTION & 32'h00000044);
  assign _zz_188_ = 32'h00000040;
  assign _zz_189_ = ((decode_INSTRUCTION & 32'h00002014) == 32'h00002010);
  assign _zz_190_ = ((decode_INSTRUCTION & 32'h40004034) == 32'h40000030);
  assign _zz_191_ = ((decode_INSTRUCTION & 32'h0000001c) == 32'h00000004);
  assign _zz_192_ = ((decode_INSTRUCTION & 32'h00000058) == 32'h00000040);
  assign _zz_193_ = ((decode_INSTRUCTION & _zz_198_) == 32'h0);
  assign _zz_194_ = (1'b0);
  assign _zz_195_ = ({_zz_199_,_zz_200_} != (2'b00));
  assign _zz_196_ = ({_zz_201_,_zz_202_} != (2'b00));
  assign _zz_197_ = {(_zz_203_ != _zz_204_),{_zz_205_,{_zz_206_,_zz_207_}}};
  assign _zz_198_ = 32'h00000058;
  assign _zz_199_ = ((decode_INSTRUCTION & 32'h00000034) == 32'h00000020);
  assign _zz_200_ = ((decode_INSTRUCTION & 32'h00000064) == 32'h00000020);
  assign _zz_201_ = ((decode_INSTRUCTION & _zz_208_) == 32'h00006000);
  assign _zz_202_ = ((decode_INSTRUCTION & _zz_209_) == 32'h00004000);
  assign _zz_203_ = _zz_76_;
  assign _zz_204_ = (1'b0);
  assign _zz_205_ = (_zz_74_ != (1'b0));
  assign _zz_206_ = (_zz_210_ != (1'b0));
  assign _zz_207_ = {(_zz_211_ != _zz_212_),{_zz_213_,{_zz_214_,_zz_215_}}};
  assign _zz_208_ = 32'h00006004;
  assign _zz_209_ = 32'h00005004;
  assign _zz_210_ = ((decode_INSTRUCTION & 32'h00000010) == 32'h00000010);
  assign _zz_211_ = {(_zz_216_ == _zz_217_),(_zz_218_ == _zz_219_)};
  assign _zz_212_ = (2'b00);
  assign _zz_213_ = ({_zz_220_,_zz_221_} != (2'b00));
  assign _zz_214_ = ({_zz_222_,_zz_223_} != (4'b0000));
  assign _zz_215_ = {(_zz_224_ != _zz_225_),{_zz_226_,{_zz_227_,_zz_228_}}};
  assign _zz_216_ = (decode_INSTRUCTION & 32'h00000064);
  assign _zz_217_ = 32'h00000024;
  assign _zz_218_ = (decode_INSTRUCTION & 32'h00003054);
  assign _zz_219_ = 32'h00001010;
  assign _zz_220_ = ((decode_INSTRUCTION & _zz_229_) == 32'h00001050);
  assign _zz_221_ = ((decode_INSTRUCTION & _zz_230_) == 32'h00002050);
  assign _zz_222_ = (_zz_231_ == _zz_232_);
  assign _zz_223_ = {_zz_233_,{_zz_234_,_zz_235_}};
  assign _zz_224_ = {_zz_236_,_zz_237_};
  assign _zz_225_ = (2'b00);
  assign _zz_226_ = ({_zz_238_,_zz_239_} != (2'b00));
  assign _zz_227_ = (_zz_240_ != _zz_241_);
  assign _zz_228_ = {_zz_242_,{_zz_243_,_zz_244_}};
  assign _zz_229_ = 32'h00001050;
  assign _zz_230_ = 32'h00002050;
  assign _zz_231_ = (decode_INSTRUCTION & 32'h00000044);
  assign _zz_232_ = 32'h0;
  assign _zz_233_ = ((decode_INSTRUCTION & _zz_245_) == 32'h0);
  assign _zz_234_ = _zz_76_;
  assign _zz_235_ = (_zz_246_ == _zz_247_);
  assign _zz_236_ = ((decode_INSTRUCTION & _zz_248_) == 32'h00002000);
  assign _zz_237_ = ((decode_INSTRUCTION & _zz_249_) == 32'h00001000);
  assign _zz_238_ = (_zz_250_ == _zz_251_);
  assign _zz_239_ = (_zz_252_ == _zz_253_);
  assign _zz_240_ = (_zz_254_ == _zz_255_);
  assign _zz_241_ = (1'b0);
  assign _zz_242_ = ({_zz_256_,_zz_257_} != (2'b00));
  assign _zz_243_ = (_zz_258_ != _zz_259_);
  assign _zz_244_ = {_zz_260_,{_zz_261_,_zz_262_}};
  assign _zz_245_ = 32'h00000018;
  assign _zz_246_ = (decode_INSTRUCTION & 32'h00005004);
  assign _zz_247_ = 32'h00001000;
  assign _zz_248_ = 32'h00002010;
  assign _zz_249_ = 32'h00005000;
  assign _zz_250_ = (decode_INSTRUCTION & 32'h00000050);
  assign _zz_251_ = 32'h00000040;
  assign _zz_252_ = (decode_INSTRUCTION & 32'h00103040);
  assign _zz_253_ = 32'h00000040;
  assign _zz_254_ = (decode_INSTRUCTION & 32'h00007054);
  assign _zz_255_ = 32'h00005010;
  assign _zz_256_ = ((decode_INSTRUCTION & _zz_263_) == 32'h40001010);
  assign _zz_257_ = ((decode_INSTRUCTION & _zz_264_) == 32'h00001010);
  assign _zz_258_ = ((decode_INSTRUCTION & _zz_265_) == 32'h00000050);
  assign _zz_259_ = (1'b0);
  assign _zz_260_ = ({_zz_75_,{_zz_266_,_zz_267_}} != 6'h0);
  assign _zz_261_ = (_zz_268_ != (1'b0));
  assign _zz_262_ = {(_zz_269_ != _zz_270_),{_zz_271_,{_zz_272_,_zz_273_}}};
  assign _zz_263_ = 32'h40003054;
  assign _zz_264_ = 32'h00007054;
  assign _zz_265_ = 32'h10003050;
  assign _zz_266_ = ((decode_INSTRUCTION & _zz_274_) == 32'h00001010);
  assign _zz_267_ = {(_zz_275_ == _zz_276_),{_zz_74_,{_zz_277_,_zz_278_}}};
  assign _zz_268_ = ((decode_INSTRUCTION & 32'h00103050) == 32'h00000050);
  assign _zz_269_ = {_zz_73_,(_zz_279_ == _zz_280_)};
  assign _zz_270_ = (2'b00);
  assign _zz_271_ = ({_zz_73_,_zz_281_} != (2'b00));
  assign _zz_272_ = (_zz_282_ != (1'b0));
  assign _zz_273_ = {(_zz_283_ != _zz_284_),{_zz_285_,{_zz_286_,_zz_287_}}};
  assign _zz_274_ = 32'h00001010;
  assign _zz_275_ = (decode_INSTRUCTION & 32'h00002010);
  assign _zz_276_ = 32'h00002010;
  assign _zz_277_ = ((decode_INSTRUCTION & _zz_288_) == 32'h00000004);
  assign _zz_278_ = ((decode_INSTRUCTION & _zz_289_) == 32'h0);
  assign _zz_279_ = (decode_INSTRUCTION & 32'h00000070);
  assign _zz_280_ = 32'h00000020;
  assign _zz_281_ = ((decode_INSTRUCTION & 32'h00000020) == 32'h0);
  assign _zz_282_ = ((decode_INSTRUCTION & 32'h00001000) == 32'h00001000);
  assign _zz_283_ = ((decode_INSTRUCTION & _zz_290_) == 32'h00002000);
  assign _zz_284_ = (1'b0);
  assign _zz_285_ = ((_zz_291_ == _zz_292_) != (1'b0));
  assign _zz_286_ = ({_zz_293_,_zz_294_} != (2'b00));
  assign _zz_287_ = ({_zz_295_,_zz_296_} != (2'b00));
  assign _zz_288_ = 32'h0000000c;
  assign _zz_289_ = 32'h00000028;
  assign _zz_290_ = 32'h00003000;
  assign _zz_291_ = (decode_INSTRUCTION & 32'h00000020);
  assign _zz_292_ = 32'h00000020;
  assign _zz_293_ = ((decode_INSTRUCTION & 32'h00000014) == 32'h00000004);
  assign _zz_294_ = _zz_72_;
  assign _zz_295_ = ((decode_INSTRUCTION & 32'h00000044) == 32'h00000004);
  assign _zz_296_ = _zz_72_;
  always @ (posedge io_clk) begin
    if(_zz_185_) begin
      _zz_115_ <= RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress1];
    end
  end

  always @ (posedge io_clk) begin
    if(_zz_186_) begin
      _zz_116_ <= RegFilePlugin_regFile[decode_RegFilePlugin_regFileReadAddress2];
    end
  end

  always @ (posedge io_clk) begin
    if(_zz_31_) begin
      RegFilePlugin_regFile[lastStageRegFileWrite_payload_address] <= lastStageRegFileWrite_payload_data;
    end
  end

ph1_logic_StreamFifoLowLatency IBusSimplePlugin_rspJoin_rspBuffer_c ( 
    .io_push_valid            (iBus_rsp_valid                                                  ), //i
    .io_push_ready            (IBusSimplePlugin_rspJoin_rspBuffer_c_io_push_ready              ), //o
    .io_push_payload_error    (iBus_rsp_payload_error                                          ), //i
    .io_push_payload_inst     (iBus_rsp_payload_inst[31:0]                                     ), //i
    .io_pop_valid             (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_valid               ), //o
    .io_pop_ready             (_zz_113_                                                        ), //i
    .io_pop_payload_error     (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_error       ), //o
    .io_pop_payload_inst      (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_inst[31:0]  ), //o
    .io_flush                 (_zz_114_                                                        ), //i
    .io_occupancy             (IBusSimplePlugin_rspJoin_rspBuffer_c_io_occupancy               ), //o
    .io_clk                   (io_clk                                                          ), //i
    .resetCtrl_systemReset    (resetCtrl_systemReset                                           )  //i
  );
  `ifndef SYNTHESIS
  always @(*) begin
    case(decode_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_1_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_1__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_1__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_1__string = "AND_1";
      default : _zz_1__string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_2_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_2__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_2__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_2__string = "AND_1";
      default : _zz_2__string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_3_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_3__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_3__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_3__string = "AND_1";
      default : _zz_3__string = "?????";
    endcase
  end
  always @(*) begin
    case(decode_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_ALU_CTRL_string = "BITWISE ";
      default : decode_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_4_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_4__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_4__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_4__string = "BITWISE ";
      default : _zz_4__string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_5_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_5__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_5__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_5__string = "BITWISE ";
      default : _zz_5__string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_6_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_6__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_6__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_6__string = "BITWISE ";
      default : _zz_6__string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_7_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_7__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_7__string = "XRET";
      default : _zz_7__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_8_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_8__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_8__string = "XRET";
      default : _zz_8__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_9_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_9__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_9__string = "XRET";
      default : _zz_9__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_10_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_10__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_10__string = "XRET";
      default : _zz_10__string = "????";
    endcase
  end
  always @(*) begin
    case(decode_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_ENV_CTRL_string = "XRET";
      default : decode_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_11_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_11__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_11__string = "XRET";
      default : _zz_11__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_12_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_12__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_12__string = "XRET";
      default : _zz_12__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_13_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_13__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_13__string = "XRET";
      default : _zz_13__string = "????";
    endcase
  end
  always @(*) begin
    case(decode_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_14_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_14__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_14__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_14__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_14__string = "SRA_1    ";
      default : _zz_14__string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_15_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_15__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_15__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_15__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_15__string = "SRA_1    ";
      default : _zz_15__string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_16_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_16__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_16__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_16__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_16__string = "SRA_1    ";
      default : _zz_16__string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_BRANCH_CTRL_string = "JALR";
      default : decode_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_17_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_17__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_17__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_17__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_17__string = "JALR";
      default : _zz_17__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_18_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_18__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_18__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_18__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_18__string = "JALR";
      default : _zz_18__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_19_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_19__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_19__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_19__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_19__string = "JALR";
      default : _zz_19__string = "????";
    endcase
  end
  always @(*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : execute_BRANCH_CTRL_string = "JALR";
      default : execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_20_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_20__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_20__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_20__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_20__string = "JALR";
      default : _zz_20__string = "????";
    endcase
  end
  always @(*) begin
    case(execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : execute_SHIFT_CTRL_string = "SRA_1    ";
      default : execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_21_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_21__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_21__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_21__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_21__string = "SRA_1    ";
      default : _zz_21__string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : decode_SRC2_CTRL_string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : decode_SRC2_CTRL_string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : decode_SRC2_CTRL_string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : decode_SRC2_CTRL_string = "PC ";
      default : decode_SRC2_CTRL_string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_24_)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_24__string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_24__string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_24__string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_24__string = "PC ";
      default : _zz_24__string = "???";
    endcase
  end
  always @(*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : decode_SRC1_CTRL_string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : decode_SRC1_CTRL_string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : decode_SRC1_CTRL_string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : decode_SRC1_CTRL_string = "URS1        ";
      default : decode_SRC1_CTRL_string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_26_)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_26__string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_26__string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_26__string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_26__string = "URS1        ";
      default : _zz_26__string = "????????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : execute_ALU_CTRL_string = "BITWISE ";
      default : execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_27_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_27__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_27__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_27__string = "BITWISE ";
      default : _zz_27__string = "????????";
    endcase
  end
  always @(*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_28_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_28__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_28__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_28__string = "AND_1";
      default : _zz_28__string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_32_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_32__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_32__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_32__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_32__string = "JALR";
      default : _zz_32__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_33_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_33__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_33__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_33__string = "BITWISE ";
      default : _zz_33__string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_34_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_34__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_34__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_34__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_34__string = "SRA_1    ";
      default : _zz_34__string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_35_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_35__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_35__string = "XRET";
      default : _zz_35__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_36_)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_36__string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_36__string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_36__string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_36__string = "PC ";
      default : _zz_36__string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_37_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_37__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_37__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_37__string = "AND_1";
      default : _zz_37__string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_38_)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_38__string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_38__string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_38__string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_38__string = "URS1        ";
      default : _zz_38__string = "????????????";
    endcase
  end
  always @(*) begin
    case(memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_ENV_CTRL_string = "XRET";
      default : memory_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_40_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_40__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_40__string = "XRET";
      default : _zz_40__string = "????";
    endcase
  end
  always @(*) begin
    case(execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_ENV_CTRL_string = "XRET";
      default : execute_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_41_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_41__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_41__string = "XRET";
      default : _zz_41__string = "????";
    endcase
  end
  always @(*) begin
    case(writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : writeBack_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : writeBack_ENV_CTRL_string = "XRET";
      default : writeBack_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_42_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_42__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_42__string = "XRET";
      default : _zz_42__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_77_)
      `Src1CtrlEnum_defaultEncoding_RS : _zz_77__string = "RS          ";
      `Src1CtrlEnum_defaultEncoding_IMU : _zz_77__string = "IMU         ";
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : _zz_77__string = "PC_INCREMENT";
      `Src1CtrlEnum_defaultEncoding_URS1 : _zz_77__string = "URS1        ";
      default : _zz_77__string = "????????????";
    endcase
  end
  always @(*) begin
    case(_zz_78_)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : _zz_78__string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : _zz_78__string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : _zz_78__string = "AND_1";
      default : _zz_78__string = "?????";
    endcase
  end
  always @(*) begin
    case(_zz_79_)
      `Src2CtrlEnum_defaultEncoding_RS : _zz_79__string = "RS ";
      `Src2CtrlEnum_defaultEncoding_IMI : _zz_79__string = "IMI";
      `Src2CtrlEnum_defaultEncoding_IMS : _zz_79__string = "IMS";
      `Src2CtrlEnum_defaultEncoding_PC : _zz_79__string = "PC ";
      default : _zz_79__string = "???";
    endcase
  end
  always @(*) begin
    case(_zz_80_)
      `EnvCtrlEnum_defaultEncoding_NONE : _zz_80__string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : _zz_80__string = "XRET";
      default : _zz_80__string = "????";
    endcase
  end
  always @(*) begin
    case(_zz_81_)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : _zz_81__string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : _zz_81__string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : _zz_81__string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : _zz_81__string = "SRA_1    ";
      default : _zz_81__string = "?????????";
    endcase
  end
  always @(*) begin
    case(_zz_82_)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : _zz_82__string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : _zz_82__string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : _zz_82__string = "BITWISE ";
      default : _zz_82__string = "????????";
    endcase
  end
  always @(*) begin
    case(_zz_83_)
      `BranchCtrlEnum_defaultEncoding_INC : _zz_83__string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : _zz_83__string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : _zz_83__string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : _zz_83__string = "JALR";
      default : _zz_83__string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : decode_to_execute_BRANCH_CTRL_string = "INC ";
      `BranchCtrlEnum_defaultEncoding_B : decode_to_execute_BRANCH_CTRL_string = "B   ";
      `BranchCtrlEnum_defaultEncoding_JAL : decode_to_execute_BRANCH_CTRL_string = "JAL ";
      `BranchCtrlEnum_defaultEncoding_JALR : decode_to_execute_BRANCH_CTRL_string = "JALR";
      default : decode_to_execute_BRANCH_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_DISABLE_1 : decode_to_execute_SHIFT_CTRL_string = "DISABLE_1";
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : decode_to_execute_SHIFT_CTRL_string = "SLL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRL_1 : decode_to_execute_SHIFT_CTRL_string = "SRL_1    ";
      `ShiftCtrlEnum_defaultEncoding_SRA_1 : decode_to_execute_SHIFT_CTRL_string = "SRA_1    ";
      default : decode_to_execute_SHIFT_CTRL_string = "?????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : decode_to_execute_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : decode_to_execute_ENV_CTRL_string = "XRET";
      default : decode_to_execute_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(execute_to_memory_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : execute_to_memory_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : execute_to_memory_ENV_CTRL_string = "XRET";
      default : execute_to_memory_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(memory_to_writeBack_ENV_CTRL)
      `EnvCtrlEnum_defaultEncoding_NONE : memory_to_writeBack_ENV_CTRL_string = "NONE";
      `EnvCtrlEnum_defaultEncoding_XRET : memory_to_writeBack_ENV_CTRL_string = "XRET";
      default : memory_to_writeBack_ENV_CTRL_string = "????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_ADD_SUB : decode_to_execute_ALU_CTRL_string = "ADD_SUB ";
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : decode_to_execute_ALU_CTRL_string = "SLT_SLTU";
      `AluCtrlEnum_defaultEncoding_BITWISE : decode_to_execute_ALU_CTRL_string = "BITWISE ";
      default : decode_to_execute_ALU_CTRL_string = "????????";
    endcase
  end
  always @(*) begin
    case(decode_to_execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_XOR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "XOR_1";
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "OR_1 ";
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : decode_to_execute_ALU_BITWISE_CTRL_string = "AND_1";
      default : decode_to_execute_ALU_BITWISE_CTRL_string = "?????";
    endcase
  end
  `endif

  assign decode_ALU_BITWISE_CTRL = _zz_1_;
  assign _zz_2_ = _zz_3_;
  assign decode_RS1 = decode_RegFilePlugin_rs1Data;
  assign execute_BYPASSABLE_MEMORY_STAGE = decode_to_execute_BYPASSABLE_MEMORY_STAGE;
  assign decode_BYPASSABLE_MEMORY_STAGE = _zz_139_[0];
  assign decode_SRC1 = _zz_86_;
  assign memory_MEMORY_READ_DATA = dBus_rsp_data;
  assign decode_SRC_LESS_UNSIGNED = _zz_140_[0];
  assign decode_ALU_CTRL = _zz_4_;
  assign _zz_5_ = _zz_6_;
  assign decode_MEMORY_ENABLE = _zz_141_[0];
  assign decode_SRC2 = _zz_91_;
  assign _zz_7_ = _zz_8_;
  assign _zz_9_ = _zz_10_;
  assign decode_ENV_CTRL = _zz_11_;
  assign _zz_12_ = _zz_13_;
  assign decode_RS2 = decode_RegFilePlugin_rs2Data;
  assign decode_IS_CSR = _zz_142_[0];
  assign decode_DO_EBREAK = ((! DebugPlugin_haltIt) && (decode_IS_EBREAK || 1'b0));
  assign decode_BYPASSABLE_EXECUTE_STAGE = _zz_143_[0];
  assign decode_SRC2_FORCE_ZERO = (decode_SRC_ADD_ZERO && (! decode_SRC_USE_SUB_LESS));
  assign execute_BRANCH_CALC = {execute_BranchPlugin_branchAdder[31 : 1],(1'b0)};
  assign memory_PC = execute_to_memory_PC;
  assign writeBack_FORMAL_PC_NEXT = memory_to_writeBack_FORMAL_PC_NEXT;
  assign memory_FORMAL_PC_NEXT = execute_to_memory_FORMAL_PC_NEXT;
  assign execute_FORMAL_PC_NEXT = decode_to_execute_FORMAL_PC_NEXT;
  assign decode_FORMAL_PC_NEXT = (decode_PC + 32'h00000004);
  assign memory_MEMORY_ADDRESS_LOW = execute_to_memory_MEMORY_ADDRESS_LOW;
  assign execute_MEMORY_ADDRESS_LOW = dBus_cmd_payload_address[1 : 0];
  assign execute_BRANCH_DO = _zz_99_;
  assign decode_MEMORY_STORE = _zz_144_[0];
  assign decode_CSR_WRITE_OPCODE = (! (((decode_INSTRUCTION[14 : 13] == (2'b01)) && (decode_INSTRUCTION[19 : 15] == 5'h0)) || ((decode_INSTRUCTION[14 : 13] == (2'b11)) && (decode_INSTRUCTION[19 : 15] == 5'h0))));
  assign writeBack_REGFILE_WRITE_DATA = memory_to_writeBack_REGFILE_WRITE_DATA;
  assign execute_REGFILE_WRITE_DATA = _zz_85_;
  assign decode_SHIFT_CTRL = _zz_14_;
  assign _zz_15_ = _zz_16_;
  assign decode_BRANCH_CTRL = _zz_17_;
  assign _zz_18_ = _zz_19_;
  assign decode_CSR_READ_OPCODE = (decode_INSTRUCTION[13 : 7] != 7'h20);
  assign execute_DO_EBREAK = decode_to_execute_DO_EBREAK;
  assign decode_IS_EBREAK = _zz_145_[0];
  assign memory_BRANCH_CALC = execute_to_memory_BRANCH_CALC;
  assign memory_BRANCH_DO = execute_to_memory_BRANCH_DO;
  assign execute_PC = decode_to_execute_PC;
  assign execute_RS1 = decode_to_execute_RS1;
  assign execute_BRANCH_CTRL = _zz_20_;
  assign decode_RS2_USE = _zz_146_[0];
  assign decode_RS1_USE = _zz_147_[0];
  assign execute_REGFILE_WRITE_VALID = decode_to_execute_REGFILE_WRITE_VALID;
  assign execute_BYPASSABLE_EXECUTE_STAGE = decode_to_execute_BYPASSABLE_EXECUTE_STAGE;
  assign memory_REGFILE_WRITE_VALID = execute_to_memory_REGFILE_WRITE_VALID;
  assign memory_INSTRUCTION = execute_to_memory_INSTRUCTION;
  assign memory_BYPASSABLE_MEMORY_STAGE = execute_to_memory_BYPASSABLE_MEMORY_STAGE;
  assign writeBack_REGFILE_WRITE_VALID = memory_to_writeBack_REGFILE_WRITE_VALID;
  assign memory_REGFILE_WRITE_DATA = execute_to_memory_REGFILE_WRITE_DATA;
  assign execute_SHIFT_CTRL = _zz_21_;
  assign execute_SRC_LESS_UNSIGNED = decode_to_execute_SRC_LESS_UNSIGNED;
  assign execute_SRC2_FORCE_ZERO = decode_to_execute_SRC2_FORCE_ZERO;
  assign execute_SRC_USE_SUB_LESS = decode_to_execute_SRC_USE_SUB_LESS;
  assign _zz_22_ = decode_PC;
  assign _zz_23_ = decode_RS2;
  assign decode_SRC2_CTRL = _zz_24_;
  assign _zz_25_ = decode_RS1;
  assign decode_SRC1_CTRL = _zz_26_;
  assign decode_SRC_USE_SUB_LESS = _zz_148_[0];
  assign decode_SRC_ADD_ZERO = _zz_149_[0];
  assign execute_SRC_ADD_SUB = execute_SrcPlugin_addSub;
  assign execute_SRC_LESS = execute_SrcPlugin_less;
  assign execute_ALU_CTRL = _zz_27_;
  assign execute_SRC2 = decode_to_execute_SRC2;
  assign execute_ALU_BITWISE_CTRL = _zz_28_;
  assign _zz_29_ = writeBack_INSTRUCTION;
  assign _zz_30_ = writeBack_REGFILE_WRITE_VALID;
  always @ (*) begin
    _zz_31_ = 1'b0;
    if(lastStageRegFileWrite_valid)begin
      _zz_31_ = 1'b1;
    end
  end

  assign decode_INSTRUCTION_ANTICIPATED = (decode_arbitration_isStuck ? decode_INSTRUCTION : IBusSimplePlugin_iBusRsp_output_payload_rsp_inst);
  always @ (*) begin
    decode_REGFILE_WRITE_VALID = _zz_150_[0];
    if((decode_INSTRUCTION[11 : 7] == 5'h0))begin
      decode_REGFILE_WRITE_VALID = 1'b0;
    end
  end

  always @ (*) begin
    _zz_39_ = execute_REGFILE_WRITE_DATA;
    if(_zz_117_)begin
      _zz_39_ = execute_CsrPlugin_readData;
    end
    if(_zz_118_)begin
      _zz_39_ = _zz_92_;
    end
  end

  assign execute_SRC1 = decode_to_execute_SRC1;
  assign execute_CSR_READ_OPCODE = decode_to_execute_CSR_READ_OPCODE;
  assign execute_CSR_WRITE_OPCODE = decode_to_execute_CSR_WRITE_OPCODE;
  assign execute_IS_CSR = decode_to_execute_IS_CSR;
  assign memory_ENV_CTRL = _zz_40_;
  assign execute_ENV_CTRL = _zz_41_;
  assign writeBack_ENV_CTRL = _zz_42_;
  assign writeBack_MEMORY_STORE = memory_to_writeBack_MEMORY_STORE;
  always @ (*) begin
    _zz_43_ = writeBack_REGFILE_WRITE_DATA;
    if((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE))begin
      _zz_43_ = writeBack_DBusSimplePlugin_rspFormated;
    end
  end

  assign writeBack_MEMORY_ENABLE = memory_to_writeBack_MEMORY_ENABLE;
  assign writeBack_MEMORY_ADDRESS_LOW = memory_to_writeBack_MEMORY_ADDRESS_LOW;
  assign writeBack_MEMORY_READ_DATA = memory_to_writeBack_MEMORY_READ_DATA;
  assign memory_MEMORY_STORE = execute_to_memory_MEMORY_STORE;
  assign memory_MEMORY_ENABLE = execute_to_memory_MEMORY_ENABLE;
  assign execute_SRC_ADD = execute_SrcPlugin_addSub;
  assign execute_RS2 = decode_to_execute_RS2;
  assign execute_INSTRUCTION = decode_to_execute_INSTRUCTION;
  assign execute_MEMORY_STORE = decode_to_execute_MEMORY_STORE;
  assign execute_MEMORY_ENABLE = decode_to_execute_MEMORY_ENABLE;
  assign execute_ALIGNEMENT_FAULT = 1'b0;
  always @ (*) begin
    _zz_44_ = memory_FORMAL_PC_NEXT;
    if(BranchPlugin_jumpInterface_valid)begin
      _zz_44_ = BranchPlugin_jumpInterface_payload;
    end
  end

  assign decode_PC = IBusSimplePlugin_injector_decodeInput_payload_pc;
  assign decode_INSTRUCTION = IBusSimplePlugin_injector_decodeInput_payload_rsp_inst;
  assign writeBack_PC = memory_to_writeBack_PC;
  assign writeBack_INSTRUCTION = memory_to_writeBack_INSTRUCTION;
  always @ (*) begin
    decode_arbitration_haltItself = 1'b0;
    case(_zz_108_)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
        decode_arbitration_haltItself = 1'b1;
      end
      3'b011 : begin
      end
      3'b100 : begin
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    decode_arbitration_haltByOther = 1'b0;
    if(CsrPlugin_pipelineLiberator_active)begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if(({(writeBack_arbitration_isValid && (writeBack_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),{(memory_arbitration_isValid && (memory_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)),(execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET))}} != (3'b000)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
    if((decode_arbitration_isValid && (_zz_93_ || _zz_94_)))begin
      decode_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    decode_arbitration_removeIt = 1'b0;
    if(decode_arbitration_isFlushed)begin
      decode_arbitration_removeIt = 1'b1;
    end
  end

  assign decode_arbitration_flushIt = 1'b0;
  assign decode_arbitration_flushNext = 1'b0;
  always @ (*) begin
    execute_arbitration_haltItself = 1'b0;
    if(((((execute_arbitration_isValid && execute_MEMORY_ENABLE) && (! dBus_cmd_ready)) && (! execute_DBusSimplePlugin_skipCmd)) && (! _zz_61_)))begin
      execute_arbitration_haltItself = 1'b1;
    end
    if(_zz_117_)begin
      if(execute_CsrPlugin_blockedBySideEffects)begin
        execute_arbitration_haltItself = 1'b1;
      end
    end
    if(_zz_118_)begin
      if(_zz_119_)begin
        if(! execute_LightShifterPlugin_done) begin
          execute_arbitration_haltItself = 1'b1;
        end
      end
    end
  end

  always @ (*) begin
    execute_arbitration_haltByOther = 1'b0;
    if(_zz_120_)begin
      execute_arbitration_haltByOther = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_removeIt = 1'b0;
    if(execute_arbitration_isFlushed)begin
      execute_arbitration_removeIt = 1'b1;
    end
  end

  always @ (*) begin
    execute_arbitration_flushIt = 1'b0;
    if(_zz_120_)begin
      if(_zz_121_)begin
        execute_arbitration_flushIt = 1'b1;
      end
    end
  end

  always @ (*) begin
    execute_arbitration_flushNext = 1'b0;
    if(_zz_120_)begin
      if(_zz_121_)begin
        execute_arbitration_flushNext = 1'b1;
      end
    end
  end

  always @ (*) begin
    memory_arbitration_haltItself = 1'b0;
    if((((memory_arbitration_isValid && memory_MEMORY_ENABLE) && (! memory_MEMORY_STORE)) && ((! dBus_rsp_ready) || 1'b0)))begin
      memory_arbitration_haltItself = 1'b1;
    end
  end

  assign memory_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    memory_arbitration_removeIt = 1'b0;
    if(memory_arbitration_isFlushed)begin
      memory_arbitration_removeIt = 1'b1;
    end
  end

  assign memory_arbitration_flushIt = 1'b0;
  always @ (*) begin
    memory_arbitration_flushNext = 1'b0;
    if(BranchPlugin_jumpInterface_valid)begin
      memory_arbitration_flushNext = 1'b1;
    end
  end

  assign writeBack_arbitration_haltItself = 1'b0;
  assign writeBack_arbitration_haltByOther = 1'b0;
  always @ (*) begin
    writeBack_arbitration_removeIt = 1'b0;
    if(writeBack_arbitration_isFlushed)begin
      writeBack_arbitration_removeIt = 1'b1;
    end
  end

  assign writeBack_arbitration_flushIt = 1'b0;
  always @ (*) begin
    writeBack_arbitration_flushNext = 1'b0;
    if(_zz_122_)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
    if(_zz_123_)begin
      writeBack_arbitration_flushNext = 1'b1;
    end
  end

  assign lastStageInstruction = writeBack_INSTRUCTION;
  assign lastStagePc = writeBack_PC;
  assign lastStageIsValid = writeBack_arbitration_isValid;
  assign lastStageIsFiring = writeBack_arbitration_isFiring;
  always @ (*) begin
    IBusSimplePlugin_fetcherHalt = 1'b0;
    if(_zz_122_)begin
      IBusSimplePlugin_fetcherHalt = 1'b1;
    end
    if(_zz_123_)begin
      IBusSimplePlugin_fetcherHalt = 1'b1;
    end
    if(_zz_120_)begin
      if(_zz_121_)begin
        IBusSimplePlugin_fetcherHalt = 1'b1;
      end
    end
    if(DebugPlugin_haltIt)begin
      IBusSimplePlugin_fetcherHalt = 1'b1;
    end
    if(_zz_124_)begin
      IBusSimplePlugin_fetcherHalt = 1'b1;
    end
  end

  always @ (*) begin
    IBusSimplePlugin_incomingInstruction = 1'b0;
    if((IBusSimplePlugin_iBusRsp_stages_1_input_valid || IBusSimplePlugin_iBusRsp_stages_2_input_valid))begin
      IBusSimplePlugin_incomingInstruction = 1'b1;
    end
    if(IBusSimplePlugin_injector_decodeInput_valid)begin
      IBusSimplePlugin_incomingInstruction = 1'b1;
    end
  end

  assign CsrPlugin_inWfi = 1'b0;
  always @ (*) begin
    CsrPlugin_thirdPartyWake = 1'b0;
    if(DebugPlugin_haltIt)begin
      CsrPlugin_thirdPartyWake = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_valid = 1'b0;
    if(_zz_122_)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
    if(_zz_123_)begin
      CsrPlugin_jumpInterface_valid = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_jumpInterface_payload = 32'h0;
    if(_zz_122_)begin
      CsrPlugin_jumpInterface_payload = {CsrPlugin_xtvec_base,(2'b00)};
    end
    if(_zz_123_)begin
      case(_zz_125_)
        2'b11 : begin
          CsrPlugin_jumpInterface_payload = CsrPlugin_mepc;
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    CsrPlugin_forceMachineWire = 1'b0;
    if(DebugPlugin_godmode)begin
      CsrPlugin_forceMachineWire = 1'b1;
    end
  end

  always @ (*) begin
    CsrPlugin_allowInterrupts = 1'b1;
    if((DebugPlugin_haltIt || DebugPlugin_stepIt))begin
      CsrPlugin_allowInterrupts = 1'b0;
    end
  end

  always @ (*) begin
    CsrPlugin_allowException = 1'b1;
    if(DebugPlugin_godmode)begin
      CsrPlugin_allowException = 1'b0;
    end
  end

  assign IBusSimplePlugin_externalFlush = ({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,{execute_arbitration_flushNext,decode_arbitration_flushNext}}} != (4'b0000));
  assign IBusSimplePlugin_jump_pcLoad_valid = ({BranchPlugin_jumpInterface_valid,CsrPlugin_jumpInterface_valid} != (2'b00));
  assign _zz_45_ = {BranchPlugin_jumpInterface_valid,CsrPlugin_jumpInterface_valid};
  assign IBusSimplePlugin_jump_pcLoad_payload = (_zz_151_[0] ? CsrPlugin_jumpInterface_payload : BranchPlugin_jumpInterface_payload);
  always @ (*) begin
    IBusSimplePlugin_fetchPc_correction = 1'b0;
    if(IBusSimplePlugin_jump_pcLoad_valid)begin
      IBusSimplePlugin_fetchPc_correction = 1'b1;
    end
  end

  assign IBusSimplePlugin_fetchPc_corrected = (IBusSimplePlugin_fetchPc_correction || IBusSimplePlugin_fetchPc_correctionReg);
  always @ (*) begin
    IBusSimplePlugin_fetchPc_pcRegPropagate = 1'b0;
    if(IBusSimplePlugin_iBusRsp_stages_1_input_ready)begin
      IBusSimplePlugin_fetchPc_pcRegPropagate = 1'b1;
    end
  end

  always @ (*) begin
    IBusSimplePlugin_fetchPc_pc = (IBusSimplePlugin_fetchPc_pcReg + _zz_154_);
    if(IBusSimplePlugin_jump_pcLoad_valid)begin
      IBusSimplePlugin_fetchPc_pc = IBusSimplePlugin_jump_pcLoad_payload;
    end
    IBusSimplePlugin_fetchPc_pc[0] = 1'b0;
    IBusSimplePlugin_fetchPc_pc[1] = 1'b0;
  end

  always @ (*) begin
    IBusSimplePlugin_fetchPc_flushed = 1'b0;
    if(IBusSimplePlugin_jump_pcLoad_valid)begin
      IBusSimplePlugin_fetchPc_flushed = 1'b1;
    end
  end

  assign IBusSimplePlugin_fetchPc_output_valid = ((! IBusSimplePlugin_fetcherHalt) && IBusSimplePlugin_fetchPc_booted);
  assign IBusSimplePlugin_fetchPc_output_payload = IBusSimplePlugin_fetchPc_pc;
  assign IBusSimplePlugin_iBusRsp_redoFetch = 1'b0;
  assign IBusSimplePlugin_iBusRsp_stages_0_input_valid = IBusSimplePlugin_fetchPc_output_valid;
  assign IBusSimplePlugin_fetchPc_output_ready = IBusSimplePlugin_iBusRsp_stages_0_input_ready;
  assign IBusSimplePlugin_iBusRsp_stages_0_input_payload = IBusSimplePlugin_fetchPc_output_payload;
  assign IBusSimplePlugin_iBusRsp_stages_0_halt = 1'b0;
  assign _zz_46_ = (! IBusSimplePlugin_iBusRsp_stages_0_halt);
  assign IBusSimplePlugin_iBusRsp_stages_0_input_ready = (IBusSimplePlugin_iBusRsp_stages_0_output_ready && _zz_46_);
  assign IBusSimplePlugin_iBusRsp_stages_0_output_valid = (IBusSimplePlugin_iBusRsp_stages_0_input_valid && _zz_46_);
  assign IBusSimplePlugin_iBusRsp_stages_0_output_payload = IBusSimplePlugin_iBusRsp_stages_0_input_payload;
  always @ (*) begin
    IBusSimplePlugin_iBusRsp_stages_1_halt = 1'b0;
    if((IBusSimplePlugin_iBusRsp_stages_1_input_valid && ((! IBusSimplePlugin_cmdFork_canEmit) || (! IBusSimplePlugin_cmd_ready))))begin
      IBusSimplePlugin_iBusRsp_stages_1_halt = 1'b1;
    end
  end

  assign _zz_47_ = (! IBusSimplePlugin_iBusRsp_stages_1_halt);
  assign IBusSimplePlugin_iBusRsp_stages_1_input_ready = (IBusSimplePlugin_iBusRsp_stages_1_output_ready && _zz_47_);
  assign IBusSimplePlugin_iBusRsp_stages_1_output_valid = (IBusSimplePlugin_iBusRsp_stages_1_input_valid && _zz_47_);
  assign IBusSimplePlugin_iBusRsp_stages_1_output_payload = IBusSimplePlugin_iBusRsp_stages_1_input_payload;
  assign IBusSimplePlugin_iBusRsp_stages_2_halt = 1'b0;
  assign _zz_48_ = (! IBusSimplePlugin_iBusRsp_stages_2_halt);
  assign IBusSimplePlugin_iBusRsp_stages_2_input_ready = (IBusSimplePlugin_iBusRsp_stages_2_output_ready && _zz_48_);
  assign IBusSimplePlugin_iBusRsp_stages_2_output_valid = (IBusSimplePlugin_iBusRsp_stages_2_input_valid && _zz_48_);
  assign IBusSimplePlugin_iBusRsp_stages_2_output_payload = IBusSimplePlugin_iBusRsp_stages_2_input_payload;
  assign IBusSimplePlugin_iBusRsp_flush = (IBusSimplePlugin_externalFlush || IBusSimplePlugin_iBusRsp_redoFetch);
  assign IBusSimplePlugin_iBusRsp_stages_0_output_ready = _zz_49_;
  assign _zz_49_ = ((1'b0 && (! _zz_50_)) || IBusSimplePlugin_iBusRsp_stages_1_input_ready);
  assign _zz_50_ = _zz_51_;
  assign IBusSimplePlugin_iBusRsp_stages_1_input_valid = _zz_50_;
  assign IBusSimplePlugin_iBusRsp_stages_1_input_payload = IBusSimplePlugin_fetchPc_pcReg;
  assign IBusSimplePlugin_iBusRsp_stages_1_output_ready = ((1'b0 && (! _zz_52_)) || IBusSimplePlugin_iBusRsp_stages_2_input_ready);
  assign _zz_52_ = _zz_53_;
  assign IBusSimplePlugin_iBusRsp_stages_2_input_valid = _zz_52_;
  assign IBusSimplePlugin_iBusRsp_stages_2_input_payload = _zz_54_;
  always @ (*) begin
    IBusSimplePlugin_iBusRsp_readyForError = 1'b1;
    if(IBusSimplePlugin_injector_decodeInput_valid)begin
      IBusSimplePlugin_iBusRsp_readyForError = 1'b0;
    end
    if((! IBusSimplePlugin_pcValids_0))begin
      IBusSimplePlugin_iBusRsp_readyForError = 1'b0;
    end
  end

  assign IBusSimplePlugin_iBusRsp_output_ready = ((1'b0 && (! IBusSimplePlugin_injector_decodeInput_valid)) || IBusSimplePlugin_injector_decodeInput_ready);
  assign IBusSimplePlugin_injector_decodeInput_valid = _zz_55_;
  assign IBusSimplePlugin_injector_decodeInput_payload_pc = _zz_56_;
  assign IBusSimplePlugin_injector_decodeInput_payload_rsp_error = _zz_57_;
  assign IBusSimplePlugin_injector_decodeInput_payload_rsp_inst = _zz_58_;
  assign IBusSimplePlugin_injector_decodeInput_payload_isRvc = _zz_59_;
  assign IBusSimplePlugin_pcValids_0 = IBusSimplePlugin_injector_nextPcCalc_valids_2;
  assign IBusSimplePlugin_pcValids_1 = IBusSimplePlugin_injector_nextPcCalc_valids_3;
  assign IBusSimplePlugin_pcValids_2 = IBusSimplePlugin_injector_nextPcCalc_valids_4;
  assign IBusSimplePlugin_pcValids_3 = IBusSimplePlugin_injector_nextPcCalc_valids_5;
  assign IBusSimplePlugin_injector_decodeInput_ready = (! decode_arbitration_isStuck);
  always @ (*) begin
    decode_arbitration_isValid = IBusSimplePlugin_injector_decodeInput_valid;
    case(_zz_108_)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b011 : begin
        decode_arbitration_isValid = 1'b1;
      end
      3'b100 : begin
      end
      default : begin
      end
    endcase
  end

  assign iBus_cmd_valid = IBusSimplePlugin_cmd_valid;
  assign IBusSimplePlugin_cmd_ready = iBus_cmd_ready;
  assign iBus_cmd_payload_pc = IBusSimplePlugin_cmd_payload_pc;
  assign IBusSimplePlugin_pending_next = (_zz_155_ - _zz_159_);
  assign IBusSimplePlugin_cmdFork_canEmit = (IBusSimplePlugin_iBusRsp_stages_1_output_ready && (IBusSimplePlugin_pending_value != (3'b111)));
  assign IBusSimplePlugin_cmd_valid = (IBusSimplePlugin_iBusRsp_stages_1_input_valid && IBusSimplePlugin_cmdFork_canEmit);
  assign IBusSimplePlugin_pending_inc = (IBusSimplePlugin_cmd_valid && IBusSimplePlugin_cmd_ready);
  assign IBusSimplePlugin_cmd_payload_pc = {IBusSimplePlugin_iBusRsp_stages_1_input_payload[31 : 2],(2'b00)};
  assign IBusSimplePlugin_rspJoin_rspBuffer_flush = ((IBusSimplePlugin_rspJoin_rspBuffer_discardCounter != (3'b000)) || IBusSimplePlugin_iBusRsp_flush);
  assign IBusSimplePlugin_rspJoin_rspBuffer_output_valid = (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_valid && (IBusSimplePlugin_rspJoin_rspBuffer_discardCounter == (3'b000)));
  assign IBusSimplePlugin_rspJoin_rspBuffer_output_payload_error = IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_error;
  assign IBusSimplePlugin_rspJoin_rspBuffer_output_payload_inst = IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_payload_inst;
  assign _zz_113_ = (IBusSimplePlugin_rspJoin_rspBuffer_output_ready || IBusSimplePlugin_rspJoin_rspBuffer_flush);
  assign IBusSimplePlugin_pending_dec = (IBusSimplePlugin_rspJoin_rspBuffer_c_io_pop_valid && _zz_113_);
  assign IBusSimplePlugin_rspJoin_fetchRsp_pc = IBusSimplePlugin_iBusRsp_stages_2_output_payload;
  always @ (*) begin
    IBusSimplePlugin_rspJoin_fetchRsp_rsp_error = IBusSimplePlugin_rspJoin_rspBuffer_output_payload_error;
    if((! IBusSimplePlugin_rspJoin_rspBuffer_output_valid))begin
      IBusSimplePlugin_rspJoin_fetchRsp_rsp_error = 1'b0;
    end
  end

  assign IBusSimplePlugin_rspJoin_fetchRsp_rsp_inst = IBusSimplePlugin_rspJoin_rspBuffer_output_payload_inst;
  assign IBusSimplePlugin_rspJoin_exceptionDetected = 1'b0;
  assign IBusSimplePlugin_rspJoin_join_valid = (IBusSimplePlugin_iBusRsp_stages_2_output_valid && IBusSimplePlugin_rspJoin_rspBuffer_output_valid);
  assign IBusSimplePlugin_rspJoin_join_payload_pc = IBusSimplePlugin_rspJoin_fetchRsp_pc;
  assign IBusSimplePlugin_rspJoin_join_payload_rsp_error = IBusSimplePlugin_rspJoin_fetchRsp_rsp_error;
  assign IBusSimplePlugin_rspJoin_join_payload_rsp_inst = IBusSimplePlugin_rspJoin_fetchRsp_rsp_inst;
  assign IBusSimplePlugin_rspJoin_join_payload_isRvc = IBusSimplePlugin_rspJoin_fetchRsp_isRvc;
  assign IBusSimplePlugin_iBusRsp_stages_2_output_ready = (IBusSimplePlugin_iBusRsp_stages_2_output_valid ? (IBusSimplePlugin_rspJoin_join_valid && IBusSimplePlugin_rspJoin_join_ready) : IBusSimplePlugin_rspJoin_join_ready);
  assign IBusSimplePlugin_rspJoin_rspBuffer_output_ready = (IBusSimplePlugin_rspJoin_join_valid && IBusSimplePlugin_rspJoin_join_ready);
  assign _zz_60_ = (! IBusSimplePlugin_rspJoin_exceptionDetected);
  assign IBusSimplePlugin_rspJoin_join_ready = (IBusSimplePlugin_iBusRsp_output_ready && _zz_60_);
  assign IBusSimplePlugin_iBusRsp_output_valid = (IBusSimplePlugin_rspJoin_join_valid && _zz_60_);
  assign IBusSimplePlugin_iBusRsp_output_payload_pc = IBusSimplePlugin_rspJoin_join_payload_pc;
  assign IBusSimplePlugin_iBusRsp_output_payload_rsp_error = IBusSimplePlugin_rspJoin_join_payload_rsp_error;
  assign IBusSimplePlugin_iBusRsp_output_payload_rsp_inst = IBusSimplePlugin_rspJoin_join_payload_rsp_inst;
  assign IBusSimplePlugin_iBusRsp_output_payload_isRvc = IBusSimplePlugin_rspJoin_join_payload_isRvc;
  assign _zz_61_ = 1'b0;
  always @ (*) begin
    execute_DBusSimplePlugin_skipCmd = 1'b0;
    if(execute_ALIGNEMENT_FAULT)begin
      execute_DBusSimplePlugin_skipCmd = 1'b1;
    end
  end

  assign dBus_cmd_valid = (((((execute_arbitration_isValid && execute_MEMORY_ENABLE) && (! execute_arbitration_isStuckByOthers)) && (! execute_arbitration_isFlushed)) && (! execute_DBusSimplePlugin_skipCmd)) && (! _zz_61_));
  assign dBus_cmd_payload_wr = execute_MEMORY_STORE;
  assign dBus_cmd_payload_size = execute_INSTRUCTION[13 : 12];
  always @ (*) begin
    case(dBus_cmd_payload_size)
      2'b00 : begin
        _zz_62_ = {{{execute_RS2[7 : 0],execute_RS2[7 : 0]},execute_RS2[7 : 0]},execute_RS2[7 : 0]};
      end
      2'b01 : begin
        _zz_62_ = {execute_RS2[15 : 0],execute_RS2[15 : 0]};
      end
      default : begin
        _zz_62_ = execute_RS2[31 : 0];
      end
    endcase
  end

  assign dBus_cmd_payload_data = _zz_62_;
  always @ (*) begin
    case(dBus_cmd_payload_size)
      2'b00 : begin
        _zz_63_ = (4'b0001);
      end
      2'b01 : begin
        _zz_63_ = (4'b0011);
      end
      default : begin
        _zz_63_ = (4'b1111);
      end
    endcase
  end

  assign execute_DBusSimplePlugin_formalMask = (_zz_63_ <<< dBus_cmd_payload_address[1 : 0]);
  assign dBus_cmd_payload_address = execute_SRC_ADD;
  always @ (*) begin
    writeBack_DBusSimplePlugin_rspShifted = writeBack_MEMORY_READ_DATA;
    case(writeBack_MEMORY_ADDRESS_LOW)
      2'b01 : begin
        writeBack_DBusSimplePlugin_rspShifted[7 : 0] = writeBack_MEMORY_READ_DATA[15 : 8];
      end
      2'b10 : begin
        writeBack_DBusSimplePlugin_rspShifted[15 : 0] = writeBack_MEMORY_READ_DATA[31 : 16];
      end
      2'b11 : begin
        writeBack_DBusSimplePlugin_rspShifted[7 : 0] = writeBack_MEMORY_READ_DATA[31 : 24];
      end
      default : begin
      end
    endcase
  end

  assign _zz_64_ = (writeBack_DBusSimplePlugin_rspShifted[7] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_65_[31] = _zz_64_;
    _zz_65_[30] = _zz_64_;
    _zz_65_[29] = _zz_64_;
    _zz_65_[28] = _zz_64_;
    _zz_65_[27] = _zz_64_;
    _zz_65_[26] = _zz_64_;
    _zz_65_[25] = _zz_64_;
    _zz_65_[24] = _zz_64_;
    _zz_65_[23] = _zz_64_;
    _zz_65_[22] = _zz_64_;
    _zz_65_[21] = _zz_64_;
    _zz_65_[20] = _zz_64_;
    _zz_65_[19] = _zz_64_;
    _zz_65_[18] = _zz_64_;
    _zz_65_[17] = _zz_64_;
    _zz_65_[16] = _zz_64_;
    _zz_65_[15] = _zz_64_;
    _zz_65_[14] = _zz_64_;
    _zz_65_[13] = _zz_64_;
    _zz_65_[12] = _zz_64_;
    _zz_65_[11] = _zz_64_;
    _zz_65_[10] = _zz_64_;
    _zz_65_[9] = _zz_64_;
    _zz_65_[8] = _zz_64_;
    _zz_65_[7 : 0] = writeBack_DBusSimplePlugin_rspShifted[7 : 0];
  end

  assign _zz_66_ = (writeBack_DBusSimplePlugin_rspShifted[15] && (! writeBack_INSTRUCTION[14]));
  always @ (*) begin
    _zz_67_[31] = _zz_66_;
    _zz_67_[30] = _zz_66_;
    _zz_67_[29] = _zz_66_;
    _zz_67_[28] = _zz_66_;
    _zz_67_[27] = _zz_66_;
    _zz_67_[26] = _zz_66_;
    _zz_67_[25] = _zz_66_;
    _zz_67_[24] = _zz_66_;
    _zz_67_[23] = _zz_66_;
    _zz_67_[22] = _zz_66_;
    _zz_67_[21] = _zz_66_;
    _zz_67_[20] = _zz_66_;
    _zz_67_[19] = _zz_66_;
    _zz_67_[18] = _zz_66_;
    _zz_67_[17] = _zz_66_;
    _zz_67_[16] = _zz_66_;
    _zz_67_[15 : 0] = writeBack_DBusSimplePlugin_rspShifted[15 : 0];
  end

  always @ (*) begin
    case(_zz_137_)
      2'b00 : begin
        writeBack_DBusSimplePlugin_rspFormated = _zz_65_;
      end
      2'b01 : begin
        writeBack_DBusSimplePlugin_rspFormated = _zz_67_;
      end
      default : begin
        writeBack_DBusSimplePlugin_rspFormated = writeBack_DBusSimplePlugin_rspShifted;
      end
    endcase
  end

  always @ (*) begin
    CsrPlugin_privilege = (2'b11);
    if(CsrPlugin_forceMachineWire)begin
      CsrPlugin_privilege = (2'b11);
    end
  end

  assign CsrPlugin_misa_base = (2'b01);
  assign CsrPlugin_misa_extensions = 26'h0000042;
  assign CsrPlugin_mtvec_mode = (2'b00);
  assign CsrPlugin_mtvec_base = 30'h20000008;
  assign _zz_68_ = (CsrPlugin_mip_MTIP && CsrPlugin_mie_MTIE);
  assign _zz_69_ = (CsrPlugin_mip_MSIP && CsrPlugin_mie_MSIE);
  assign _zz_70_ = (CsrPlugin_mip_MEIP && CsrPlugin_mie_MEIE);
  assign CsrPlugin_exception = 1'b0;
  assign CsrPlugin_lastStageWasWfi = 1'b0;
  assign CsrPlugin_pipelineLiberator_active = ((CsrPlugin_interrupt_valid && CsrPlugin_allowInterrupts) && decode_arbitration_isValid);
  always @ (*) begin
    CsrPlugin_pipelineLiberator_done = CsrPlugin_pipelineLiberator_pcValids_2;
    if(CsrPlugin_hadException)begin
      CsrPlugin_pipelineLiberator_done = 1'b0;
    end
  end

  assign CsrPlugin_interruptJump = ((CsrPlugin_interrupt_valid && CsrPlugin_pipelineLiberator_done) && CsrPlugin_allowInterrupts);
  assign CsrPlugin_targetPrivilege = CsrPlugin_interrupt_targetPrivilege;
  assign CsrPlugin_trapCause = CsrPlugin_interrupt_code;
  always @ (*) begin
    CsrPlugin_xtvec_mode = (2'bxx);
    case(CsrPlugin_targetPrivilege)
      2'b11 : begin
        CsrPlugin_xtvec_mode = CsrPlugin_mtvec_mode;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    CsrPlugin_xtvec_base = 30'h0;
    case(CsrPlugin_targetPrivilege)
      2'b11 : begin
        CsrPlugin_xtvec_base = CsrPlugin_mtvec_base;
      end
      default : begin
      end
    endcase
  end

  assign contextSwitching = CsrPlugin_jumpInterface_valid;
  assign execute_CsrPlugin_blockedBySideEffects = ({writeBack_arbitration_isValid,memory_arbitration_isValid} != (2'b00));
  always @ (*) begin
    execute_CsrPlugin_illegalAccess = 1'b1;
    if(execute_CsrPlugin_csr_768)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_836)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_772)begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
    if(execute_CsrPlugin_csr_834)begin
      if(execute_CSR_READ_OPCODE)begin
        execute_CsrPlugin_illegalAccess = 1'b0;
      end
    end
    if((CsrPlugin_privilege < execute_CsrPlugin_csrAddress[9 : 8]))begin
      execute_CsrPlugin_illegalAccess = 1'b1;
    end
    if(((! execute_arbitration_isValid) || (! execute_IS_CSR)))begin
      execute_CsrPlugin_illegalAccess = 1'b0;
    end
  end

  always @ (*) begin
    execute_CsrPlugin_illegalInstruction = 1'b0;
    if((execute_arbitration_isValid && (execute_ENV_CTRL == `EnvCtrlEnum_defaultEncoding_XRET)))begin
      if((CsrPlugin_privilege < execute_INSTRUCTION[29 : 28]))begin
        execute_CsrPlugin_illegalInstruction = 1'b1;
      end
    end
  end

  assign execute_CsrPlugin_writeInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_WRITE_OPCODE);
  assign execute_CsrPlugin_readInstruction = ((execute_arbitration_isValid && execute_IS_CSR) && execute_CSR_READ_OPCODE);
  assign execute_CsrPlugin_writeEnable = ((execute_CsrPlugin_writeInstruction && (! execute_CsrPlugin_blockedBySideEffects)) && (! execute_arbitration_isStuckByOthers));
  assign execute_CsrPlugin_readEnable = ((execute_CsrPlugin_readInstruction && (! execute_CsrPlugin_blockedBySideEffects)) && (! execute_arbitration_isStuckByOthers));
  assign execute_CsrPlugin_readToWriteData = execute_CsrPlugin_readData;
  always @ (*) begin
    case(_zz_138_)
      1'b0 : begin
        execute_CsrPlugin_writeData = execute_SRC1;
      end
      default : begin
        execute_CsrPlugin_writeData = (execute_INSTRUCTION[12] ? (execute_CsrPlugin_readToWriteData & (~ execute_SRC1)) : (execute_CsrPlugin_readToWriteData | execute_SRC1));
      end
    endcase
  end

  assign execute_CsrPlugin_csrAddress = execute_INSTRUCTION[31 : 20];
  assign _zz_72_ = ((decode_INSTRUCTION & 32'h00004050) == 32'h00004050);
  assign _zz_73_ = ((decode_INSTRUCTION & 32'h00000004) == 32'h00000004);
  assign _zz_74_ = ((decode_INSTRUCTION & 32'h00000050) == 32'h00000010);
  assign _zz_75_ = ((decode_INSTRUCTION & 32'h00000048) == 32'h00000048);
  assign _zz_76_ = ((decode_INSTRUCTION & 32'h00006004) == 32'h00002000);
  assign _zz_71_ = {({(_zz_187_ == _zz_188_),{_zz_189_,_zz_190_}} != (3'b000)),{({_zz_75_,_zz_191_} != (2'b00)),{(_zz_192_ != (1'b0)),{(_zz_193_ != _zz_194_),{_zz_195_,{_zz_196_,_zz_197_}}}}}};
  assign _zz_77_ = _zz_71_[1 : 0];
  assign _zz_38_ = _zz_77_;
  assign _zz_78_ = _zz_71_[4 : 3];
  assign _zz_37_ = _zz_78_;
  assign _zz_79_ = _zz_71_[6 : 5];
  assign _zz_36_ = _zz_79_;
  assign _zz_80_ = _zz_71_[7 : 7];
  assign _zz_35_ = _zz_80_;
  assign _zz_81_ = _zz_71_[11 : 10];
  assign _zz_34_ = _zz_81_;
  assign _zz_82_ = _zz_71_[20 : 19];
  assign _zz_33_ = _zz_82_;
  assign _zz_83_ = _zz_71_[24 : 23];
  assign _zz_32_ = _zz_83_;
  assign decode_RegFilePlugin_regFileReadAddress1 = decode_INSTRUCTION_ANTICIPATED[19 : 15];
  assign decode_RegFilePlugin_regFileReadAddress2 = decode_INSTRUCTION_ANTICIPATED[24 : 20];
  assign decode_RegFilePlugin_rs1Data = _zz_115_;
  assign decode_RegFilePlugin_rs2Data = _zz_116_;
  always @ (*) begin
    lastStageRegFileWrite_valid = (_zz_30_ && writeBack_arbitration_isFiring);
    if(_zz_84_)begin
      lastStageRegFileWrite_valid = 1'b1;
    end
  end

  assign lastStageRegFileWrite_payload_address = _zz_29_[11 : 7];
  assign lastStageRegFileWrite_payload_data = _zz_43_;
  always @ (*) begin
    case(execute_ALU_BITWISE_CTRL)
      `AluBitwiseCtrlEnum_defaultEncoding_AND_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 & execute_SRC2);
      end
      `AluBitwiseCtrlEnum_defaultEncoding_OR_1 : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 | execute_SRC2);
      end
      default : begin
        execute_IntAluPlugin_bitwise = (execute_SRC1 ^ execute_SRC2);
      end
    endcase
  end

  always @ (*) begin
    case(execute_ALU_CTRL)
      `AluCtrlEnum_defaultEncoding_BITWISE : begin
        _zz_85_ = execute_IntAluPlugin_bitwise;
      end
      `AluCtrlEnum_defaultEncoding_SLT_SLTU : begin
        _zz_85_ = {31'd0, _zz_162_};
      end
      default : begin
        _zz_85_ = execute_SRC_ADD_SUB;
      end
    endcase
  end

  always @ (*) begin
    case(decode_SRC1_CTRL)
      `Src1CtrlEnum_defaultEncoding_RS : begin
        _zz_86_ = _zz_25_;
      end
      `Src1CtrlEnum_defaultEncoding_PC_INCREMENT : begin
        _zz_86_ = {29'd0, _zz_163_};
      end
      `Src1CtrlEnum_defaultEncoding_IMU : begin
        _zz_86_ = {decode_INSTRUCTION[31 : 12],12'h0};
      end
      default : begin
        _zz_86_ = {27'd0, _zz_164_};
      end
    endcase
  end

  assign _zz_87_ = _zz_165_[11];
  always @ (*) begin
    _zz_88_[19] = _zz_87_;
    _zz_88_[18] = _zz_87_;
    _zz_88_[17] = _zz_87_;
    _zz_88_[16] = _zz_87_;
    _zz_88_[15] = _zz_87_;
    _zz_88_[14] = _zz_87_;
    _zz_88_[13] = _zz_87_;
    _zz_88_[12] = _zz_87_;
    _zz_88_[11] = _zz_87_;
    _zz_88_[10] = _zz_87_;
    _zz_88_[9] = _zz_87_;
    _zz_88_[8] = _zz_87_;
    _zz_88_[7] = _zz_87_;
    _zz_88_[6] = _zz_87_;
    _zz_88_[5] = _zz_87_;
    _zz_88_[4] = _zz_87_;
    _zz_88_[3] = _zz_87_;
    _zz_88_[2] = _zz_87_;
    _zz_88_[1] = _zz_87_;
    _zz_88_[0] = _zz_87_;
  end

  assign _zz_89_ = _zz_166_[11];
  always @ (*) begin
    _zz_90_[19] = _zz_89_;
    _zz_90_[18] = _zz_89_;
    _zz_90_[17] = _zz_89_;
    _zz_90_[16] = _zz_89_;
    _zz_90_[15] = _zz_89_;
    _zz_90_[14] = _zz_89_;
    _zz_90_[13] = _zz_89_;
    _zz_90_[12] = _zz_89_;
    _zz_90_[11] = _zz_89_;
    _zz_90_[10] = _zz_89_;
    _zz_90_[9] = _zz_89_;
    _zz_90_[8] = _zz_89_;
    _zz_90_[7] = _zz_89_;
    _zz_90_[6] = _zz_89_;
    _zz_90_[5] = _zz_89_;
    _zz_90_[4] = _zz_89_;
    _zz_90_[3] = _zz_89_;
    _zz_90_[2] = _zz_89_;
    _zz_90_[1] = _zz_89_;
    _zz_90_[0] = _zz_89_;
  end

  always @ (*) begin
    case(decode_SRC2_CTRL)
      `Src2CtrlEnum_defaultEncoding_RS : begin
        _zz_91_ = _zz_23_;
      end
      `Src2CtrlEnum_defaultEncoding_IMI : begin
        _zz_91_ = {_zz_88_,decode_INSTRUCTION[31 : 20]};
      end
      `Src2CtrlEnum_defaultEncoding_IMS : begin
        _zz_91_ = {_zz_90_,{decode_INSTRUCTION[31 : 25],decode_INSTRUCTION[11 : 7]}};
      end
      default : begin
        _zz_91_ = _zz_22_;
      end
    endcase
  end

  always @ (*) begin
    execute_SrcPlugin_addSub = _zz_167_;
    if(execute_SRC2_FORCE_ZERO)begin
      execute_SrcPlugin_addSub = execute_SRC1;
    end
  end

  assign execute_SrcPlugin_less = ((execute_SRC1[31] == execute_SRC2[31]) ? execute_SrcPlugin_addSub[31] : (execute_SRC_LESS_UNSIGNED ? execute_SRC2[31] : execute_SRC1[31]));
  assign execute_LightShifterPlugin_isShift = (execute_SHIFT_CTRL != `ShiftCtrlEnum_defaultEncoding_DISABLE_1);
  assign execute_LightShifterPlugin_amplitude = (execute_LightShifterPlugin_isActive ? execute_LightShifterPlugin_amplitudeReg : execute_SRC2[4 : 0]);
  assign execute_LightShifterPlugin_shiftInput = (execute_LightShifterPlugin_isActive ? memory_REGFILE_WRITE_DATA : execute_SRC1);
  assign execute_LightShifterPlugin_done = (execute_LightShifterPlugin_amplitude[4 : 1] == (4'b0000));
  always @ (*) begin
    case(execute_SHIFT_CTRL)
      `ShiftCtrlEnum_defaultEncoding_SLL_1 : begin
        _zz_92_ = (execute_LightShifterPlugin_shiftInput <<< 1);
      end
      default : begin
        _zz_92_ = _zz_174_;
      end
    endcase
  end

  always @ (*) begin
    _zz_93_ = 1'b0;
    if(_zz_95_)begin
      if((_zz_96_ == decode_INSTRUCTION[19 : 15]))begin
        _zz_93_ = 1'b1;
      end
    end
    if(_zz_126_)begin
      if(_zz_127_)begin
        if((writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]))begin
          _zz_93_ = 1'b1;
        end
      end
    end
    if(_zz_128_)begin
      if(_zz_129_)begin
        if((memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]))begin
          _zz_93_ = 1'b1;
        end
      end
    end
    if(_zz_130_)begin
      if(_zz_131_)begin
        if((execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[19 : 15]))begin
          _zz_93_ = 1'b1;
        end
      end
    end
    if((! decode_RS1_USE))begin
      _zz_93_ = 1'b0;
    end
  end

  always @ (*) begin
    _zz_94_ = 1'b0;
    if(_zz_95_)begin
      if((_zz_96_ == decode_INSTRUCTION[24 : 20]))begin
        _zz_94_ = 1'b1;
      end
    end
    if(_zz_126_)begin
      if(_zz_127_)begin
        if((writeBack_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]))begin
          _zz_94_ = 1'b1;
        end
      end
    end
    if(_zz_128_)begin
      if(_zz_129_)begin
        if((memory_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]))begin
          _zz_94_ = 1'b1;
        end
      end
    end
    if(_zz_130_)begin
      if(_zz_131_)begin
        if((execute_INSTRUCTION[11 : 7] == decode_INSTRUCTION[24 : 20]))begin
          _zz_94_ = 1'b1;
        end
      end
    end
    if((! decode_RS2_USE))begin
      _zz_94_ = 1'b0;
    end
  end

  assign execute_BranchPlugin_eq = (execute_SRC1 == execute_SRC2);
  assign _zz_97_ = execute_INSTRUCTION[14 : 12];
  always @ (*) begin
    if((_zz_97_ == (3'b000))) begin
        _zz_98_ = execute_BranchPlugin_eq;
    end else if((_zz_97_ == (3'b001))) begin
        _zz_98_ = (! execute_BranchPlugin_eq);
    end else if((((_zz_97_ & (3'b101)) == (3'b101)))) begin
        _zz_98_ = (! execute_SRC_LESS);
    end else begin
        _zz_98_ = execute_SRC_LESS;
    end
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_INC : begin
        _zz_99_ = 1'b0;
      end
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_99_ = 1'b1;
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_99_ = 1'b1;
      end
      default : begin
        _zz_99_ = _zz_98_;
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src1 = ((execute_BRANCH_CTRL == `BranchCtrlEnum_defaultEncoding_JALR) ? execute_RS1 : execute_PC);
  assign _zz_100_ = _zz_176_[19];
  always @ (*) begin
    _zz_101_[10] = _zz_100_;
    _zz_101_[9] = _zz_100_;
    _zz_101_[8] = _zz_100_;
    _zz_101_[7] = _zz_100_;
    _zz_101_[6] = _zz_100_;
    _zz_101_[5] = _zz_100_;
    _zz_101_[4] = _zz_100_;
    _zz_101_[3] = _zz_100_;
    _zz_101_[2] = _zz_100_;
    _zz_101_[1] = _zz_100_;
    _zz_101_[0] = _zz_100_;
  end

  assign _zz_102_ = _zz_177_[11];
  always @ (*) begin
    _zz_103_[19] = _zz_102_;
    _zz_103_[18] = _zz_102_;
    _zz_103_[17] = _zz_102_;
    _zz_103_[16] = _zz_102_;
    _zz_103_[15] = _zz_102_;
    _zz_103_[14] = _zz_102_;
    _zz_103_[13] = _zz_102_;
    _zz_103_[12] = _zz_102_;
    _zz_103_[11] = _zz_102_;
    _zz_103_[10] = _zz_102_;
    _zz_103_[9] = _zz_102_;
    _zz_103_[8] = _zz_102_;
    _zz_103_[7] = _zz_102_;
    _zz_103_[6] = _zz_102_;
    _zz_103_[5] = _zz_102_;
    _zz_103_[4] = _zz_102_;
    _zz_103_[3] = _zz_102_;
    _zz_103_[2] = _zz_102_;
    _zz_103_[1] = _zz_102_;
    _zz_103_[0] = _zz_102_;
  end

  assign _zz_104_ = _zz_178_[11];
  always @ (*) begin
    _zz_105_[18] = _zz_104_;
    _zz_105_[17] = _zz_104_;
    _zz_105_[16] = _zz_104_;
    _zz_105_[15] = _zz_104_;
    _zz_105_[14] = _zz_104_;
    _zz_105_[13] = _zz_104_;
    _zz_105_[12] = _zz_104_;
    _zz_105_[11] = _zz_104_;
    _zz_105_[10] = _zz_104_;
    _zz_105_[9] = _zz_104_;
    _zz_105_[8] = _zz_104_;
    _zz_105_[7] = _zz_104_;
    _zz_105_[6] = _zz_104_;
    _zz_105_[5] = _zz_104_;
    _zz_105_[4] = _zz_104_;
    _zz_105_[3] = _zz_104_;
    _zz_105_[2] = _zz_104_;
    _zz_105_[1] = _zz_104_;
    _zz_105_[0] = _zz_104_;
  end

  always @ (*) begin
    case(execute_BRANCH_CTRL)
      `BranchCtrlEnum_defaultEncoding_JAL : begin
        _zz_106_ = {{_zz_101_,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[19 : 12]},execute_INSTRUCTION[20]},execute_INSTRUCTION[30 : 21]}},1'b0};
      end
      `BranchCtrlEnum_defaultEncoding_JALR : begin
        _zz_106_ = {_zz_103_,execute_INSTRUCTION[31 : 20]};
      end
      default : begin
        _zz_106_ = {{_zz_105_,{{{execute_INSTRUCTION[31],execute_INSTRUCTION[7]},execute_INSTRUCTION[30 : 25]},execute_INSTRUCTION[11 : 8]}},1'b0};
      end
    endcase
  end

  assign execute_BranchPlugin_branch_src2 = _zz_106_;
  assign execute_BranchPlugin_branchAdder = (execute_BranchPlugin_branch_src1 + execute_BranchPlugin_branch_src2);
  assign BranchPlugin_jumpInterface_valid = ((memory_arbitration_isValid && memory_BRANCH_DO) && (! 1'b0));
  assign BranchPlugin_jumpInterface_payload = memory_BRANCH_CALC;
  always @ (*) begin
    debug_bus_cmd_ready = 1'b1;
    if(debug_bus_cmd_valid)begin
      case(_zz_132_)
        6'b000000 : begin
        end
        6'b000001 : begin
          if(debug_bus_cmd_payload_wr)begin
            debug_bus_cmd_ready = IBusSimplePlugin_injectionPort_ready;
          end
        end
        default : begin
        end
      endcase
    end
  end

  always @ (*) begin
    debug_bus_rsp_data = DebugPlugin_busReadDataReg;
    if((! _zz_107_))begin
      debug_bus_rsp_data[0] = DebugPlugin_resetIt;
      debug_bus_rsp_data[1] = DebugPlugin_haltIt;
      debug_bus_rsp_data[2] = DebugPlugin_isPipBusy;
      debug_bus_rsp_data[3] = DebugPlugin_haltedByBreak;
      debug_bus_rsp_data[4] = DebugPlugin_stepIt;
    end
  end

  always @ (*) begin
    IBusSimplePlugin_injectionPort_valid = 1'b0;
    if(debug_bus_cmd_valid)begin
      case(_zz_132_)
        6'b000000 : begin
        end
        6'b000001 : begin
          if(debug_bus_cmd_payload_wr)begin
            IBusSimplePlugin_injectionPort_valid = 1'b1;
          end
        end
        default : begin
        end
      endcase
    end
  end

  assign IBusSimplePlugin_injectionPort_payload = debug_bus_cmd_payload_data;
  assign debug_resetOut = DebugPlugin_resetIt_regNext;
  assign _zz_19_ = decode_BRANCH_CTRL;
  assign _zz_17_ = _zz_32_;
  assign _zz_20_ = decode_to_execute_BRANCH_CTRL;
  assign _zz_16_ = decode_SHIFT_CTRL;
  assign _zz_14_ = _zz_34_;
  assign _zz_21_ = decode_to_execute_SHIFT_CTRL;
  assign _zz_26_ = _zz_38_;
  assign _zz_13_ = decode_ENV_CTRL;
  assign _zz_10_ = execute_ENV_CTRL;
  assign _zz_8_ = memory_ENV_CTRL;
  assign _zz_11_ = _zz_35_;
  assign _zz_41_ = decode_to_execute_ENV_CTRL;
  assign _zz_40_ = execute_to_memory_ENV_CTRL;
  assign _zz_42_ = memory_to_writeBack_ENV_CTRL;
  assign _zz_6_ = decode_ALU_CTRL;
  assign _zz_4_ = _zz_33_;
  assign _zz_27_ = decode_to_execute_ALU_CTRL;
  assign _zz_24_ = _zz_36_;
  assign _zz_3_ = decode_ALU_BITWISE_CTRL;
  assign _zz_1_ = _zz_37_;
  assign _zz_28_ = decode_to_execute_ALU_BITWISE_CTRL;
  assign decode_arbitration_isFlushed = (({writeBack_arbitration_flushNext,{memory_arbitration_flushNext,execute_arbitration_flushNext}} != (3'b000)) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,{execute_arbitration_flushIt,decode_arbitration_flushIt}}} != (4'b0000)));
  assign execute_arbitration_isFlushed = (({writeBack_arbitration_flushNext,memory_arbitration_flushNext} != (2'b00)) || ({writeBack_arbitration_flushIt,{memory_arbitration_flushIt,execute_arbitration_flushIt}} != (3'b000)));
  assign memory_arbitration_isFlushed = ((writeBack_arbitration_flushNext != (1'b0)) || ({writeBack_arbitration_flushIt,memory_arbitration_flushIt} != (2'b00)));
  assign writeBack_arbitration_isFlushed = (1'b0 || (writeBack_arbitration_flushIt != (1'b0)));
  assign decode_arbitration_isStuckByOthers = (decode_arbitration_haltByOther || (((1'b0 || execute_arbitration_isStuck) || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign decode_arbitration_isStuck = (decode_arbitration_haltItself || decode_arbitration_isStuckByOthers);
  assign decode_arbitration_isMoving = ((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt));
  assign decode_arbitration_isFiring = ((decode_arbitration_isValid && (! decode_arbitration_isStuck)) && (! decode_arbitration_removeIt));
  assign execute_arbitration_isStuckByOthers = (execute_arbitration_haltByOther || ((1'b0 || memory_arbitration_isStuck) || writeBack_arbitration_isStuck));
  assign execute_arbitration_isStuck = (execute_arbitration_haltItself || execute_arbitration_isStuckByOthers);
  assign execute_arbitration_isMoving = ((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt));
  assign execute_arbitration_isFiring = ((execute_arbitration_isValid && (! execute_arbitration_isStuck)) && (! execute_arbitration_removeIt));
  assign memory_arbitration_isStuckByOthers = (memory_arbitration_haltByOther || (1'b0 || writeBack_arbitration_isStuck));
  assign memory_arbitration_isStuck = (memory_arbitration_haltItself || memory_arbitration_isStuckByOthers);
  assign memory_arbitration_isMoving = ((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt));
  assign memory_arbitration_isFiring = ((memory_arbitration_isValid && (! memory_arbitration_isStuck)) && (! memory_arbitration_removeIt));
  assign writeBack_arbitration_isStuckByOthers = (writeBack_arbitration_haltByOther || 1'b0);
  assign writeBack_arbitration_isStuck = (writeBack_arbitration_haltItself || writeBack_arbitration_isStuckByOthers);
  assign writeBack_arbitration_isMoving = ((! writeBack_arbitration_isStuck) && (! writeBack_arbitration_removeIt));
  assign writeBack_arbitration_isFiring = ((writeBack_arbitration_isValid && (! writeBack_arbitration_isStuck)) && (! writeBack_arbitration_removeIt));
  always @ (*) begin
    IBusSimplePlugin_injectionPort_ready = 1'b0;
    case(_zz_108_)
      3'b000 : begin
      end
      3'b001 : begin
      end
      3'b010 : begin
      end
      3'b011 : begin
      end
      3'b100 : begin
        IBusSimplePlugin_injectionPort_ready = 1'b1;
      end
      default : begin
      end
    endcase
  end

  always @ (*) begin
    _zz_109_ = 32'h0;
    if(execute_CsrPlugin_csr_768)begin
      _zz_109_[12 : 11] = CsrPlugin_mstatus_MPP;
      _zz_109_[7 : 7] = CsrPlugin_mstatus_MPIE;
      _zz_109_[3 : 3] = CsrPlugin_mstatus_MIE;
    end
  end

  always @ (*) begin
    _zz_110_ = 32'h0;
    if(execute_CsrPlugin_csr_836)begin
      _zz_110_[11 : 11] = CsrPlugin_mip_MEIP;
      _zz_110_[7 : 7] = CsrPlugin_mip_MTIP;
      _zz_110_[3 : 3] = CsrPlugin_mip_MSIP;
    end
  end

  always @ (*) begin
    _zz_111_ = 32'h0;
    if(execute_CsrPlugin_csr_772)begin
      _zz_111_[11 : 11] = CsrPlugin_mie_MEIE;
      _zz_111_[7 : 7] = CsrPlugin_mie_MTIE;
      _zz_111_[3 : 3] = CsrPlugin_mie_MSIE;
    end
  end

  always @ (*) begin
    _zz_112_ = 32'h0;
    if(execute_CsrPlugin_csr_834)begin
      _zz_112_[31 : 31] = CsrPlugin_mcause_interrupt;
      _zz_112_[3 : 0] = CsrPlugin_mcause_exceptionCode;
    end
  end

  assign execute_CsrPlugin_readData = ((_zz_109_ | _zz_110_) | (_zz_111_ | _zz_112_));
  assign _zz_114_ = 1'b0;
  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      IBusSimplePlugin_fetchPc_pcReg <= 32'h80000000;
      IBusSimplePlugin_fetchPc_correctionReg <= 1'b0;
      IBusSimplePlugin_fetchPc_booted <= 1'b0;
      IBusSimplePlugin_fetchPc_inc <= 1'b0;
      _zz_51_ <= 1'b0;
      _zz_53_ <= 1'b0;
      _zz_55_ <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      IBusSimplePlugin_injector_nextPcCalc_valids_5 <= 1'b0;
      IBusSimplePlugin_pending_value <= (3'b000);
      IBusSimplePlugin_rspJoin_rspBuffer_discardCounter <= (3'b000);
      CsrPlugin_mstatus_MIE <= 1'b0;
      CsrPlugin_mstatus_MPIE <= 1'b0;
      CsrPlugin_mstatus_MPP <= (2'b11);
      CsrPlugin_mie_MEIE <= 1'b0;
      CsrPlugin_mie_MTIE <= 1'b0;
      CsrPlugin_mie_MSIE <= 1'b0;
      CsrPlugin_interrupt_valid <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
      CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      CsrPlugin_hadException <= 1'b0;
      execute_CsrPlugin_wfiWake <= 1'b0;
      _zz_84_ <= 1'b1;
      execute_LightShifterPlugin_isActive <= 1'b0;
      _zz_95_ <= 1'b0;
      execute_arbitration_isValid <= 1'b0;
      memory_arbitration_isValid <= 1'b0;
      writeBack_arbitration_isValid <= 1'b0;
      _zz_108_ <= (3'b000);
      memory_to_writeBack_REGFILE_WRITE_DATA <= 32'h0;
      memory_to_writeBack_INSTRUCTION <= 32'h0;
    end else begin
      if(IBusSimplePlugin_fetchPc_correction)begin
        IBusSimplePlugin_fetchPc_correctionReg <= 1'b1;
      end
      if((IBusSimplePlugin_fetchPc_output_valid && IBusSimplePlugin_fetchPc_output_ready))begin
        IBusSimplePlugin_fetchPc_correctionReg <= 1'b0;
      end
      IBusSimplePlugin_fetchPc_booted <= 1'b1;
      if((IBusSimplePlugin_fetchPc_correction || IBusSimplePlugin_fetchPc_pcRegPropagate))begin
        IBusSimplePlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusSimplePlugin_fetchPc_output_valid && IBusSimplePlugin_fetchPc_output_ready))begin
        IBusSimplePlugin_fetchPc_inc <= 1'b1;
      end
      if(((! IBusSimplePlugin_fetchPc_output_valid) && IBusSimplePlugin_fetchPc_output_ready))begin
        IBusSimplePlugin_fetchPc_inc <= 1'b0;
      end
      if((IBusSimplePlugin_fetchPc_booted && ((IBusSimplePlugin_fetchPc_output_ready || IBusSimplePlugin_fetchPc_correction) || IBusSimplePlugin_fetchPc_pcRegPropagate)))begin
        IBusSimplePlugin_fetchPc_pcReg <= IBusSimplePlugin_fetchPc_pc;
      end
      if(IBusSimplePlugin_iBusRsp_flush)begin
        _zz_51_ <= 1'b0;
      end
      if(_zz_49_)begin
        _zz_51_ <= (IBusSimplePlugin_iBusRsp_stages_0_output_valid && (! 1'b0));
      end
      if(IBusSimplePlugin_iBusRsp_flush)begin
        _zz_53_ <= 1'b0;
      end
      if(IBusSimplePlugin_iBusRsp_stages_1_output_ready)begin
        _zz_53_ <= (IBusSimplePlugin_iBusRsp_stages_1_output_valid && (! IBusSimplePlugin_iBusRsp_flush));
      end
      if(decode_arbitration_removeIt)begin
        _zz_55_ <= 1'b0;
      end
      if(IBusSimplePlugin_iBusRsp_output_ready)begin
        _zz_55_ <= (IBusSimplePlugin_iBusRsp_output_valid && (! IBusSimplePlugin_externalFlush));
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_0 <= 1'b0;
      end
      if((! (! IBusSimplePlugin_iBusRsp_stages_1_input_ready)))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_0 <= 1'b1;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if((! (! IBusSimplePlugin_iBusRsp_stages_2_input_ready)))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_1 <= IBusSimplePlugin_injector_nextPcCalc_valids_0;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_1 <= 1'b0;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if((! (! IBusSimplePlugin_injector_decodeInput_ready)))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_2 <= IBusSimplePlugin_injector_nextPcCalc_valids_1;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_2 <= 1'b0;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if((! execute_arbitration_isStuck))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_3 <= IBusSimplePlugin_injector_nextPcCalc_valids_2;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_3 <= 1'b0;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if((! memory_arbitration_isStuck))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_4 <= IBusSimplePlugin_injector_nextPcCalc_valids_3;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_4 <= 1'b0;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_5 <= 1'b0;
      end
      if((! writeBack_arbitration_isStuck))begin
        IBusSimplePlugin_injector_nextPcCalc_valids_5 <= IBusSimplePlugin_injector_nextPcCalc_valids_4;
      end
      if(IBusSimplePlugin_fetchPc_flushed)begin
        IBusSimplePlugin_injector_nextPcCalc_valids_5 <= 1'b0;
      end
      IBusSimplePlugin_pending_value <= IBusSimplePlugin_pending_next;
      IBusSimplePlugin_rspJoin_rspBuffer_discardCounter <= (IBusSimplePlugin_rspJoin_rspBuffer_discardCounter - _zz_161_);
      if(IBusSimplePlugin_iBusRsp_flush)begin
        IBusSimplePlugin_rspJoin_rspBuffer_discardCounter <= IBusSimplePlugin_pending_next;
      end
      CsrPlugin_interrupt_valid <= 1'b0;
      if(_zz_133_)begin
        if(_zz_134_)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_135_)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
        if(_zz_136_)begin
          CsrPlugin_interrupt_valid <= 1'b1;
        end
      end
      if(CsrPlugin_pipelineLiberator_active)begin
        if((! execute_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b1;
        end
        if((! memory_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_1 <= CsrPlugin_pipelineLiberator_pcValids_0;
        end
        if((! writeBack_arbitration_isStuck))begin
          CsrPlugin_pipelineLiberator_pcValids_2 <= CsrPlugin_pipelineLiberator_pcValids_1;
        end
      end
      if(((! CsrPlugin_pipelineLiberator_active) || decode_arbitration_removeIt))begin
        CsrPlugin_pipelineLiberator_pcValids_0 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_1 <= 1'b0;
        CsrPlugin_pipelineLiberator_pcValids_2 <= 1'b0;
      end
      if(CsrPlugin_interruptJump)begin
        CsrPlugin_interrupt_valid <= 1'b0;
      end
      CsrPlugin_hadException <= CsrPlugin_exception;
      if(_zz_122_)begin
        case(CsrPlugin_targetPrivilege)
          2'b11 : begin
            CsrPlugin_mstatus_MIE <= 1'b0;
            CsrPlugin_mstatus_MPIE <= CsrPlugin_mstatus_MIE;
            CsrPlugin_mstatus_MPP <= CsrPlugin_privilege;
          end
          default : begin
          end
        endcase
      end
      if(_zz_123_)begin
        case(_zz_125_)
          2'b11 : begin
            CsrPlugin_mstatus_MPP <= (2'b00);
            CsrPlugin_mstatus_MIE <= CsrPlugin_mstatus_MPIE;
            CsrPlugin_mstatus_MPIE <= 1'b1;
          end
          default : begin
          end
        endcase
      end
      execute_CsrPlugin_wfiWake <= (({_zz_70_,{_zz_69_,_zz_68_}} != (3'b000)) || CsrPlugin_thirdPartyWake);
      _zz_84_ <= 1'b0;
      if(_zz_118_)begin
        if(_zz_119_)begin
          execute_LightShifterPlugin_isActive <= 1'b1;
          if(execute_LightShifterPlugin_done)begin
            execute_LightShifterPlugin_isActive <= 1'b0;
          end
        end
      end
      if(execute_arbitration_removeIt)begin
        execute_LightShifterPlugin_isActive <= 1'b0;
      end
      _zz_95_ <= (_zz_30_ && writeBack_arbitration_isFiring);
      if((! writeBack_arbitration_isStuck))begin
        memory_to_writeBack_REGFILE_WRITE_DATA <= memory_REGFILE_WRITE_DATA;
      end
      if((! writeBack_arbitration_isStuck))begin
        memory_to_writeBack_INSTRUCTION <= memory_INSTRUCTION;
      end
      if(((! execute_arbitration_isStuck) || execute_arbitration_removeIt))begin
        execute_arbitration_isValid <= 1'b0;
      end
      if(((! decode_arbitration_isStuck) && (! decode_arbitration_removeIt)))begin
        execute_arbitration_isValid <= decode_arbitration_isValid;
      end
      if(((! memory_arbitration_isStuck) || memory_arbitration_removeIt))begin
        memory_arbitration_isValid <= 1'b0;
      end
      if(((! execute_arbitration_isStuck) && (! execute_arbitration_removeIt)))begin
        memory_arbitration_isValid <= execute_arbitration_isValid;
      end
      if(((! writeBack_arbitration_isStuck) || writeBack_arbitration_removeIt))begin
        writeBack_arbitration_isValid <= 1'b0;
      end
      if(((! memory_arbitration_isStuck) && (! memory_arbitration_removeIt)))begin
        writeBack_arbitration_isValid <= memory_arbitration_isValid;
      end
      case(_zz_108_)
        3'b000 : begin
          if(IBusSimplePlugin_injectionPort_valid)begin
            _zz_108_ <= (3'b001);
          end
        end
        3'b001 : begin
          _zz_108_ <= (3'b010);
        end
        3'b010 : begin
          _zz_108_ <= (3'b011);
        end
        3'b011 : begin
          if((! decode_arbitration_isStuck))begin
            _zz_108_ <= (3'b100);
          end
        end
        3'b100 : begin
          _zz_108_ <= (3'b000);
        end
        default : begin
        end
      endcase
      if(execute_CsrPlugin_csr_768)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mstatus_MPP <= execute_CsrPlugin_writeData[12 : 11];
          CsrPlugin_mstatus_MPIE <= _zz_179_[0];
          CsrPlugin_mstatus_MIE <= _zz_180_[0];
        end
      end
      if(execute_CsrPlugin_csr_772)begin
        if(execute_CsrPlugin_writeEnable)begin
          CsrPlugin_mie_MEIE <= _zz_182_[0];
          CsrPlugin_mie_MTIE <= _zz_183_[0];
          CsrPlugin_mie_MSIE <= _zz_184_[0];
        end
      end
    end
  end

  always @ (posedge io_clk) begin
    if(IBusSimplePlugin_iBusRsp_stages_1_output_ready)begin
      _zz_54_ <= IBusSimplePlugin_iBusRsp_stages_1_output_payload;
    end
    if(IBusSimplePlugin_iBusRsp_output_ready)begin
      _zz_56_ <= IBusSimplePlugin_iBusRsp_output_payload_pc;
      _zz_57_ <= IBusSimplePlugin_iBusRsp_output_payload_rsp_error;
      _zz_58_ <= IBusSimplePlugin_iBusRsp_output_payload_rsp_inst;
      _zz_59_ <= IBusSimplePlugin_iBusRsp_output_payload_isRvc;
    end
    if(IBusSimplePlugin_injector_decodeInput_ready)begin
      IBusSimplePlugin_injector_formal_rawInDecode <= IBusSimplePlugin_iBusRsp_output_payload_rsp_inst;
    end
    `ifndef SYNTHESIS
      `ifdef FORMAL
        assert((! (((dBus_rsp_ready && memory_MEMORY_ENABLE) && memory_arbitration_isValid) && memory_arbitration_isStuck)))
      `else
        if(!(! (((dBus_rsp_ready && memory_MEMORY_ENABLE) && memory_arbitration_isValid) && memory_arbitration_isStuck))) begin
          $display("FAILURE DBusSimplePlugin doesn't allow memory stage stall when read happend");
          $finish;
        end
      `endif
    `endif
    `ifndef SYNTHESIS
      `ifdef FORMAL
        assert((! (((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE) && (! writeBack_MEMORY_STORE)) && writeBack_arbitration_isStuck)))
      `else
        if(!(! (((writeBack_arbitration_isValid && writeBack_MEMORY_ENABLE) && (! writeBack_MEMORY_STORE)) && writeBack_arbitration_isStuck))) begin
          $display("FAILURE DBusSimplePlugin doesn't allow writeback stage stall when read happend");
          $finish;
        end
      `endif
    `endif
    CsrPlugin_mip_MEIP <= externalInterrupt;
    CsrPlugin_mip_MTIP <= timerInterrupt;
    CsrPlugin_mip_MSIP <= softwareInterrupt;
    CsrPlugin_mcycle <= (CsrPlugin_mcycle + 64'h0000000000000001);
    if(writeBack_arbitration_isFiring)begin
      CsrPlugin_minstret <= (CsrPlugin_minstret + 64'h0000000000000001);
    end
    if(_zz_133_)begin
      if(_zz_134_)begin
        CsrPlugin_interrupt_code <= (4'b0111);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
      if(_zz_135_)begin
        CsrPlugin_interrupt_code <= (4'b0011);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
      if(_zz_136_)begin
        CsrPlugin_interrupt_code <= (4'b1011);
        CsrPlugin_interrupt_targetPrivilege <= (2'b11);
      end
    end
    if(_zz_122_)begin
      case(CsrPlugin_targetPrivilege)
        2'b11 : begin
          CsrPlugin_mcause_interrupt <= (! CsrPlugin_hadException);
          CsrPlugin_mcause_exceptionCode <= CsrPlugin_trapCause;
          CsrPlugin_mepc <= decode_PC;
        end
        default : begin
        end
      endcase
    end
    if(_zz_118_)begin
      if(_zz_119_)begin
        execute_LightShifterPlugin_amplitudeReg <= (execute_LightShifterPlugin_amplitude - 5'h01);
      end
    end
    _zz_96_ <= _zz_29_[11 : 7];
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_READ_OPCODE <= decode_CSR_READ_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BRANCH_CTRL <= _zz_18_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SHIFT_CTRL <= _zz_15_;
    end
    if(((! memory_arbitration_isStuck) && (! execute_arbitration_isStuckByOthers)))begin
      execute_to_memory_REGFILE_WRITE_DATA <= _zz_39_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_CSR_WRITE_OPCODE <= decode_CSR_WRITE_OPCODE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_STORE <= decode_MEMORY_STORE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_STORE <= execute_MEMORY_STORE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_STORE <= memory_MEMORY_STORE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_DO <= execute_BRANCH_DO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_USE_SUB_LESS <= decode_SRC_USE_SUB_LESS;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ADDRESS_LOW <= execute_MEMORY_ADDRESS_LOW;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ADDRESS_LOW <= memory_MEMORY_ADDRESS_LOW;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_FORMAL_PC_NEXT <= decode_FORMAL_PC_NEXT;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_FORMAL_PC_NEXT <= execute_FORMAL_PC_NEXT;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_FORMAL_PC_NEXT <= _zz_44_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_PC <= _zz_22_;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_PC <= execute_PC;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_PC <= memory_PC;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BRANCH_CALC <= execute_BRANCH_CALC;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2_FORCE_ZERO <= decode_SRC2_FORCE_ZERO;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_EXECUTE_STAGE <= decode_BYPASSABLE_EXECUTE_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_DO_EBREAK <= decode_DO_EBREAK;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_INSTRUCTION <= decode_INSTRUCTION;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_INSTRUCTION <= execute_INSTRUCTION;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_IS_CSR <= decode_IS_CSR;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS2 <= _zz_23_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ENV_CTRL <= _zz_12_;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_ENV_CTRL <= _zz_9_;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_ENV_CTRL <= _zz_7_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC2 <= decode_SRC2;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_MEMORY_ENABLE <= decode_MEMORY_ENABLE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_MEMORY_ENABLE <= execute_MEMORY_ENABLE;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_ENABLE <= memory_MEMORY_ENABLE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_CTRL <= _zz_5_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC_LESS_UNSIGNED <= decode_SRC_LESS_UNSIGNED;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_MEMORY_READ_DATA <= memory_MEMORY_READ_DATA;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_REGFILE_WRITE_VALID <= decode_REGFILE_WRITE_VALID;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_REGFILE_WRITE_VALID <= execute_REGFILE_WRITE_VALID;
    end
    if((! writeBack_arbitration_isStuck))begin
      memory_to_writeBack_REGFILE_WRITE_VALID <= memory_REGFILE_WRITE_VALID;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_SRC1 <= decode_SRC1;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_BYPASSABLE_MEMORY_STAGE <= decode_BYPASSABLE_MEMORY_STAGE;
    end
    if((! memory_arbitration_isStuck))begin
      execute_to_memory_BYPASSABLE_MEMORY_STAGE <= execute_BYPASSABLE_MEMORY_STAGE;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_RS1 <= _zz_25_;
    end
    if((! execute_arbitration_isStuck))begin
      decode_to_execute_ALU_BITWISE_CTRL <= _zz_2_;
    end
    if((_zz_108_ != (3'b000)))begin
      _zz_58_ <= IBusSimplePlugin_injectionPort_payload;
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_768 <= (decode_INSTRUCTION[31 : 20] == 12'h300);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_836 <= (decode_INSTRUCTION[31 : 20] == 12'h344);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_772 <= (decode_INSTRUCTION[31 : 20] == 12'h304);
    end
    if((! execute_arbitration_isStuck))begin
      execute_CsrPlugin_csr_834 <= (decode_INSTRUCTION[31 : 20] == 12'h342);
    end
    if(execute_CsrPlugin_csr_836)begin
      if(execute_CsrPlugin_writeEnable)begin
        CsrPlugin_mip_MSIP <= _zz_181_[0];
      end
    end
  end

  always @ (posedge io_clk) begin
    DebugPlugin_firstCycle <= 1'b0;
    if(debug_bus_cmd_ready)begin
      DebugPlugin_firstCycle <= 1'b1;
    end
    DebugPlugin_secondCycle <= DebugPlugin_firstCycle;
    DebugPlugin_isPipBusy <= (({writeBack_arbitration_isValid,{memory_arbitration_isValid,{execute_arbitration_isValid,decode_arbitration_isValid}}} != (4'b0000)) || IBusSimplePlugin_incomingInstruction);
    if(writeBack_arbitration_isValid)begin
      DebugPlugin_busReadDataReg <= _zz_43_;
    end
    _zz_107_ <= debug_bus_cmd_payload_address[2];
    if(_zz_120_)begin
      DebugPlugin_busReadDataReg <= execute_PC;
    end
    DebugPlugin_resetIt_regNext <= DebugPlugin_resetIt;
  end

  always @ (posedge io_clk or posedge resetCtrl_mainClkReset) begin
    if (resetCtrl_mainClkReset) begin
      DebugPlugin_resetIt <= 1'b0;
      DebugPlugin_haltIt <= 1'b0;
      DebugPlugin_stepIt <= 1'b0;
      DebugPlugin_godmode <= 1'b0;
      DebugPlugin_haltedByBreak <= 1'b0;
    end else begin
      if((DebugPlugin_haltIt && (! DebugPlugin_isPipBusy)))begin
        DebugPlugin_godmode <= 1'b1;
      end
      if(debug_bus_cmd_valid)begin
        case(_zz_132_)
          6'b000000 : begin
            if(debug_bus_cmd_payload_wr)begin
              DebugPlugin_stepIt <= debug_bus_cmd_payload_data[4];
              if(debug_bus_cmd_payload_data[16])begin
                DebugPlugin_resetIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[24])begin
                DebugPlugin_resetIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[17])begin
                DebugPlugin_haltIt <= 1'b1;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltIt <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_haltedByBreak <= 1'b0;
              end
              if(debug_bus_cmd_payload_data[25])begin
                DebugPlugin_godmode <= 1'b0;
              end
            end
          end
          6'b000001 : begin
          end
          default : begin
          end
        endcase
      end
      if(_zz_120_)begin
        if(_zz_121_)begin
          DebugPlugin_haltIt <= 1'b1;
          DebugPlugin_haltedByBreak <= 1'b1;
        end
      end
      if(_zz_124_)begin
        if(decode_arbitration_isValid)begin
          DebugPlugin_haltIt <= 1'b1;
        end
      end
    end
  end


endmodule

//***************************************************************************/
// mcu_StreamFifoLowLatency.v
//***************************************************************************/

`timescale 1ps / 1ps

module ph1_logic_StreamFifoLowLatency (
  input               io_push_valid,
  output              io_push_ready,
  input               io_push_payload_error,
  input      [31:0]   io_push_payload_inst,
  output reg          io_pop_valid,
  input               io_pop_ready,
  output reg          io_pop_payload_error,
  output reg [31:0]   io_pop_payload_inst,
  input               io_flush,
  output     [0:0]    io_occupancy,
  input               io_clk,
  input               resetCtrl_systemReset 
);

  wire                _zz_4_;
  wire       [0:0]    _zz_5_;
  reg                 _zz_1_;
  reg                 pushPtr_willIncrement;
  reg                 pushPtr_willClear;
  wire                pushPtr_willOverflowIfInc;
  wire                pushPtr_willOverflow;
  reg                 popPtr_willIncrement;
  reg                 popPtr_willClear;
  wire                popPtr_willOverflowIfInc;
  wire                popPtr_willOverflow;
  wire                ptrMatch;
  reg                 risingOccupancy;
  wire                empty;
  wire                full;
  wire                pushing;
  wire                popping;
  wire       [32:0]   _zz_2_;
  reg        [32:0]   _zz_3_;

  assign _zz_4_ = (! empty);
  assign _zz_5_ = _zz_2_[0 : 0];
  always @ (*) begin
    _zz_1_ = 1'b0;
    if(pushing)begin
      _zz_1_ = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willIncrement = 1'b0;
    if(pushing)begin
      pushPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    pushPtr_willClear = 1'b0;
    if(io_flush)begin
      pushPtr_willClear = 1'b1;
    end
  end

  assign pushPtr_willOverflowIfInc = 1'b1;
  assign pushPtr_willOverflow = (pushPtr_willOverflowIfInc && pushPtr_willIncrement);
  always @ (*) begin
    popPtr_willIncrement = 1'b0;
    if(popping)begin
      popPtr_willIncrement = 1'b1;
    end
  end

  always @ (*) begin
    popPtr_willClear = 1'b0;
    if(io_flush)begin
      popPtr_willClear = 1'b1;
    end
  end

  assign popPtr_willOverflowIfInc = 1'b1;
  assign popPtr_willOverflow = (popPtr_willOverflowIfInc && popPtr_willIncrement);
  assign ptrMatch = 1'b1;
  assign empty = (ptrMatch && (! risingOccupancy));
  assign full = (ptrMatch && risingOccupancy);
  assign pushing = (io_push_valid && io_push_ready);
  assign popping = (io_pop_valid && io_pop_ready);
  assign io_push_ready = (! full);
  always @ (*) begin
    if(_zz_4_)begin
      io_pop_valid = 1'b1;
    end else begin
      io_pop_valid = io_push_valid;
    end
  end

  assign _zz_2_ = _zz_3_;
  always @ (*) begin
    if(_zz_4_)begin
      io_pop_payload_error = _zz_5_[0];
    end else begin
      io_pop_payload_error = io_push_payload_error;
    end
  end

  always @ (*) begin
    if(_zz_4_)begin
      io_pop_payload_inst = _zz_2_[32 : 1];
    end else begin
      io_pop_payload_inst = io_push_payload_inst;
    end
  end

  assign io_occupancy = (risingOccupancy && ptrMatch);
  always @ (posedge io_clk or posedge resetCtrl_systemReset) begin
    if (resetCtrl_systemReset) begin
      risingOccupancy <= 1'b0;
    end else begin
      if((pushing != popping))begin
        risingOccupancy <= pushing;
      end
      if(io_flush)begin
        risingOccupancy <= 1'b0;
      end
    end
  end

  always @ (posedge io_clk) begin
    if(_zz_1_)begin
      _zz_3_ <= {io_push_payload_inst,io_push_payload_error};
    end
  end


endmodule


//***************************************************************************
// APB UART Modules
//***************************************************************************
`timescale 1ps / 1ps

module ph1_logic_apb_uart (

    input         apb_pclk   ,
    input         apb_prstn  ,
    output        apb_pready ,
    input         apb_psel   ,
    input         apb_penable,
    input         apb_pwrite ,
    input  [ 7:0] apb_paddr  ,
    input  [31:0] apb_pwdata ,
    output [31:0] apb_prdata ,
    output        apb_pslverr,
    
    input         uart_rxd   ,
	output        uart_txd
);

parameter BAUD_RATE   = 115_200    ;
parameter CLOCK_RATE  = 25_000_000 ;

wire       clk  ;
wire       rstn ;
wire       rst  ;

wire       uart_tx_fifo_empty   ;
wire       uart_tx_fifo_full    ;
wire       uart_tx_fifo_wr_en   ;
wire [7:0] uart_tx_fifo_wr_data ;
wire       uart_tx_fifo_rd_en   ;
wire [7:0] uart_tx_fifo_rd_data ;

wire       uart_rx_fifo_empty   ;
wire       uart_rx_fifo_full    ;
wire       uart_rx_fifo_wr_en   ;
wire [7:0] uart_rx_fifo_wr_data ;
wire       uart_rx_fifo_rd_en   ;
wire [7:0] uart_rx_fifo_rd_data ;

assign clk  = apb_pclk  ;
assign rstn = apb_prstn ;
assign rst  =~apb_prstn ;
assign apb_pslverr = 1'b0 ;
assign apb_pready  = 1'b1 ;

//----------------------------------------------//
wire apb_wr_flag ;
wire apb_rd_flag ;

reg  [31:0] prdata ;

wire [7:0] rx_fifo ; // 0 , read-only
reg  [7:0] tx_fifo ; // 4 , write-only
wire [3:0] status  ; // 8 , read-only
reg  [1:0] ctrl    ; // c , rw

reg        tx_fifo_en ;
reg        rx_fifo_en ;

wire rx_fifo_valid ; // status[0]
wire rx_fifo_full  ; // status[1]
wire tx_fifo_empty ; // status[2]
wire tx_fifo_full  ; // status[3]

wire rst_tx_fifo ;
wire rst_rx_fifo ;

assign rst_tx_fifo = ctrl[0] ;
assign rst_rx_fifo = ctrl[1] ;

assign apb_wr_flag = apb_pwrite ? (apb_psel & apb_penable) : 1'b0 ;
assign apb_rd_flag = apb_pwrite ? 1'b0 : (apb_psel & apb_penable) ;

assign status[0] = rx_fifo_valid ;
assign status[1] = rx_fifo_full  ;
assign status[2] = tx_fifo_empty ;
assign status[3] = tx_fifo_full  ;

assign apb_prdata  = (apb_paddr[3:0] == 4'h0) ? {24'h0, rx_fifo} :
                     (apb_paddr[3:0] == 4'h8) ? {28'h0, status } :
                     (apb_paddr[3:0] == 4'hC) ? {30'h0, ctrl   } : 32'h0 ;

always @ ( posedge clk )
begin
    if ( rst ) begin
        tx_fifo    <= 8'h0 ;
        tx_fifo_en <= 1'b0 ;
        rx_fifo_en <= 1'b0 ;
        ctrl       <= 3'h0 ;
        prdata     <= 32'h0 ;
    end else if ( apb_wr_flag ) begin
        case ( apb_paddr[3:0] )
            4'h4 : begin
                tx_fifo    <= apb_pwdata[7:0] ;
                tx_fifo_en <= apb_wr_flag ;
            end
            4'hC : begin
                ctrl <= apb_pwdata[1:0];
            end
            default : begin
                tx_fifo    <= 8'h0 ;
                tx_fifo_en <= 1'b0 ;
                ctrl       <= ctrl ;
            end
        endcase
    end else if ( apb_rd_flag ) begin
        case ( apb_paddr[3:0] )
            4'h0 : begin
                rx_fifo_en <= apb_rd_flag ;
                prdata <= {24'h0, rx_fifo};
            end
            4'h8 : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= {28'h0, status};
            end
            4'hC : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= {30'h0, ctrl};
            end
            default : begin
                rx_fifo_en <= 1'b0 ;
                prdata <= 32'h0 ;
            end
        endcase
    end else begin
        tx_fifo    <= 8'h0 ;
        tx_fifo_en <= 1'b0 ;
        rx_fifo_en <= 1'b0 ;
        ctrl       <= ctrl ;
        prdata     <= 32'h0 ;
    end

end

//----------------------------------------------//

assign uart_tx_fifo_wr_data = tx_fifo    ;
assign uart_tx_fifo_wr_en   = tx_fifo_en ;

assign rx_fifo = uart_rx_fifo_rd_data ;
assign uart_rx_fifo_rd_en = rx_fifo_en;

assign rx_fifo_valid =~uart_rx_fifo_empty ;
assign rx_fifo_full  = uart_rx_fifo_full  ;
assign tx_fifo_empty = uart_tx_fifo_empty ;
assign tx_fifo_full  = uart_tx_fifo_full  ;

ph1_logic_uart_fifo u_tx_fifo (
    .clk          ( clk ),
	.rst          ( rst | rst_tx_fifo    ),
	.fifo_empty   ( uart_tx_fifo_empty   ),
	.fifo_full    ( uart_tx_fifo_full    ),
	.fifo_wr_en   ( uart_tx_fifo_wr_en   ),
	.fifo_wr_data ( uart_tx_fifo_wr_data ),
	.fifo_rd_en   ( uart_tx_fifo_rd_en   ),
	.fifo_rd_data ( uart_tx_fifo_rd_data )
);

ph1_logic_uart_fifo u_rx_fifo (
    .clk          ( clk ),
	.rst          ( rst | rst_tx_fifo    ),
	.fifo_empty   ( uart_rx_fifo_empty   ),
	.fifo_full    ( uart_rx_fifo_full    ),
	.fifo_wr_en   ( uart_rx_fifo_wr_en   ),
	.fifo_wr_data ( uart_rx_fifo_wr_data ),
	.fifo_rd_en   ( uart_rx_fifo_rd_en   ),
	.fifo_rd_data ( uart_rx_fifo_rd_data )
);

// Instantiate the UART transmitter
ph1_logic_uart_tx #(
    .BAUD_RATE  ( BAUD_RATE  ),
    .CLOCK_RATE ( CLOCK_RATE )
) u_uart_tx (
    .clk_tx             ( clk                  ),
    .rst_clk_tx         ( rst                  ),
    .char_fifo_empty    ( uart_tx_fifo_empty   ),
    .char_fifo_dout     ( uart_tx_fifo_rd_data ),
    .char_fifo_rd_en    ( uart_tx_fifo_rd_en   ),
    .txd_tx             ( uart_txd             )
);

// Instantiate the UART receiver
ph1_logic_uart_rx #(
    .BAUD_RATE  ( BAUD_RATE  ),
    .CLOCK_RATE ( CLOCK_RATE )
) u_uart_rx (
    .clk_rx      ( clk                  ),
    .rst_clk_rx  ( rst                  ),
    .rxd_i       ( uart_rxd             ),
    .rx_data_vld ( uart_rx_fifo_wr_en   ),
    .rx_data     ( uart_rx_fifo_wr_data ),
    .frm_err     (                      )
);

endmodule

`timescale 1ns/1ps

module ph1_logic_meta_harden (
  input            clk_dst    ,
  input            rst_dst    ,
  input            signal_src ,
  output reg       signal_dst
);


//***************************************************************************
// Register declarations
//***************************************************************************
reg             signal_meta;

//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_dst)
begin
    if (rst_dst) begin
        signal_meta <= 1'b0;
        signal_dst  <= 1'b0;
    end else begin
        signal_meta <= signal_src;
        signal_dst  <= signal_meta;
    end
end

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_baud_gen (
  input        clk,
  input        rst,
  output       baud_x16_en
);


//***************************************************************************
// Constant Functions
//***************************************************************************
function integer clogb2;
    input [31:0] value;
    reg   [31:0] my_value;
    begin
        my_value = value - 1;
        for (clogb2 = 0; my_value > 0; clogb2 = clogb2 + 1)
            my_value = my_value >> 1;
    end
endfunction
  
//***************************************************************************
// Parameter definitions
//***************************************************************************

  parameter BAUD_RATE    = 57_600;
  parameter CLOCK_RATE   = 50_000_000;

  localparam OVERSAMPLE_RATE = BAUD_RATE * 16;

  localparam DIVIDER = (CLOCK_RATE+OVERSAMPLE_RATE/2) / OVERSAMPLE_RATE;

  localparam OVERSAMPLE_VALUE = DIVIDER - 1;

  localparam CNT_WID = clogb2(DIVIDER);


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [CNT_WID-1:0] internal_count;
  reg               baud_x16_en_reg;


//***************************************************************************
// Wire declarations
//***************************************************************************
  wire [CNT_WID-1:0] internal_count_m_1;


//***************************************************************************
// Code
//***************************************************************************
assign internal_count_m_1 = internal_count - 1'b1;

always @(posedge clk)
begin
  if (rst)  begin
    internal_count  <= OVERSAMPLE_VALUE;
    baud_x16_en_reg <= 1'b0;
  end else begin
    baud_x16_en_reg   <= (internal_count_m_1 == {CNT_WID{1'b0}});
    if (internal_count == {CNT_WID{1'b0}})  begin
      internal_count    <= OVERSAMPLE_VALUE;
    end else  begin
      internal_count    <= internal_count_m_1;
    end
  end // if rst
end // always 

assign baud_x16_en = baud_x16_en_reg;

endmodule



`timescale 1ps / 1ps
module ph1_logic_uart_fifo #(
    parameter FWFT = 1
)(
    input  clk ,
	input  rst ,
	
	output fifo_empty   ,
	output fifo_full    ,
	
	input        fifo_wr_en   ,
	input  [7:0] fifo_wr_data ,
	
	input        fifo_rd_en   ,
	output [7:0] fifo_rd_data

);

reg  [7:0] fifo_data[0:15];
reg  [7:0] fifo_data_r    ;

reg  [3:0] fifo_wr_addr ;
reg  [3:0] fifo_rd_addr ;

wire [4:0] fifo_gap ;

assign fifo_empty = (fifo_gap == 5'h0) ? 1'b1 : 1'b0 ;
assign fifo_full  = (fifo_gap == 5'hF) ? 1'b1 : 1'b0 ;

integer n ;

always @ ( posedge clk )
begin
    if ( rst ) begin
        fifo_wr_addr <= #100 4'h0 ;
        for (n = 0; n <= 15; n = n + 1) begin
            fifo_data[n] <= 8'h0 ;
        end
    end else if ( fifo_wr_en ) begin
        if (fifo_gap == 5'h0F)
            fifo_wr_addr <= fifo_wr_addr ;
        else if (fifo_wr_addr == 4'hF) begin
            fifo_data[fifo_wr_addr] <= #100 fifo_wr_data ;
            fifo_wr_addr <= #100 4'h0 ;
        end else begin
            fifo_data[fifo_wr_addr] <= #100 fifo_wr_data ;
            fifo_wr_addr <= #100 fifo_wr_addr + 1'b1 ;
        end
    end else begin
        fifo_wr_addr <= fifo_wr_addr ;
    end
end

always @ ( posedge clk )
begin
    if (rst) begin
        fifo_rd_addr <= #100 4'h0 ;
    end else if ( fifo_rd_en ) begin
        if ( fifo_gap == 5'h00 ) begin
            fifo_rd_addr <= #100 fifo_rd_addr ;
        end else if ( fifo_rd_addr == 4'hF ) begin
            fifo_rd_addr <= #100 4'h0 ;
        end else begin
            fifo_rd_addr <= #100 fifo_rd_addr + 1'b1 ;
        end
    end else begin
        fifo_rd_addr <= #100 fifo_rd_addr ;
    end
end // end of always

assign fifo_gap = (fifo_wr_addr >= fifo_rd_addr) ?
                  (fifo_wr_addr  - fifo_rd_addr) :
           ({1'b1, fifo_wr_addr} - fifo_rd_addr) ;

assign fifo_rd_data = fifo_data[fifo_rd_addr[3:0]] ;

endmodule


`timescale 1ns/1ps
module ph1_logic_uart_rx_ctl (
  input            clk_rx,
  input            rst_clk_rx,
  input            baud_x16_en,

  input            rxd_clk_rx,

  output reg [7:0] rx_data,
  output reg       rx_data_rdy,
  output reg       frm_err
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
  localparam 
    IDLE  = 2'b00,
    START = 2'b01,
    DATA  = 2'b10,
    STOP  = 2'b11;


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [1:0]    state;
  reg [3:0]    over_sample_cnt;
  reg [2:0]    bit_cnt;

//***************************************************************************
// Wire declarations
//***************************************************************************
  wire         over_sample_cnt_done;
  wire         bit_cnt_done;
  
//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        state       <= IDLE;
    end else begin
        if (baud_x16_en) begin
            case (state)
            IDLE: begin
                if (!rxd_clk_rx) begin
                    state <= START;
                end
            end // IDLE state

            START: begin
                if (over_sample_cnt_done) begin
                  if (!rxd_clk_rx) begin
                      state <= DATA;
                  end else begin
                      state <= IDLE;
                  end
                end // if over_sample_cnt_done
            end // START state

            DATA: begin
                if (over_sample_cnt_done && bit_cnt_done) begin
                    state <= STOP;
                end
            end // DATA state

            STOP: begin
                if (over_sample_cnt_done) begin
                    state <= IDLE;
                end
            end // STOP state
            endcase
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 


// Oversample counter
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        over_sample_cnt    <= 4'd0;
    end else begin
        if (baud_x16_en)  begin
            if (!over_sample_cnt_done) begin
                over_sample_cnt <= over_sample_cnt - 1'b1;
            end else begin
                if ((state == IDLE) && !rxd_clk_rx) begin
                    over_sample_cnt <= 4'd7;
                end else if ( ((state == START) && !rxd_clk_rx) || (state == DATA)  ) begin
                    over_sample_cnt <= 4'd15;
                end
            end
        end
    end // if rst_clk_rx
end // always 

assign over_sample_cnt_done = (over_sample_cnt == 4'd0);

always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        bit_cnt    <= 3'b0;
    end else begin
        if (baud_x16_en) begin
            if (over_sample_cnt_done) begin
                if (state == START) begin
                    bit_cnt <= 3'd0;
                end else if (state == DATA) begin
                    bit_cnt <= bit_cnt + 1'b1;
                end
            end // if over_sample_cnt_done
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 

assign bit_cnt_done = (bit_cnt == 3'd7);

// Capture the data and generate the rdy signal
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        rx_data     <= 8'b0000_0000;
        rx_data_rdy <= 1'b0;
    end else begin
        if (baud_x16_en && over_sample_cnt_done) begin
            if (state == DATA) begin
                rx_data[bit_cnt] <= rxd_clk_rx;
                rx_data_rdy      <= (bit_cnt == 3'd7);
            end else begin
                rx_data_rdy      <= 1'b0;
            end
        end
    end // if rst_clk_rx
end // always 

// Framing error generation
always @(posedge clk_rx)
begin
    if (rst_clk_rx) begin
        frm_err     <= 1'b0;
    end else begin
        if (baud_x16_en) begin
            if ((state == STOP) && over_sample_cnt_done && !rxd_clk_rx) begin
                frm_err <= 1'b1;
            end else begin
                frm_err <= 1'b0;
            end
        end // if baud_x16_en
    end // if rst_clk_rx
end // always 


endmodule

`timescale 1ns/1ps

module ph1_logic_uart_rx (
  input            clk_rx,
  input            rst_clk_rx,

  input            rxd_i,

  output     [7:0] rx_data,
  output           rx_data_vld,
  output           frm_err
);


//***************************************************************************
// Parameter definitions
//***************************************************************************

  parameter BAUD_RATE    = 115_200;
  parameter CLOCK_RATE   = 50_000_000;

//***************************************************************************
// Wire/Reg declarations
//***************************************************************************
wire rxd_clk_rx ;
wire baud_x16_en;

wire      rx_data_rdy   ;
reg [1:0] rx_data_rdy_r ;
 
//***************************************************************************
// Code
//***************************************************************************
ph1_logic_meta_harden meta_harden_rxd_i0 (
    .clk_dst      (clk_rx),
    .rst_dst      (rst_clk_rx), 
    .signal_src   (rxd_i),
    .signal_dst   (rxd_clk_rx)
);

ph1_logic_uart_baud_gen #(
    .BAUD_RATE  (BAUD_RATE),
    .CLOCK_RATE (CLOCK_RATE)
) uart_baud_gen_rx_i0 (
    .clk         (clk_rx),
    .rst         (rst_clk_rx),
    .baud_x16_en (baud_x16_en)
);

ph1_logic_uart_rx_ctl uart_rx_ctl_i0 (
    .clk_rx      (clk_rx),
    .rst_clk_rx  (rst_clk_rx),
    .baud_x16_en (baud_x16_en),

    .rxd_clk_rx  (rxd_clk_rx),
    
    .rx_data_rdy (rx_data_rdy),
    .rx_data     (rx_data),
    .frm_err     (frm_err)
);

always @ ( posedge clk_rx )
begin
    rx_data_rdy_r <= {rx_data_rdy_r[0], rx_data_rdy};
end

assign rx_data_vld = rx_data_rdy_r[0] & (~rx_data_rdy_r[1]);

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_tx_ctl (
    input            clk_tx          ,
    input            rst_clk_tx      ,
    input            baud_x16_en     ,
    input            char_fifo_empty ,
    input      [7:0] char_fifo_dout  ,
    output           char_fifo_rd_en ,
    output reg       txd_tx
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
  localparam 
    IDLE  = 2'b00,
    START = 2'b01,
    DATA  = 2'b10,
    STOP  = 2'b11;


//***************************************************************************
// Reg declarations
//***************************************************************************
  reg [1:0]    state;
  reg [3:0]    over_sample_cnt;
  reg [2:0]    bit_cnt;
  reg          char_fifo_pop;

//***************************************************************************
// Wire declarations
//***************************************************************************
  wire         over_sample_cnt_done;
  wire         bit_cnt_done;
  
//***************************************************************************
// Code
//***************************************************************************
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        state         <= IDLE;
        char_fifo_pop <= 1'b0;
    end else begin
        if (baud_x16_en) begin
            char_fifo_pop <= 1'b0;
            case (state)
            IDLE: begin
                if (!char_fifo_empty) begin
                    state <= START;
                end
            end // IDLE state

            START: begin
                if (over_sample_cnt_done) begin
                    state <= DATA;
                end // if over_sample_cnt_done
            end // START state

            DATA: begin
                if (over_sample_cnt_done && bit_cnt_done) begin
                    char_fifo_pop <= 1'b1;
                    state         <= STOP;
                end
            end // DATA state

            STOP: begin
                if (over_sample_cnt_done) begin
                    if (char_fifo_empty) begin
                        state <= IDLE;
                    end else begin
                    state <= START;
                    end
                end
            end // STOP state
            endcase
        end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign char_fifo_rd_en = char_fifo_pop && baud_x16_en;


// Oversample counter
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        over_sample_cnt    <= 4'd0;
    end else begin
        if (baud_x16_en) begin
            if (!over_sample_cnt_done) begin
                over_sample_cnt <= over_sample_cnt - 1'b1;
            end else begin
                if (((state == IDLE) && !char_fifo_empty) ||
                     (state == START) || 
                     (state == DATA)  ||
                    ((state == STOP) && !char_fifo_empty)) begin
                    over_sample_cnt <= 4'd15;
                end
            end
        end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign over_sample_cnt_done = (over_sample_cnt == 4'd0);

// Track which bit we are about to transmit
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        bit_cnt    <= 3'b0;
    end else begin
       if (baud_x16_en) begin
           if (over_sample_cnt_done) begin
               if (state == START) begin
                   bit_cnt <= 3'd0;
               end else if (state == DATA) begin
                   bit_cnt <= bit_cnt + 1'b1;
               end
           end // if over_sample_cnt_done
       end // if baud_x16_en
    end // if rst_clk_tx
end // always 

assign bit_cnt_done = (bit_cnt == 3'd7);

// Generate the output
always @(posedge clk_tx)
begin
    if (rst_clk_tx) begin
        txd_tx    <= 1'b1;
    end else begin
        if (baud_x16_en) begin
            if ((state == STOP) || (state == IDLE)) begin
                txd_tx <= 1'b1;
            end else if (state == START) begin
                txd_tx <= 1'b0;
            end else begin
                txd_tx <= char_fifo_dout[bit_cnt];
            end
        end // if baud_x16_en
    end // if rst
end // always

endmodule


`timescale 1ns/1ps

module ph1_logic_uart_tx (
  input        clk_tx          ,
  input        rst_clk_tx      ,

  input        char_fifo_empty ,
  input  [7:0] char_fifo_dout  ,
  output       char_fifo_rd_en ,

  output       txd_tx
);


//***************************************************************************
// Parameter definitions
//***************************************************************************
parameter BAUD_RATE    = 57_600;
parameter CLOCK_RATE   = 50_000_000;

//***************************************************************************
// Reg declarations
//***************************************************************************

//***************************************************************************
// Wire declarations
//***************************************************************************
wire             baud_x16_en;
  
//***************************************************************************
// Code
//***************************************************************************
ph1_logic_uart_baud_gen #(
    .BAUD_RATE  (BAUD_RATE),
    .CLOCK_RATE (CLOCK_RATE)
) uart_baud_gen_tx_i0 (
    .clk         ( clk_tx      ),
    .rst         ( rst_clk_tx  ),
    .baud_x16_en ( baud_x16_en )
);

ph1_logic_uart_tx_ctl uart_tx_ctl_i0 (
    .clk_tx	            ( clk_tx          ),
    .rst_clk_tx	        ( rst_clk_tx      ),
    .baud_x16_en        ( baud_x16_en     ),
    .char_fifo_empty	( char_fifo_empty ),
    .char_fifo_dout	    ( char_fifo_dout  ),
    .char_fifo_rd_en   	( char_fifo_rd_en ),
    .txd_tx	            ( txd_tx          )
);

endmodule

//***************************************************************************
// APB GPIO Modules
//***************************************************************************
`timescale 1ps / 1ps
module ph1_logic_SopcGpio (
    input               io_clk,
    input               io_rst,
    input      [3:0]    io_apb_PADDR,
    input      [0:0]    io_apb_PSEL,
    input               io_apb_PENABLE,
    output              io_apb_PREADY,
    input               io_apb_PWRITE,
    input      [31:0]   io_apb_PWDATA,
    output reg [31:0]   io_apb_PRDATA,
    output              io_apb_PSLVERROR,
    input      [31:0]   io_gpio_read,
    output     [31:0]   io_gpio_write,
    input      [31:0]   io_gpio_user
);

reg    [31:0]   data_write; // 0
reg    [31:0]   data_read ; // 4
reg    [31:0]   data_user ; // 8

wire   apb_wr_flag ;
wire   apb_rd_flag ;

assign apb_wr_flag = (io_apb_PWRITE == 1'b1) ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;
assign apb_rd_flag = (io_apb_PWRITE == 1'b0) ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_gpio_write = data_write;

always @ ( posedge io_clk ) begin
    data_read <= io_gpio_read ;
    data_user <= io_gpio_user ;
end

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        data_write <= 32'h0;
    end else if(apb_wr_flag)begin
        case (io_apb_PADDR)
        4'b0000:
            data_write <= io_apb_PWDATA;
        default: begin
            data_write <= data_write;
        end
        endcase
    end else begin
        data_write <= data_write ;
    end
end

always @ ( * ) begin
    if (apb_rd_flag) begin
        case (io_apb_PADDR)
        4'b0000:
            io_apb_PRDATA <= data_write;
        4'b0100:
            io_apb_PRDATA <= data_read;
        4'b1000:
            io_apb_PRDATA <= data_user;
        default: begin
            io_apb_PRDATA <= data_read;
        end
        endcase
    end else begin
        io_apb_PRDATA <= data_read  ;
    end
end

endmodule


//***************************************************************************
// APB User DRAM Modules
//***************************************************************************

`timescale 1ps/1ps

module ph1_logic_SopcUserRam (
    input               io_clk,
    input               io_rst,
    input      [17:0]   io_apb_PADDR,
    input      [ 0:0]   io_apb_PSEL,
    input               io_apb_PENABLE,
    output              io_apb_PREADY,
    input               io_apb_PWRITE,
    input      [31:0]   io_apb_PWDATA,
    output     [31:0]   io_apb_PRDATA,
    output              io_apb_PSLVERROR,

    input      [ 7:0]   user_ram_addr    ,
    input               user_ram_wr_en   ,
    input               user_ram_rd_en   ,
    input      [31:0]   user_ram_wr_data ,
    output reg [31:0]   user_ram_rd_data
);

reg  [31:0] ram_symbol[0:255]; //synthesis ram_style = dram

wire [15:0] ram_wr_addr ; //synthesis keep
wire [15:0] ram_rd_addr ; //synthesis keep
wire [31:0] ram_rd_data ; //synthesis keep
wire [31:0] ram_wr_data ; //synthesis keep
wire        ram_wr_en   ; //synthesis keep

wire   apb_wr_flag ;
wire   apb_rd_flag ;

assign apb_wr_flag = io_apb_PWRITE ? (io_apb_PSEL[0] & io_apb_PENABLE) : 1'b0 ;
assign apb_rd_flag = io_apb_PWRITE ? 1'b0 : (io_apb_PSEL[0] & io_apb_PENABLE) ;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_apb_PRDATA    = ram_rd_data ;

assign ram_wr_en        = io_apb_PSEL[0] ? apb_wr_flag        : user_ram_wr_en  ;
assign ram_wr_data      = io_apb_PSEL[0] ? io_apb_PWDATA      : user_ram_wr_data;
assign ram_wr_addr      = io_apb_PSEL[0] ? io_apb_PADDR[17:2] : user_ram_addr   ;
assign ram_rd_addr      = io_apb_PSEL[0] ? io_apb_PADDR[17:2] : user_ram_addr   ;

`ifdef  PH1_DDR_SIM
string ddrphy_cfg_file;

initial begin
`ifdef CTRL_INDEX_0 
    $value$plusargs("DDRPHY_CFG_FILE_0=%s", ddrphy_cfg_file);
`else
    $value$plusargs("DDRPHY_CFG_FILE_1=%s", ddrphy_cfg_file);
`endif

    $readmemh(ddrphy_cfg_file, ram_symbol);
end

`else

initial begin
    $readmemh("./ddr_ip_1.txt", ram_symbol);
end

`endif

always @ (posedge io_clk) begin
    if ( ram_wr_en ) begin
        ram_symbol[ram_wr_addr] <= ram_wr_data;
    end
end

assign ram_rd_data = ram_symbol[ram_rd_addr];

always @ (posedge io_clk) begin
    if (user_ram_rd_en) begin
        user_ram_rd_data <= ram_rd_data;
    end
end

endmodule


//***************************************************************************
// APB Timer Modules
//***************************************************************************
`timescale 1ps / 1ps
module ph1_logic_SopcTimer (
  input               io_clk,
  input               io_rst,
  input      [27:0]   io_apb_PADDR,
  input               io_apb_PSEL,
  input               io_apb_PENABLE,
  output              io_apb_PREADY,
  input               io_apb_PWRITE,
  input      [31:0]   io_apb_PWDATA,
  output     [31:0]   io_apb_PRDATA,
  output              io_apb_PSLVERROR,
  input               io_interruptClear,
  output reg          io_interrupt
);
  
reg        [31:0]   timer_counter;
wire                timer_setValue;
wire                timer_getValue;

assign io_apb_PREADY    = 1'b1;
assign io_apb_PSLVERROR = 1'b0;
assign io_apb_PRDATA    = timer_counter;

assign timer_setValue = io_apb_PREADY && io_apb_PSEL && io_apb_PENABLE &&   io_apb_PWRITE ;
assign timer_getValue = io_apb_PREADY && io_apb_PSEL && io_apb_PENABLE && (~io_apb_PWRITE);

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        io_interrupt <= 1'b0;
    end else if (timer_counter == 32'h1)begin
        io_interrupt <= 1'b1;
    end else if (io_interruptClear)begin
        io_interrupt <= 1'b0;
    end
end

always @ (posedge io_clk or posedge io_rst) begin
    if (io_rst) begin
        timer_counter <= 32'h0;
    end else if (timer_setValue) begin
        timer_counter <= io_apb_PWDATA;
    end else if ( timer_counter == 32'h0 )begin
        timer_counter <= timer_counter ;
    end else begin
        timer_counter <= timer_counter - 1'b1;
    end
end


endmodule

// this file should be place on the tail of the <ip_name>.v

`ifdef DRAM_DDR4 
`undef DRAM_DDR4
`endif 
`ifdef DRAM_DDR3
`undef DRAM_DDR3
`endif 
`ifdef USE_CLK1 
`undef USE_CLK1 
`endif 
`ifdef USE_CLK2 
`undef USE_CLK2 
`endif 
`ifdef USE_CLK3 
`undef USE_CLK3 
`endif 
`ifdef USE_CLK4 
`undef USE_CLK4 
`endif 
`ifdef USE_DEBUG
`undef USE_DEBUG
`endif 
`ifdef USE_RESET
`undef USE_RESET
`endif 
`ifdef USE_PAR_ALERT
`undef USE_PAR_ALERT
`endif 
`ifdef USE_CS
`undef USE_CS
`endif 
`ifdef USE_DM 
`undef USE_DM 
`endif 
`ifdef DFI_FIFO
`undef DFI_FIFO
`endif 
`ifdef CTRL_INDEX_0
`undef CTRL_INDEX_0
`endif 
`ifdef CTRL_INDEX_1
`undef CTRL_INDEX_1
`endif 
`ifdef USE_PING_PONG_PHY
`undef USE_PING_PONG_PHY
`endif 
`ifdef USE_EFFICIENCY_EQUALIZER
`undef USE_EFFICIENCY_EQUALIZER
`endif 
`ifdef USE_USER_DRAM
`undef USE_USER_DRAM
`endif 
`ifdef PPC_LOC_Y80
`undef PPC_LOC_Y80
`endif 
`ifdef PPC_LOC_Y40
`undef PPC_LOC_Y40
`endif 
`ifdef PPC_LOC_Y0
`undef PPC_LOC_Y0
`endif 

